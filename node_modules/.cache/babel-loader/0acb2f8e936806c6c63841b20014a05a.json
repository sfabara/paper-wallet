{"ast":null,"code":"'use strict';\n\nvar _ = require('lodash');\n\nvar $ = require('../util/preconditions');\n\nvar JSUtil = require('../util/js');\n\nvar Script = require('../script');\n\nvar Address = require('../address');\n\nvar Unit = require('../unit');\n/**\n * Represents an unspent output information: its script, associated amount and address,\n * transaction id and output index.\n *\n * @constructor\n * @param {object} data\n * @param {string} data.txid the previous transaction id\n * @param {string=} data.txId alias for `txid`\n * @param {number} data.vout the index in the transaction\n * @param {number=} data.outputIndex alias for `vout`\n * @param {string|Script} data.scriptPubKey the script that must be resolved to release the funds\n * @param {string|Script=} data.script alias for `scriptPubKey`\n * @param {number} data.amount amount of bitcoins associated\n * @param {number=} data.satoshis alias for `amount`, but expressed in satoshis (1 BTC = 1e8 satoshis)\n * @param {string|Address=} data.address the associated address to the script, if provided\n */\n\n\nfunction UnspentOutput(data) {\n  /* jshint maxcomplexity: 20 */\n\n  /* jshint maxstatements: 20 */\n  if (!(this instanceof UnspentOutput)) {\n    return new UnspentOutput(data);\n  }\n\n  $.checkArgument(_.isObject(data), 'Must provide an object from where to extract data');\n  var address = data.address ? new Address(data.address) : undefined;\n  var txId = data.txid ? data.txid : data.txId;\n\n  if (!txId || !JSUtil.isHexaString(txId) || txId.length > 64) {\n    // TODO: Use the errors library\n    throw new Error('Invalid TXID in object', data);\n  }\n\n  var outputIndex = _.isUndefined(data.vout) ? data.outputIndex : data.vout;\n\n  if (!_.isNumber(outputIndex)) {\n    throw new Error('Invalid outputIndex, received ' + outputIndex);\n  }\n\n  $.checkArgument(!_.isUndefined(data.scriptPubKey) || !_.isUndefined(data.script), 'Must provide the scriptPubKey for that output!');\n  var script = new Script(data.scriptPubKey || data.script);\n  $.checkArgument(!_.isUndefined(data.amount) || !_.isUndefined(data.satoshis), 'Must provide an amount for the output');\n  var amount = !_.isUndefined(data.amount) ? new Unit.fromBTC(data.amount).toSatoshis() : data.satoshis;\n  $.checkArgument(_.isNumber(amount), 'Amount must be a number');\n  JSUtil.defineImmutable(this, {\n    address: address,\n    txId: txId,\n    outputIndex: outputIndex,\n    script: script,\n    satoshis: amount\n  });\n}\n/**\n * Provide an informative output when displaying this object in the console\n * @returns string\n */\n\n\nUnspentOutput.prototype.inspect = function () {\n  return '<UnspentOutput: ' + this.txId + ':' + this.outputIndex + ', satoshis: ' + this.satoshis + ', address: ' + this.address + '>';\n};\n/**\n * String representation: just \"txid:index\"\n * @returns string\n */\n\n\nUnspentOutput.prototype.toString = function () {\n  return this.txId + ':' + this.outputIndex;\n};\n/**\n * Deserialize an UnspentOutput from an object\n * @param {object|string} data\n * @return UnspentOutput\n */\n\n\nUnspentOutput.fromObject = function (data) {\n  return new UnspentOutput(data);\n};\n/**\n * Returns a plain object (no prototype or methods) with the associated info for this output\n * @return {object}\n */\n\n\nUnspentOutput.prototype.toObject = UnspentOutput.prototype.toJSON = function toObject() {\n  return {\n    address: this.address ? this.address.toString() : undefined,\n    txid: this.txId,\n    vout: this.outputIndex,\n    scriptPubKey: this.script.toBuffer().toString('hex'),\n    amount: Unit.fromSatoshis(this.satoshis).toBTC()\n  };\n};\n\nmodule.exports = UnspentOutput;","map":{"version":3,"sources":["/home/user/Desktop/paper/node_modules/bitcore-lib-litecoin/lib/transaction/unspentoutput.js"],"names":["_","require","$","JSUtil","Script","Address","Unit","UnspentOutput","data","checkArgument","isObject","address","undefined","txId","txid","isHexaString","length","Error","outputIndex","isUndefined","vout","isNumber","scriptPubKey","script","amount","satoshis","fromBTC","toSatoshis","defineImmutable","prototype","inspect","toString","fromObject","toObject","toJSON","toBuffer","fromSatoshis","toBTC","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nvar _ = require('lodash');\nvar $ = require('../util/preconditions');\nvar JSUtil = require('../util/js');\n\nvar Script = require('../script');\nvar Address = require('../address');\nvar Unit = require('../unit');\n\n/**\n * Represents an unspent output information: its script, associated amount and address,\n * transaction id and output index.\n *\n * @constructor\n * @param {object} data\n * @param {string} data.txid the previous transaction id\n * @param {string=} data.txId alias for `txid`\n * @param {number} data.vout the index in the transaction\n * @param {number=} data.outputIndex alias for `vout`\n * @param {string|Script} data.scriptPubKey the script that must be resolved to release the funds\n * @param {string|Script=} data.script alias for `scriptPubKey`\n * @param {number} data.amount amount of bitcoins associated\n * @param {number=} data.satoshis alias for `amount`, but expressed in satoshis (1 BTC = 1e8 satoshis)\n * @param {string|Address=} data.address the associated address to the script, if provided\n */\nfunction UnspentOutput(data) {\n  /* jshint maxcomplexity: 20 */\n  /* jshint maxstatements: 20 */\n  if (!(this instanceof UnspentOutput)) {\n    return new UnspentOutput(data);\n  }\n  $.checkArgument(_.isObject(data), 'Must provide an object from where to extract data');\n  var address = data.address ? new Address(data.address) : undefined;\n  var txId = data.txid ? data.txid : data.txId;\n  if (!txId || !JSUtil.isHexaString(txId) || txId.length > 64) {\n    // TODO: Use the errors library\n    throw new Error('Invalid TXID in object', data);\n  }\n  var outputIndex = _.isUndefined(data.vout) ? data.outputIndex : data.vout;\n  if (!_.isNumber(outputIndex)) {\n    throw new Error('Invalid outputIndex, received ' + outputIndex);\n  }\n  $.checkArgument(!_.isUndefined(data.scriptPubKey) || !_.isUndefined(data.script),\n                  'Must provide the scriptPubKey for that output!');\n  var script = new Script(data.scriptPubKey || data.script);\n  $.checkArgument(!_.isUndefined(data.amount) || !_.isUndefined(data.satoshis),\n                  'Must provide an amount for the output');\n  var amount = !_.isUndefined(data.amount) ? new Unit.fromBTC(data.amount).toSatoshis() : data.satoshis;\n  $.checkArgument(_.isNumber(amount), 'Amount must be a number');\n  JSUtil.defineImmutable(this, {\n    address: address,\n    txId: txId,\n    outputIndex: outputIndex,\n    script: script,\n    satoshis: amount\n  });\n}\n\n/**\n * Provide an informative output when displaying this object in the console\n * @returns string\n */\nUnspentOutput.prototype.inspect = function() {\n  return '<UnspentOutput: ' + this.txId + ':' + this.outputIndex +\n         ', satoshis: ' + this.satoshis + ', address: ' + this.address + '>';\n};\n\n/**\n * String representation: just \"txid:index\"\n * @returns string\n */\nUnspentOutput.prototype.toString = function() {\n  return this.txId + ':' + this.outputIndex;\n};\n\n/**\n * Deserialize an UnspentOutput from an object\n * @param {object|string} data\n * @return UnspentOutput\n */\nUnspentOutput.fromObject = function(data) {\n  return new UnspentOutput(data);\n};\n\n/**\n * Returns a plain object (no prototype or methods) with the associated info for this output\n * @return {object}\n */\nUnspentOutput.prototype.toObject = UnspentOutput.prototype.toJSON = function toObject() {\n  return {\n    address: this.address ? this.address.toString() : undefined,\n    txid: this.txId,\n    vout: this.outputIndex,\n    scriptPubKey: this.script.toBuffer().toString('hex'),\n    amount: Unit.fromSatoshis(this.satoshis).toBTC()\n  };\n};\n\nmodule.exports = UnspentOutput;\n"]},"metadata":{},"sourceType":"script"}