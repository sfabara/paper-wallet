{"ast":null,"code":"'use strict';\n\nvar buffer = require('buffer');\n\nvar assert = require('assert');\n\nvar js = require('./js');\n\nvar $ = require('./preconditions');\n\nfunction equals(a, b) {\n  if (a.length !== b.length) {\n    return false;\n  }\n\n  var length = a.length;\n\n  for (var i = 0; i < length; i++) {\n    if (a[i] !== b[i]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nmodule.exports = {\n  /**\n   * Fill a buffer with a value.\n   *\n   * @param {Buffer} buffer\n   * @param {number} value\n   * @return {Buffer}\n   */\n  fill: function fill(buffer, value) {\n    $.checkArgumentType(buffer, 'Buffer', 'buffer');\n    $.checkArgumentType(value, 'number', 'value');\n    var length = buffer.length;\n\n    for (var i = 0; i < length; i++) {\n      buffer[i] = value;\n    }\n\n    return buffer;\n  },\n\n  /**\n   * Return a copy of a buffer\n   *\n   * @param {Buffer} original\n   * @return {Buffer}\n   */\n  copy: function (original) {\n    var buffer = new Buffer(original.length);\n    original.copy(buffer);\n    return buffer;\n  },\n\n  /**\n   * Returns true if the given argument is an instance of a buffer. Tests for\n   * both node's Buffer and Uint8Array\n   *\n   * @param {*} arg\n   * @return {boolean}\n   */\n  isBuffer: function isBuffer(arg) {\n    return buffer.Buffer.isBuffer(arg) || arg instanceof Uint8Array;\n  },\n\n  /**\n   * Returns a zero-filled byte array\n   *\n   * @param {number} bytes\n   * @return {Buffer}\n   */\n  emptyBuffer: function emptyBuffer(bytes) {\n    $.checkArgumentType(bytes, 'number', 'bytes');\n    var result = new buffer.Buffer(bytes);\n\n    for (var i = 0; i < bytes; i++) {\n      result.write('\\0', i);\n    }\n\n    return result;\n  },\n\n  /**\n   * Concatenates a buffer\n   *\n   * Shortcut for <tt>buffer.Buffer.concat</tt>\n   */\n  concat: buffer.Buffer.concat,\n  equals: equals,\n  equal: equals,\n\n  /**\n   * Transforms a number from 0 to 255 into a Buffer of size 1 with that value\n   *\n   * @param {number} integer\n   * @return {Buffer}\n   */\n  integerAsSingleByteBuffer: function integerAsSingleByteBuffer(integer) {\n    $.checkArgumentType(integer, 'number', 'integer');\n    return new buffer.Buffer([integer & 0xff]);\n  },\n\n  /**\n   * Transform a 4-byte integer into a Buffer of length 4.\n   *\n   * @param {number} integer\n   * @return {Buffer}\n   */\n  integerAsBuffer: function integerAsBuffer(integer) {\n    $.checkArgumentType(integer, 'number', 'integer');\n    var bytes = [];\n    bytes.push(integer >> 24 & 0xff);\n    bytes.push(integer >> 16 & 0xff);\n    bytes.push(integer >> 8 & 0xff);\n    bytes.push(integer & 0xff);\n    return new Buffer(bytes);\n  },\n\n  /**\n   * Transform the first 4 values of a Buffer into a number, in little endian encoding\n   *\n   * @param {Buffer} buffer\n   * @return {number}\n   */\n  integerFromBuffer: function integerFromBuffer(buffer) {\n    $.checkArgumentType(buffer, 'Buffer', 'buffer');\n    return buffer[0] << 24 | buffer[1] << 16 | buffer[2] << 8 | buffer[3];\n  },\n\n  /**\n   * Transforms the first byte of an array into a number ranging from -128 to 127\n   * @param {Buffer} buffer\n   * @return {number}\n   */\n  integerFromSingleByteBuffer: function integerFromBuffer(buffer) {\n    $.checkArgumentType(buffer, 'Buffer', 'buffer');\n    return buffer[0];\n  },\n\n  /**\n   * Transforms a buffer into a string with a number in hexa representation\n   *\n   * Shorthand for <tt>buffer.toString('hex')</tt>\n   *\n   * @param {Buffer} buffer\n   * @return {string}\n   */\n  bufferToHex: function bufferToHex(buffer) {\n    $.checkArgumentType(buffer, 'Buffer', 'buffer');\n    return buffer.toString('hex');\n  },\n\n  /**\n   * Reverse a buffer\n   * @param {Buffer} param\n   * @return {Buffer}\n   */\n  reverse: function reverse(param) {\n    var ret = new buffer.Buffer(param.length);\n\n    for (var i = 0; i < param.length; i++) {\n      ret[i] = param[param.length - i - 1];\n    }\n\n    return ret;\n  },\n\n  /**\n   * Transforms an hexa encoded string into a Buffer with binary values\n   *\n   * Shorthand for <tt>Buffer(string, 'hex')</tt>\n   *\n   * @param {string} string\n   * @return {Buffer}\n   */\n  hexToBuffer: function hexToBuffer(string) {\n    assert(js.isHexa(string));\n    return new buffer.Buffer(string, 'hex');\n  }\n};\nmodule.exports.NULL_HASH = module.exports.fill(new Buffer(32), 0);\nmodule.exports.EMPTY_BUFFER = new Buffer(0);","map":{"version":3,"sources":["/home/user/Desktop/paper/node_modules/bitcore-lib-litecoin/lib/util/buffer.js"],"names":["buffer","require","assert","js","$","equals","a","b","length","i","module","exports","fill","value","checkArgumentType","copy","original","Buffer","isBuffer","arg","Uint8Array","emptyBuffer","bytes","result","write","concat","equal","integerAsSingleByteBuffer","integer","integerAsBuffer","push","integerFromBuffer","integerFromSingleByteBuffer","bufferToHex","toString","reverse","param","ret","hexToBuffer","string","isHexa","NULL_HASH","EMPTY_BUFFER"],"mappings":"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","sourcesContent":["'use strict';\n\nvar buffer = require('buffer');\nvar assert = require('assert');\n\nvar js = require('./js');\nvar $ = require('./preconditions');\n\nfunction equals(a, b) {\n  if (a.length !== b.length) {\n    return false;\n  }\n  var length = a.length;\n  for (var i = 0; i < length; i++) {\n    if (a[i] !== b[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n\nmodule.exports = {\n  /**\n   * Fill a buffer with a value.\n   *\n   * @param {Buffer} buffer\n   * @param {number} value\n   * @return {Buffer}\n   */\n  fill: function fill(buffer, value) {\n    $.checkArgumentType(buffer, 'Buffer', 'buffer');\n    $.checkArgumentType(value, 'number', 'value');\n    var length = buffer.length;\n    for (var i = 0; i < length; i++) {\n      buffer[i] = value;\n    }\n    return buffer;\n  },\n\n  /**\n   * Return a copy of a buffer\n   *\n   * @param {Buffer} original\n   * @return {Buffer}\n   */\n  copy: function(original) {\n    var buffer = new Buffer(original.length);\n    original.copy(buffer);\n    return buffer;\n  },\n\n  /**\n   * Returns true if the given argument is an instance of a buffer. Tests for\n   * both node's Buffer and Uint8Array\n   *\n   * @param {*} arg\n   * @return {boolean}\n   */\n  isBuffer: function isBuffer(arg) {\n    return buffer.Buffer.isBuffer(arg) || arg instanceof Uint8Array;\n  },\n\n  /**\n   * Returns a zero-filled byte array\n   *\n   * @param {number} bytes\n   * @return {Buffer}\n   */\n  emptyBuffer: function emptyBuffer(bytes) {\n    $.checkArgumentType(bytes, 'number', 'bytes');\n    var result = new buffer.Buffer(bytes);\n    for (var i = 0; i < bytes; i++) {\n      result.write('\\0', i);\n    }\n    return result;\n  },\n\n  /**\n   * Concatenates a buffer\n   *\n   * Shortcut for <tt>buffer.Buffer.concat</tt>\n   */\n  concat: buffer.Buffer.concat,\n\n  equals: equals,\n  equal: equals,\n\n  /**\n   * Transforms a number from 0 to 255 into a Buffer of size 1 with that value\n   *\n   * @param {number} integer\n   * @return {Buffer}\n   */\n  integerAsSingleByteBuffer: function integerAsSingleByteBuffer(integer) {\n    $.checkArgumentType(integer, 'number', 'integer');\n    return new buffer.Buffer([integer & 0xff]);\n  },\n\n  /**\n   * Transform a 4-byte integer into a Buffer of length 4.\n   *\n   * @param {number} integer\n   * @return {Buffer}\n   */\n  integerAsBuffer: function integerAsBuffer(integer) {\n    $.checkArgumentType(integer, 'number', 'integer');\n    var bytes = [];\n    bytes.push((integer >> 24) & 0xff);\n    bytes.push((integer >> 16) & 0xff);\n    bytes.push((integer >> 8) & 0xff);\n    bytes.push(integer & 0xff);\n    return new Buffer(bytes);\n  },\n\n  /**\n   * Transform the first 4 values of a Buffer into a number, in little endian encoding\n   *\n   * @param {Buffer} buffer\n   * @return {number}\n   */\n  integerFromBuffer: function integerFromBuffer(buffer) {\n    $.checkArgumentType(buffer, 'Buffer', 'buffer');\n    return buffer[0] << 24 | buffer[1] << 16 | buffer[2] << 8 | buffer[3];\n  },\n\n  /**\n   * Transforms the first byte of an array into a number ranging from -128 to 127\n   * @param {Buffer} buffer\n   * @return {number}\n   */\n  integerFromSingleByteBuffer: function integerFromBuffer(buffer) {\n    $.checkArgumentType(buffer, 'Buffer', 'buffer');\n    return buffer[0];\n  },\n\n  /**\n   * Transforms a buffer into a string with a number in hexa representation\n   *\n   * Shorthand for <tt>buffer.toString('hex')</tt>\n   *\n   * @param {Buffer} buffer\n   * @return {string}\n   */\n  bufferToHex: function bufferToHex(buffer) {\n    $.checkArgumentType(buffer, 'Buffer', 'buffer');\n    return buffer.toString('hex');\n  },\n\n  /**\n   * Reverse a buffer\n   * @param {Buffer} param\n   * @return {Buffer}\n   */\n  reverse: function reverse(param) {\n    var ret = new buffer.Buffer(param.length);\n    for (var i = 0; i < param.length; i++) {\n      ret[i] = param[param.length - i - 1];\n    }\n    return ret;\n  },\n\n  /**\n   * Transforms an hexa encoded string into a Buffer with binary values\n   *\n   * Shorthand for <tt>Buffer(string, 'hex')</tt>\n   *\n   * @param {string} string\n   * @return {Buffer}\n   */\n  hexToBuffer: function hexToBuffer(string) {\n    assert(js.isHexa(string));\n    return new buffer.Buffer(string, 'hex');\n  }\n};\n\nmodule.exports.NULL_HASH = module.exports.fill(new Buffer(32), 0);\nmodule.exports.EMPTY_BUFFER = new Buffer(0);\n"]},"metadata":{},"sourceType":"script"}