{"ast":null,"code":"var utils = exports;\n\nvar inherits = require('inherits');\n\nfunction toArray(msg, enc) {\n  if (Array.isArray(msg)) return msg.slice();\n  if (!msg) return [];\n  var res = [];\n\n  if (typeof msg === 'string') {\n    if (!enc) {\n      for (var i = 0; i < msg.length; i++) {\n        var c = msg.charCodeAt(i);\n        var hi = c >> 8;\n        var lo = c & 0xff;\n        if (hi) res.push(hi, lo);else res.push(lo);\n      }\n    } else if (enc === 'hex') {\n      msg = msg.replace(/[^a-z0-9]+/ig, '');\n      if (msg.length % 2 !== 0) msg = '0' + msg;\n\n      for (var i = 0; i < msg.length; i += 2) res.push(parseInt(msg[i] + msg[i + 1], 16));\n    }\n  } else {\n    for (var i = 0; i < msg.length; i++) res[i] = msg[i] | 0;\n  }\n\n  return res;\n}\n\nutils.toArray = toArray;\n\nfunction toHex(msg) {\n  var res = '';\n\n  for (var i = 0; i < msg.length; i++) res += zero2(msg[i].toString(16));\n\n  return res;\n}\n\nutils.toHex = toHex;\n\nfunction htonl(w) {\n  var res = w >>> 24 | w >>> 8 & 0xff00 | w << 8 & 0xff0000 | (w & 0xff) << 24;\n  return res >>> 0;\n}\n\nutils.htonl = htonl;\n\nfunction toHex32(msg, endian) {\n  var res = '';\n\n  for (var i = 0; i < msg.length; i++) {\n    var w = msg[i];\n    if (endian === 'little') w = htonl(w);\n    res += zero8(w.toString(16));\n  }\n\n  return res;\n}\n\nutils.toHex32 = toHex32;\n\nfunction zero2(word) {\n  if (word.length === 1) return '0' + word;else return word;\n}\n\nutils.zero2 = zero2;\n\nfunction zero8(word) {\n  if (word.length === 7) return '0' + word;else if (word.length === 6) return '00' + word;else if (word.length === 5) return '000' + word;else if (word.length === 4) return '0000' + word;else if (word.length === 3) return '00000' + word;else if (word.length === 2) return '000000' + word;else if (word.length === 1) return '0000000' + word;else return word;\n}\n\nutils.zero8 = zero8;\n\nfunction join32(msg, start, end, endian) {\n  var len = end - start;\n  assert(len % 4 === 0);\n  var res = new Array(len / 4);\n\n  for (var i = 0, k = start; i < res.length; i++, k += 4) {\n    var w;\n    if (endian === 'big') w = msg[k] << 24 | msg[k + 1] << 16 | msg[k + 2] << 8 | msg[k + 3];else w = msg[k + 3] << 24 | msg[k + 2] << 16 | msg[k + 1] << 8 | msg[k];\n    res[i] = w >>> 0;\n  }\n\n  return res;\n}\n\nutils.join32 = join32;\n\nfunction split32(msg, endian) {\n  var res = new Array(msg.length * 4);\n\n  for (var i = 0, k = 0; i < msg.length; i++, k += 4) {\n    var m = msg[i];\n\n    if (endian === 'big') {\n      res[k] = m >>> 24;\n      res[k + 1] = m >>> 16 & 0xff;\n      res[k + 2] = m >>> 8 & 0xff;\n      res[k + 3] = m & 0xff;\n    } else {\n      res[k + 3] = m >>> 24;\n      res[k + 2] = m >>> 16 & 0xff;\n      res[k + 1] = m >>> 8 & 0xff;\n      res[k] = m & 0xff;\n    }\n  }\n\n  return res;\n}\n\nutils.split32 = split32;\n\nfunction rotr32(w, b) {\n  return w >>> b | w << 32 - b;\n}\n\nutils.rotr32 = rotr32;\n\nfunction rotl32(w, b) {\n  return w << b | w >>> 32 - b;\n}\n\nutils.rotl32 = rotl32;\n\nfunction sum32(a, b) {\n  return a + b >>> 0;\n}\n\nutils.sum32 = sum32;\n\nfunction sum32_3(a, b, c) {\n  return a + b + c >>> 0;\n}\n\nutils.sum32_3 = sum32_3;\n\nfunction sum32_4(a, b, c, d) {\n  return a + b + c + d >>> 0;\n}\n\nutils.sum32_4 = sum32_4;\n\nfunction sum32_5(a, b, c, d, e) {\n  return a + b + c + d + e >>> 0;\n}\n\nutils.sum32_5 = sum32_5;\n\nfunction assert(cond, msg) {\n  if (!cond) throw new Error(msg || 'Assertion failed');\n}\n\nutils.assert = assert;\nutils.inherits = inherits;\n\nfunction sum64(buf, pos, ah, al) {\n  var bh = buf[pos];\n  var bl = buf[pos + 1];\n  var lo = al + bl >>> 0;\n  var hi = (lo < al ? 1 : 0) + ah + bh;\n  buf[pos] = hi >>> 0;\n  buf[pos + 1] = lo;\n}\n\nexports.sum64 = sum64;\n\nfunction sum64_hi(ah, al, bh, bl) {\n  var lo = al + bl >>> 0;\n  var hi = (lo < al ? 1 : 0) + ah + bh;\n  return hi >>> 0;\n}\n\n;\nexports.sum64_hi = sum64_hi;\n\nfunction sum64_lo(ah, al, bh, bl) {\n  var lo = al + bl;\n  return lo >>> 0;\n}\n\n;\nexports.sum64_lo = sum64_lo;\n\nfunction sum64_4_hi(ah, al, bh, bl, ch, cl, dh, dl) {\n  var carry = 0;\n  var lo = al;\n  lo = lo + bl >>> 0;\n  carry += lo < al ? 1 : 0;\n  lo = lo + cl >>> 0;\n  carry += lo < cl ? 1 : 0;\n  lo = lo + dl >>> 0;\n  carry += lo < dl ? 1 : 0;\n  var hi = ah + bh + ch + dh + carry;\n  return hi >>> 0;\n}\n\n;\nexports.sum64_4_hi = sum64_4_hi;\n\nfunction sum64_4_lo(ah, al, bh, bl, ch, cl, dh, dl) {\n  var lo = al + bl + cl + dl;\n  return lo >>> 0;\n}\n\n;\nexports.sum64_4_lo = sum64_4_lo;\n\nfunction sum64_5_hi(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {\n  var carry = 0;\n  var lo = al;\n  lo = lo + bl >>> 0;\n  carry += lo < al ? 1 : 0;\n  lo = lo + cl >>> 0;\n  carry += lo < cl ? 1 : 0;\n  lo = lo + dl >>> 0;\n  carry += lo < dl ? 1 : 0;\n  lo = lo + el >>> 0;\n  carry += lo < el ? 1 : 0;\n  var hi = ah + bh + ch + dh + eh + carry;\n  return hi >>> 0;\n}\n\n;\nexports.sum64_5_hi = sum64_5_hi;\n\nfunction sum64_5_lo(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {\n  var lo = al + bl + cl + dl + el;\n  return lo >>> 0;\n}\n\n;\nexports.sum64_5_lo = sum64_5_lo;\n\nfunction rotr64_hi(ah, al, num) {\n  var r = al << 32 - num | ah >>> num;\n  return r >>> 0;\n}\n\n;\nexports.rotr64_hi = rotr64_hi;\n\nfunction rotr64_lo(ah, al, num) {\n  var r = ah << 32 - num | al >>> num;\n  return r >>> 0;\n}\n\n;\nexports.rotr64_lo = rotr64_lo;\n\nfunction shr64_hi(ah, al, num) {\n  return ah >>> num;\n}\n\n;\nexports.shr64_hi = shr64_hi;\n\nfunction shr64_lo(ah, al, num) {\n  var r = ah << 32 - num | al >>> num;\n  return r >>> 0;\n}\n\n;\nexports.shr64_lo = shr64_lo;","map":{"version":3,"sources":["/home/user/Desktop/paper/node_modules/bitcore-lib-litecoin/node_modules/elliptic/node_modules/hash.js/lib/hash/utils.js"],"names":["utils","exports","inherits","require","toArray","msg","enc","Array","isArray","slice","res","i","length","c","charCodeAt","hi","lo","push","replace","parseInt","toHex","zero2","toString","htonl","w","toHex32","endian","zero8","word","join32","start","end","len","assert","k","split32","m","rotr32","b","rotl32","sum32","a","sum32_3","sum32_4","d","sum32_5","e","cond","Error","sum64","buf","pos","ah","al","bh","bl","sum64_hi","sum64_lo","sum64_4_hi","ch","cl","dh","dl","carry","sum64_4_lo","sum64_5_hi","eh","el","sum64_5_lo","rotr64_hi","num","r","rotr64_lo","shr64_hi","shr64_lo"],"mappings":"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","sourcesContent":["var utils = exports;\nvar inherits = require('inherits');\n\nfunction toArray(msg, enc) {\n  if (Array.isArray(msg))\n    return msg.slice();\n  if (!msg)\n    return [];\n  var res = [];\n  if (typeof msg === 'string') {\n    if (!enc) {\n      for (var i = 0; i < msg.length; i++) {\n        var c = msg.charCodeAt(i);\n        var hi = c >> 8;\n        var lo = c & 0xff;\n        if (hi)\n          res.push(hi, lo);\n        else\n          res.push(lo);\n      }\n    } else if (enc === 'hex') {\n      msg = msg.replace(/[^a-z0-9]+/ig, '');\n      if (msg.length % 2 !== 0)\n        msg = '0' + msg;\n      for (var i = 0; i < msg.length; i += 2)\n        res.push(parseInt(msg[i] + msg[i + 1], 16));\n    }\n  } else {\n    for (var i = 0; i < msg.length; i++)\n      res[i] = msg[i] | 0;\n  }\n  return res;\n}\nutils.toArray = toArray;\n\nfunction toHex(msg) {\n  var res = '';\n  for (var i = 0; i < msg.length; i++)\n    res += zero2(msg[i].toString(16));\n  return res;\n}\nutils.toHex = toHex;\n\nfunction htonl(w) {\n  var res = (w >>> 24) |\n            ((w >>> 8) & 0xff00) |\n            ((w << 8) & 0xff0000) |\n            ((w & 0xff) << 24);\n  return res >>> 0;\n}\nutils.htonl = htonl;\n\nfunction toHex32(msg, endian) {\n  var res = '';\n  for (var i = 0; i < msg.length; i++) {\n    var w = msg[i];\n    if (endian === 'little')\n      w = htonl(w);\n    res += zero8(w.toString(16));\n  }\n  return res;\n}\nutils.toHex32 = toHex32;\n\nfunction zero2(word) {\n  if (word.length === 1)\n    return '0' + word;\n  else\n    return word;\n}\nutils.zero2 = zero2;\n\nfunction zero8(word) {\n  if (word.length === 7)\n    return '0' + word;\n  else if (word.length === 6)\n    return '00' + word;\n  else if (word.length === 5)\n    return '000' + word;\n  else if (word.length === 4)\n    return '0000' + word;\n  else if (word.length === 3)\n    return '00000' + word;\n  else if (word.length === 2)\n    return '000000' + word;\n  else if (word.length === 1)\n    return '0000000' + word;\n  else\n    return word;\n}\nutils.zero8 = zero8;\n\nfunction join32(msg, start, end, endian) {\n  var len = end - start;\n  assert(len % 4 === 0);\n  var res = new Array(len / 4);\n  for (var i = 0, k = start; i < res.length; i++, k += 4) {\n    var w;\n    if (endian === 'big')\n      w = (msg[k] << 24) | (msg[k + 1] << 16) | (msg[k + 2] << 8) | msg[k + 3];\n    else\n      w = (msg[k + 3] << 24) | (msg[k + 2] << 16) | (msg[k + 1] << 8) | msg[k];\n    res[i] = w >>> 0;\n  }\n  return res;\n}\nutils.join32 = join32;\n\nfunction split32(msg, endian) {\n  var res = new Array(msg.length * 4);\n  for (var i = 0, k = 0; i < msg.length; i++, k += 4) {\n    var m = msg[i];\n    if (endian === 'big') {\n      res[k] = m >>> 24;\n      res[k + 1] = (m >>> 16) & 0xff;\n      res[k + 2] = (m >>> 8) & 0xff;\n      res[k + 3] = m & 0xff;\n    } else {\n      res[k + 3] = m >>> 24;\n      res[k + 2] = (m >>> 16) & 0xff;\n      res[k + 1] = (m >>> 8) & 0xff;\n      res[k] = m & 0xff;\n    }\n  }\n  return res;\n}\nutils.split32 = split32;\n\nfunction rotr32(w, b) {\n  return (w >>> b) | (w << (32 - b));\n}\nutils.rotr32 = rotr32;\n\nfunction rotl32(w, b) {\n  return (w << b) | (w >>> (32 - b));\n}\nutils.rotl32 = rotl32;\n\nfunction sum32(a, b) {\n  return (a + b) >>> 0;\n}\nutils.sum32 = sum32;\n\nfunction sum32_3(a, b, c) {\n  return (a + b + c) >>> 0;\n}\nutils.sum32_3 = sum32_3;\n\nfunction sum32_4(a, b, c, d) {\n  return (a + b + c + d) >>> 0;\n}\nutils.sum32_4 = sum32_4;\n\nfunction sum32_5(a, b, c, d, e) {\n  return (a + b + c + d + e) >>> 0;\n}\nutils.sum32_5 = sum32_5;\n\nfunction assert(cond, msg) {\n  if (!cond)\n    throw new Error(msg || 'Assertion failed');\n}\nutils.assert = assert;\n\nutils.inherits = inherits;\n\nfunction sum64(buf, pos, ah, al) {\n  var bh = buf[pos];\n  var bl = buf[pos + 1];\n\n  var lo = (al + bl) >>> 0;\n  var hi = (lo < al ? 1 : 0) + ah + bh;\n  buf[pos] = hi >>> 0;\n  buf[pos + 1] = lo;\n}\nexports.sum64 = sum64;\n\nfunction sum64_hi(ah, al, bh, bl) {\n  var lo = (al + bl) >>> 0;\n  var hi = (lo < al ? 1 : 0) + ah + bh;\n  return hi >>> 0;\n};\nexports.sum64_hi = sum64_hi;\n\nfunction sum64_lo(ah, al, bh, bl) {\n  var lo = al + bl;\n  return lo >>> 0;\n};\nexports.sum64_lo = sum64_lo;\n\nfunction sum64_4_hi(ah, al, bh, bl, ch, cl, dh, dl) {\n  var carry = 0;\n  var lo = al;\n  lo = (lo + bl) >>> 0;\n  carry += lo < al ? 1 : 0;\n  lo = (lo + cl) >>> 0;\n  carry += lo < cl ? 1 : 0;\n  lo = (lo + dl) >>> 0;\n  carry += lo < dl ? 1 : 0;\n\n  var hi = ah + bh + ch + dh + carry;\n  return hi >>> 0;\n};\nexports.sum64_4_hi = sum64_4_hi;\n\nfunction sum64_4_lo(ah, al, bh, bl, ch, cl, dh, dl) {\n  var lo = al + bl + cl + dl;\n  return lo >>> 0;\n};\nexports.sum64_4_lo = sum64_4_lo;\n\nfunction sum64_5_hi(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {\n  var carry = 0;\n  var lo = al;\n  lo = (lo + bl) >>> 0;\n  carry += lo < al ? 1 : 0;\n  lo = (lo + cl) >>> 0;\n  carry += lo < cl ? 1 : 0;\n  lo = (lo + dl) >>> 0;\n  carry += lo < dl ? 1 : 0;\n  lo = (lo + el) >>> 0;\n  carry += lo < el ? 1 : 0;\n\n  var hi = ah + bh + ch + dh + eh + carry;\n  return hi >>> 0;\n};\nexports.sum64_5_hi = sum64_5_hi;\n\nfunction sum64_5_lo(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {\n  var lo = al + bl + cl + dl + el;\n\n  return lo >>> 0;\n};\nexports.sum64_5_lo = sum64_5_lo;\n\nfunction rotr64_hi(ah, al, num) {\n  var r = (al << (32 - num)) | (ah >>> num);\n  return r >>> 0;\n};\nexports.rotr64_hi = rotr64_hi;\n\nfunction rotr64_lo(ah, al, num) {\n  var r = (ah << (32 - num)) | (al >>> num);\n  return r >>> 0;\n};\nexports.rotr64_lo = rotr64_lo;\n\nfunction shr64_hi(ah, al, num) {\n  return ah >>> num;\n};\nexports.shr64_hi = shr64_hi;\n\nfunction shr64_lo(ah, al, num) {\n  var r = (ah << (32 - num)) | (al >>> num);\n  return r >>> 0;\n};\nexports.shr64_lo = shr64_lo;\n"]},"metadata":{},"sourceType":"script"}