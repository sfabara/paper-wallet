{"ast":null,"code":"var hmac = exports;\n\nvar hash = require('../hash');\n\nvar utils = hash.utils;\nvar assert = utils.assert;\n\nfunction Hmac(hash, key, enc) {\n  if (!(this instanceof Hmac)) return new Hmac(hash, key, enc);\n  this.Hash = hash;\n  this.blockSize = hash.blockSize / 8;\n  this.outSize = hash.outSize / 8;\n  this.inner = null;\n  this.outer = null;\n\n  this._init(utils.toArray(key, enc));\n}\n\nmodule.exports = Hmac;\n\nHmac.prototype._init = function init(key) {\n  // Shorten key, if needed\n  if (key.length > this.blockSize) key = new this.Hash().update(key).digest();\n  assert(key.length <= this.blockSize); // Add padding to key\n\n  for (var i = key.length; i < this.blockSize; i++) {\n    key.push(0);\n  }\n\n  for (var i = 0; i < key.length; i++) {\n    key[i] ^= 0x36;\n  }\n\n  this.inner = new this.Hash().update(key); // 0x36 ^ 0x5c = 0x6a\n\n  for (var i = 0; i < key.length; i++) {\n    key[i] ^= 0x6a;\n  }\n\n  this.outer = new this.Hash().update(key);\n};\n\nHmac.prototype.update = function update(msg, enc) {\n  this.inner.update(msg, enc);\n  return this;\n};\n\nHmac.prototype.digest = function digest(enc) {\n  this.outer.update(this.inner.digest());\n  return this.outer.digest(enc);\n};","map":{"version":3,"sources":["/home/user/Desktop/react-wallet/node_modules/bitcore-lib-litecoin/node_modules/elliptic/node_modules/hash.js/lib/hash/hmac.js"],"names":["hmac","exports","hash","require","utils","assert","Hmac","key","enc","Hash","blockSize","outSize","inner","outer","_init","toArray","module","prototype","init","length","update","digest","i","push","msg"],"mappings":"AAAA,IAAIA,IAAI,GAAGC,OAAX;;AAEA,IAAIC,IAAI,GAAGC,OAAO,CAAC,SAAD,CAAlB;;AACA,IAAIC,KAAK,GAAGF,IAAI,CAACE,KAAjB;AACA,IAAIC,MAAM,GAAGD,KAAK,CAACC,MAAnB;;AAEA,SAASC,IAAT,CAAcJ,IAAd,EAAoBK,GAApB,EAAyBC,GAAzB,EAA8B;AAC5B,MAAI,EAAE,gBAAgBF,IAAlB,CAAJ,EACE,OAAO,IAAIA,IAAJ,CAASJ,IAAT,EAAeK,GAAf,EAAoBC,GAApB,CAAP;AACF,OAAKC,IAAL,GAAYP,IAAZ;AACA,OAAKQ,SAAL,GAAiBR,IAAI,CAACQ,SAAL,GAAiB,CAAlC;AACA,OAAKC,OAAL,GAAeT,IAAI,CAACS,OAAL,GAAe,CAA9B;AACA,OAAKC,KAAL,GAAa,IAAb;AACA,OAAKC,KAAL,GAAa,IAAb;;AAEA,OAAKC,KAAL,CAAWV,KAAK,CAACW,OAAN,CAAcR,GAAd,EAAmBC,GAAnB,CAAX;AACD;;AACDQ,MAAM,CAACf,OAAP,GAAiBK,IAAjB;;AAEAA,IAAI,CAACW,SAAL,CAAeH,KAAf,GAAuB,SAASI,IAAT,CAAcX,GAAd,EAAmB;AACxC;AACA,MAAIA,GAAG,CAACY,MAAJ,GAAa,KAAKT,SAAtB,EACEH,GAAG,GAAG,IAAI,KAAKE,IAAT,GAAgBW,MAAhB,CAAuBb,GAAvB,EAA4Bc,MAA5B,EAAN;AACFhB,EAAAA,MAAM,CAACE,GAAG,CAACY,MAAJ,IAAc,KAAKT,SAApB,CAAN,CAJwC,CAMxC;;AACA,OAAK,IAAIY,CAAC,GAAGf,GAAG,CAACY,MAAjB,EAAyBG,CAAC,GAAG,KAAKZ,SAAlC,EAA6CY,CAAC,EAA9C;AACEf,IAAAA,GAAG,CAACgB,IAAJ,CAAS,CAAT;AADF;;AAGA,OAAK,IAAID,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGf,GAAG,CAACY,MAAxB,EAAgCG,CAAC,EAAjC;AACEf,IAAAA,GAAG,CAACe,CAAD,CAAH,IAAU,IAAV;AADF;;AAEA,OAAKV,KAAL,GAAa,IAAI,KAAKH,IAAT,GAAgBW,MAAhB,CAAuBb,GAAvB,CAAb,CAZwC,CAcxC;;AACA,OAAK,IAAIe,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGf,GAAG,CAACY,MAAxB,EAAgCG,CAAC,EAAjC;AACEf,IAAAA,GAAG,CAACe,CAAD,CAAH,IAAU,IAAV;AADF;;AAEA,OAAKT,KAAL,GAAa,IAAI,KAAKJ,IAAT,GAAgBW,MAAhB,CAAuBb,GAAvB,CAAb;AACD,CAlBD;;AAoBAD,IAAI,CAACW,SAAL,CAAeG,MAAf,GAAwB,SAASA,MAAT,CAAgBI,GAAhB,EAAqBhB,GAArB,EAA0B;AAChD,OAAKI,KAAL,CAAWQ,MAAX,CAAkBI,GAAlB,EAAuBhB,GAAvB;AACA,SAAO,IAAP;AACD,CAHD;;AAKAF,IAAI,CAACW,SAAL,CAAeI,MAAf,GAAwB,SAASA,MAAT,CAAgBb,GAAhB,EAAqB;AAC3C,OAAKK,KAAL,CAAWO,MAAX,CAAkB,KAAKR,KAAL,CAAWS,MAAX,EAAlB;AACA,SAAO,KAAKR,KAAL,CAAWQ,MAAX,CAAkBb,GAAlB,CAAP;AACD,CAHD","sourcesContent":["var hmac = exports;\n\nvar hash = require('../hash');\nvar utils = hash.utils;\nvar assert = utils.assert;\n\nfunction Hmac(hash, key, enc) {\n  if (!(this instanceof Hmac))\n    return new Hmac(hash, key, enc);\n  this.Hash = hash;\n  this.blockSize = hash.blockSize / 8;\n  this.outSize = hash.outSize / 8;\n  this.inner = null;\n  this.outer = null;\n\n  this._init(utils.toArray(key, enc));\n}\nmodule.exports = Hmac;\n\nHmac.prototype._init = function init(key) {\n  // Shorten key, if needed\n  if (key.length > this.blockSize)\n    key = new this.Hash().update(key).digest();\n  assert(key.length <= this.blockSize);\n\n  // Add padding to key\n  for (var i = key.length; i < this.blockSize; i++)\n    key.push(0);\n\n  for (var i = 0; i < key.length; i++)\n    key[i] ^= 0x36;\n  this.inner = new this.Hash().update(key);\n\n  // 0x36 ^ 0x5c = 0x6a\n  for (var i = 0; i < key.length; i++)\n    key[i] ^= 0x6a;\n  this.outer = new this.Hash().update(key);\n};\n\nHmac.prototype.update = function update(msg, enc) {\n  this.inner.update(msg, enc);\n  return this;\n};\n\nHmac.prototype.digest = function digest(enc) {\n  this.outer.update(this.inner.digest());\n  return this.outer.digest(enc);\n};\n"]},"metadata":{},"sourceType":"script"}