{"ast":null,"code":"'use strict';\n\nvar _ = require('lodash');\n\nvar $ = require('../util/preconditions');\n\nvar buffer = require('buffer');\n\nvar compare = Buffer.compare || require('buffer-compare');\n\nvar errors = require('../errors');\n\nvar BufferUtil = require('../util/buffer');\n\nvar JSUtil = require('../util/js');\n\nvar BufferReader = require('../encoding/bufferreader');\n\nvar BufferWriter = require('../encoding/bufferwriter');\n\nvar Hash = require('../crypto/hash');\n\nvar Signature = require('../crypto/signature');\n\nvar Sighash = require('./sighash');\n\nvar Address = require('../address');\n\nvar UnspentOutput = require('./unspentoutput');\n\nvar Input = require('./input');\n\nvar PublicKeyHashInput = Input.PublicKeyHash;\nvar PublicKeyInput = Input.PublicKey;\nvar MultiSigScriptHashInput = Input.MultiSigScriptHash;\nvar MultiSigInput = Input.MultiSig;\n\nvar Output = require('./output');\n\nvar Script = require('../script');\n\nvar PrivateKey = require('../privatekey');\n\nvar BN = require('../crypto/bn');\n/**\n * Represents a transaction, a set of inputs and outputs to change ownership of tokens\n *\n * @param {*} serialized\n * @constructor\n */\n\n\nfunction Transaction(serialized) {\n  if (!(this instanceof Transaction)) {\n    return new Transaction(serialized);\n  }\n\n  this.inputs = [];\n  this.outputs = [];\n  this._inputAmount = undefined;\n  this._outputAmount = undefined;\n\n  if (serialized) {\n    if (serialized instanceof Transaction) {\n      return Transaction.shallowCopy(serialized);\n    } else if (JSUtil.isHexa(serialized)) {\n      this.fromString(serialized);\n    } else if (BufferUtil.isBuffer(serialized)) {\n      this.fromBuffer(serialized);\n    } else if (_.isObject(serialized)) {\n      this.fromObject(serialized);\n    } else {\n      throw new errors.InvalidArgument('Must provide an object or string to deserialize a transaction');\n    }\n  } else {\n    this._newTransaction();\n  }\n}\n\nvar CURRENT_VERSION = 1;\nvar DEFAULT_NLOCKTIME = 0;\nvar MAX_BLOCK_SIZE = 1000000; // Minimum amount for an output for it not to be considered a dust output\n\nTransaction.DUST_AMOUNT = 546; // Margin of error to allow fees in the vecinity of the expected value but doesn't allow a big difference\n\nTransaction.FEE_SECURITY_MARGIN = 15; // max amount of satoshis in circulation\n\nTransaction.MAX_MONEY = 21000000 * 1e8; // nlocktime limit to be considered block height rather than a timestamp\n\nTransaction.NLOCKTIME_BLOCKHEIGHT_LIMIT = 5e8; // Max value for an unsigned 32 bit value\n\nTransaction.NLOCKTIME_MAX_VALUE = 4294967295; // Value used for fee estimation (satoshis per kilobyte)\n\nTransaction.FEE_PER_KB = 10000; // Safe upper bound for change address script size in bytes\n\nTransaction.CHANGE_OUTPUT_MAX_SIZE = 20 + 4 + 34 + 4;\nTransaction.MAXIMUM_EXTRA_SIZE = 4 + 9 + 9 + 4;\n/* Constructors and Serialization */\n\n/**\n * Create a 'shallow' copy of the transaction, by serializing and deserializing\n * it dropping any additional information that inputs and outputs may have hold\n *\n * @param {Transaction} transaction\n * @return {Transaction}\n */\n\nTransaction.shallowCopy = function (transaction) {\n  var copy = new Transaction(transaction.toBuffer());\n  return copy;\n};\n\nvar hashProperty = {\n  configurable: false,\n  enumerable: true,\n  get: function () {\n    return new BufferReader(this._getHash()).readReverse().toString('hex');\n  }\n};\nObject.defineProperty(Transaction.prototype, 'hash', hashProperty);\nObject.defineProperty(Transaction.prototype, 'id', hashProperty);\nvar ioProperty = {\n  configurable: false,\n  enumerable: true,\n  get: function () {\n    return this._getInputAmount();\n  }\n};\nObject.defineProperty(Transaction.prototype, 'inputAmount', ioProperty);\n\nioProperty.get = function () {\n  return this._getOutputAmount();\n};\n\nObject.defineProperty(Transaction.prototype, 'outputAmount', ioProperty);\n/**\n * Retrieve the little endian hash of the transaction (used for serialization)\n * @return {Buffer}\n */\n\nTransaction.prototype._getHash = function () {\n  return Hash.sha256sha256(this.toBuffer());\n};\n/**\n * Retrieve a hexa string that can be used with bitcoind's CLI interface\n * (decoderawtransaction, sendrawtransaction)\n *\n * @param {Object|boolean=} unsafe if true, skip all tests. if it's an object,\n *   it's expected to contain a set of flags to skip certain tests:\n * * `disableAll`: disable all checks\n * * `disableSmallFees`: disable checking for fees that are too small\n * * `disableLargeFees`: disable checking for fees that are too large\n * * `disableIsFullySigned`: disable checking if all inputs are fully signed\n * * `disableDustOutputs`: disable checking if there are no outputs that are dust amounts\n * * `disableMoreOutputThanInput`: disable checking if the transaction spends more bitcoins than the sum of the input amounts\n * @return {string}\n */\n\n\nTransaction.prototype.serialize = function (unsafe) {\n  if (true === unsafe || unsafe && unsafe.disableAll) {\n    return this.uncheckedSerialize();\n  } else {\n    return this.checkedSerialize(unsafe);\n  }\n};\n\nTransaction.prototype.uncheckedSerialize = Transaction.prototype.toString = function () {\n  return this.toBuffer().toString('hex');\n};\n/**\n * Retrieve a hexa string that can be used with bitcoind's CLI interface\n * (decoderawtransaction, sendrawtransaction)\n *\n * @param {Object} opts allows to skip certain tests. {@see Transaction#serialize}\n * @return {string}\n */\n\n\nTransaction.prototype.checkedSerialize = function (opts) {\n  var serializationError = this.getSerializationError(opts);\n\n  if (serializationError) {\n    serializationError.message += ' Use Transaction#uncheckedSerialize if you want to skip security checks. ' + 'See http://bitcore.io/guide/transaction.html#Serialization for more info.';\n    throw serializationError;\n  }\n\n  return this.uncheckedSerialize();\n};\n\nTransaction.prototype.invalidSatoshis = function () {\n  var invalid = false;\n\n  for (var i = 0; i < this.outputs.length; i++) {\n    if (this.outputs[i].invalidSatoshis()) {\n      invalid = true;\n    }\n  }\n\n  return invalid;\n};\n/**\n * Retrieve a possible error that could appear when trying to serialize and\n * broadcast this transaction.\n *\n * @param {Object} opts allows to skip certain tests. {@see Transaction#serialize}\n * @return {bitcore.Error}\n */\n\n\nTransaction.prototype.getSerializationError = function (opts) {\n  opts = opts || {};\n\n  if (this.invalidSatoshis()) {\n    return new errors.Transaction.InvalidSatoshis();\n  }\n\n  var unspent = this._getUnspentValue();\n\n  var unspentError;\n\n  if (unspent < 0) {\n    if (!opts.disableMoreOutputThanInput) {\n      unspentError = new errors.Transaction.InvalidOutputAmountSum();\n    }\n  } else {\n    unspentError = this._hasFeeError(opts, unspent);\n  }\n\n  return unspentError || this._hasDustOutputs(opts) || this._isMissingSignatures(opts);\n};\n\nTransaction.prototype._hasFeeError = function (opts, unspent) {\n  if (!_.isUndefined(this._fee) && this._fee !== unspent) {\n    return new errors.Transaction.FeeError.Different('Unspent value is ' + unspent + ' but specified fee is ' + this._fee);\n  }\n\n  if (!opts.disableLargeFees) {\n    var maximumFee = Math.floor(Transaction.FEE_SECURITY_MARGIN * this._estimateFee());\n\n    if (unspent > maximumFee) {\n      if (this._missingChange()) {\n        return new errors.Transaction.ChangeAddressMissing('Fee is too large and no change address was provided');\n      }\n\n      return new errors.Transaction.FeeError.TooLarge('expected less than ' + maximumFee + ' but got ' + unspent);\n    }\n  }\n\n  if (!opts.disableSmallFees) {\n    var minimumFee = Math.ceil(this._estimateFee() / Transaction.FEE_SECURITY_MARGIN);\n\n    if (unspent < minimumFee) {\n      return new errors.Transaction.FeeError.TooSmall('expected more than ' + minimumFee + ' but got ' + unspent);\n    }\n  }\n};\n\nTransaction.prototype._missingChange = function () {\n  return !this._changeScript;\n};\n\nTransaction.prototype._hasDustOutputs = function (opts) {\n  if (opts.disableDustOutputs) {\n    return;\n  }\n\n  var index, output;\n\n  for (index in this.outputs) {\n    output = this.outputs[index];\n\n    if (output.satoshis < Transaction.DUST_AMOUNT && !output.script.isDataOut()) {\n      return new errors.Transaction.DustOutputs();\n    }\n  }\n};\n\nTransaction.prototype._isMissingSignatures = function (opts) {\n  if (opts.disableIsFullySigned) {\n    return;\n  }\n\n  if (!this.isFullySigned()) {\n    return new errors.Transaction.MissingSignatures();\n  }\n};\n\nTransaction.prototype.inspect = function () {\n  return '<Transaction: ' + this.uncheckedSerialize() + '>';\n};\n\nTransaction.prototype.toBuffer = function () {\n  var writer = new BufferWriter();\n  return this.toBufferWriter(writer).toBuffer();\n};\n\nTransaction.prototype.toBufferWriter = function (writer) {\n  writer.writeUInt32LE(this.version);\n  writer.writeVarintNum(this.inputs.length);\n\n  _.each(this.inputs, function (input) {\n    input.toBufferWriter(writer);\n  });\n\n  writer.writeVarintNum(this.outputs.length);\n\n  _.each(this.outputs, function (output) {\n    output.toBufferWriter(writer);\n  });\n\n  writer.writeUInt32LE(this.nLockTime);\n  return writer;\n};\n\nTransaction.prototype.fromBuffer = function (buffer) {\n  var reader = new BufferReader(buffer);\n  return this.fromBufferReader(reader);\n};\n\nTransaction.prototype.fromBufferReader = function (reader) {\n  $.checkArgument(!reader.finished(), 'No transaction data received');\n  var i, sizeTxIns, sizeTxOuts;\n  this.version = reader.readUInt32LE();\n  sizeTxIns = reader.readVarintNum();\n\n  for (i = 0; i < sizeTxIns; i++) {\n    var input = Input.fromBufferReader(reader);\n    this.inputs.push(input);\n  }\n\n  sizeTxOuts = reader.readVarintNum();\n\n  for (i = 0; i < sizeTxOuts; i++) {\n    this.outputs.push(Output.fromBufferReader(reader));\n  }\n\n  this.nLockTime = reader.readUInt32LE();\n  return this;\n};\n\nTransaction.prototype.toObject = Transaction.prototype.toJSON = function toObject() {\n  var inputs = [];\n  this.inputs.forEach(function (input) {\n    inputs.push(input.toObject());\n  });\n  var outputs = [];\n  this.outputs.forEach(function (output) {\n    outputs.push(output.toObject());\n  });\n  var obj = {\n    hash: this.hash,\n    version: this.version,\n    inputs: inputs,\n    outputs: outputs,\n    nLockTime: this.nLockTime\n  };\n\n  if (this._changeScript) {\n    obj.changeScript = this._changeScript.toString();\n  }\n\n  if (!_.isUndefined(this._changeIndex)) {\n    obj.changeIndex = this._changeIndex;\n  }\n\n  if (!_.isUndefined(this._fee)) {\n    obj.fee = this._fee;\n  }\n\n  return obj;\n};\n\nTransaction.prototype.fromObject = function fromObject(arg) {\n  /* jshint maxstatements: 20 */\n  $.checkArgument(_.isObject(arg) || arg instanceof Transaction);\n  var self = this;\n  var transaction;\n\n  if (arg instanceof Transaction) {\n    transaction = transaction.toObject();\n  } else {\n    transaction = arg;\n  }\n\n  _.each(transaction.inputs, function (input) {\n    if (!input.output || !input.output.script) {\n      self.uncheckedAddInput(new Input(input));\n      return;\n    }\n\n    var script = new Script(input.output.script);\n    var txin;\n\n    if (script.isPublicKeyHashOut()) {\n      txin = new Input.PublicKeyHash(input);\n    } else if (script.isScriptHashOut() && input.publicKeys && input.threshold) {\n      txin = new Input.MultiSigScriptHash(input, input.publicKeys, input.threshold, input.signatures);\n    } else if (script.isPublicKeyOut()) {\n      txin = new Input.PublicKey(input);\n    } else {\n      throw new errors.Transaction.Input.UnsupportedScript(input.output.script);\n    }\n\n    self.addInput(txin);\n  });\n\n  _.each(transaction.outputs, function (output) {\n    self.addOutput(new Output(output));\n  });\n\n  if (transaction.changeIndex) {\n    this._changeIndex = transaction.changeIndex;\n  }\n\n  if (transaction.changeScript) {\n    this._changeScript = new Script(transaction.changeScript);\n  }\n\n  if (transaction.fee) {\n    this._fee = transaction.fee;\n  }\n\n  this.nLockTime = transaction.nLockTime;\n  this.version = transaction.version;\n\n  this._checkConsistency(arg);\n\n  return this;\n};\n\nTransaction.prototype._checkConsistency = function (arg) {\n  if (!_.isUndefined(this._changeIndex)) {\n    $.checkState(this._changeScript);\n    $.checkState(this.outputs[this._changeIndex]);\n    $.checkState(this.outputs[this._changeIndex].script.toString() === this._changeScript.toString());\n  }\n\n  if (arg && arg.hash) {\n    $.checkState(arg.hash === this.hash, 'Hash in object does not match transaction hash');\n  }\n};\n/**\n * Sets nLockTime so that transaction is not valid until the desired date(a\n * timestamp in seconds since UNIX epoch is also accepted)\n *\n * @param {Date | Number} time\n * @return {Transaction} this\n */\n\n\nTransaction.prototype.lockUntilDate = function (time) {\n  $.checkArgument(time);\n\n  if (_.isNumber(time) && time < Transaction.NLOCKTIME_BLOCKHEIGHT_LIMIT) {\n    throw new errors.Transaction.LockTimeTooEarly();\n  }\n\n  if (_.isDate(time)) {\n    time = time.getTime() / 1000;\n  }\n\n  for (var i = 0; i < this.inputs.length; i++) {\n    if (this.inputs[i].sequenceNumber === Input.DEFAULT_SEQNUMBER) {\n      this.inputs[i].sequenceNumber = Input.DEFAULT_LOCKTIME_SEQNUMBER;\n    }\n  }\n\n  this.nLockTime = time;\n  return this;\n};\n/**\n * Sets nLockTime so that transaction is not valid until the desired block\n * height.\n *\n * @param {Number} height\n * @return {Transaction} this\n */\n\n\nTransaction.prototype.lockUntilBlockHeight = function (height) {\n  $.checkArgument(_.isNumber(height));\n\n  if (height >= Transaction.NLOCKTIME_BLOCKHEIGHT_LIMIT) {\n    throw new errors.Transaction.BlockHeightTooHigh();\n  }\n\n  if (height < 0) {\n    throw new errors.Transaction.NLockTimeOutOfRange();\n  }\n\n  for (var i = 0; i < this.inputs.length; i++) {\n    if (this.inputs[i].sequenceNumber === Input.DEFAULT_SEQNUMBER) {\n      this.inputs[i].sequenceNumber = Input.DEFAULT_LOCKTIME_SEQNUMBER;\n    }\n  }\n\n  this.nLockTime = height;\n  return this;\n};\n/**\n *  Returns a semantic version of the transaction's nLockTime.\n *  @return {Number|Date}\n *  If nLockTime is 0, it returns null,\n *  if it is < 500000000, it returns a block height (number)\n *  else it returns a Date object.\n */\n\n\nTransaction.prototype.getLockTime = function () {\n  if (!this.nLockTime) {\n    return null;\n  }\n\n  if (this.nLockTime < Transaction.NLOCKTIME_BLOCKHEIGHT_LIMIT) {\n    return this.nLockTime;\n  }\n\n  return new Date(1000 * this.nLockTime);\n};\n\nTransaction.prototype.fromString = function (string) {\n  this.fromBuffer(new buffer.Buffer(string, 'hex'));\n};\n\nTransaction.prototype._newTransaction = function () {\n  this.version = CURRENT_VERSION;\n  this.nLockTime = DEFAULT_NLOCKTIME;\n};\n/* Transaction creation interface */\n\n/**\n * @typedef {Object} Transaction~fromObject\n * @property {string} prevTxId\n * @property {number} outputIndex\n * @property {(Buffer|string|Script)} script\n * @property {number} satoshis\n */\n\n/**\n * Add an input to this transaction. This is a high level interface\n * to add an input, for more control, use @{link Transaction#addInput}.\n *\n * Can receive, as output information, the output of bitcoind's `listunspent` command,\n * and a slightly fancier format recognized by bitcore:\n *\n * ```\n * {\n *  address: 'mszYqVnqKoQx4jcTdJXxwKAissE3Jbrrc1',\n *  txId: 'a477af6b2667c29670467e4e0728b685ee07b240235771862318e29ddbe58458',\n *  outputIndex: 0,\n *  script: Script.empty(),\n *  satoshis: 1020000\n * }\n * ```\n * Where `address` can be either a string or a bitcore Address object. The\n * same is true for `script`, which can be a string or a bitcore Script.\n *\n * Beware that this resets all the signatures for inputs (in further versions,\n * SIGHASH_SINGLE or SIGHASH_NONE signatures will not be reset).\n *\n * @example\n * ```javascript\n * var transaction = new Transaction();\n *\n * // From a pay to public key hash output from bitcoind's listunspent\n * transaction.from({'txid': '0000...', vout: 0, amount: 0.1, scriptPubKey: 'OP_DUP ...'});\n *\n * // From a pay to public key hash output\n * transaction.from({'txId': '0000...', outputIndex: 0, satoshis: 1000, script: 'OP_DUP ...'});\n *\n * // From a multisig P2SH output\n * transaction.from({'txId': '0000...', inputIndex: 0, satoshis: 1000, script: '... OP_HASH'},\n *                  ['03000...', '02000...'], 2);\n * ```\n *\n * @param {(Array.<Transaction~fromObject>|Transaction~fromObject)} utxo\n * @param {Array=} pubkeys\n * @param {number=} threshold\n */\n\n\nTransaction.prototype.from = function (utxo, pubkeys, threshold) {\n  if (_.isArray(utxo)) {\n    var self = this;\n\n    _.each(utxo, function (utxo) {\n      self.from(utxo, pubkeys, threshold);\n    });\n\n    return this;\n  }\n\n  var exists = _.any(this.inputs, function (input) {\n    // TODO: Maybe prevTxId should be a string? Or defined as read only property?\n    return input.prevTxId.toString('hex') === utxo.txId && input.outputIndex === utxo.outputIndex;\n  });\n\n  if (exists) {\n    return this;\n  }\n\n  if (pubkeys && threshold) {\n    this._fromMultisigUtxo(utxo, pubkeys, threshold);\n  } else {\n    this._fromNonP2SH(utxo);\n  }\n\n  return this;\n};\n\nTransaction.prototype._fromNonP2SH = function (utxo) {\n  var clazz;\n  utxo = new UnspentOutput(utxo);\n\n  if (utxo.script.isPublicKeyHashOut()) {\n    clazz = PublicKeyHashInput;\n  } else if (utxo.script.isPublicKeyOut()) {\n    clazz = PublicKeyInput;\n  } else {\n    clazz = Input;\n  }\n\n  this.addInput(new clazz({\n    output: new Output({\n      script: utxo.script,\n      satoshis: utxo.satoshis\n    }),\n    prevTxId: utxo.txId,\n    outputIndex: utxo.outputIndex,\n    script: Script.empty()\n  }));\n};\n\nTransaction.prototype._fromMultisigUtxo = function (utxo, pubkeys, threshold) {\n  $.checkArgument(threshold <= pubkeys.length, 'Number of required signatures must be greater than the number of public keys');\n  var clazz;\n  utxo = new UnspentOutput(utxo);\n\n  if (utxo.script.isMultisigOut()) {\n    clazz = MultiSigInput;\n  } else if (utxo.script.isScriptHashOut()) {\n    clazz = MultiSigScriptHashInput;\n  } else {\n    throw new Error(\"@TODO\");\n  }\n\n  this.addInput(new clazz({\n    output: new Output({\n      script: utxo.script,\n      satoshis: utxo.satoshis\n    }),\n    prevTxId: utxo.txId,\n    outputIndex: utxo.outputIndex,\n    script: Script.empty()\n  }, pubkeys, threshold));\n};\n/**\n * Add an input to this transaction. The input must be an instance of the `Input` class.\n * It should have information about the Output that it's spending, but if it's not already\n * set, two additional parameters, `outputScript` and `satoshis` can be provided.\n *\n * @param {Input} input\n * @param {String|Script} outputScript\n * @param {number} satoshis\n * @return Transaction this, for chaining\n */\n\n\nTransaction.prototype.addInput = function (input, outputScript, satoshis) {\n  $.checkArgumentType(input, Input, 'input');\n\n  if (!input.output && (_.isUndefined(outputScript) || _.isUndefined(satoshis))) {\n    throw new errors.Transaction.NeedMoreInfo('Need information about the UTXO script and satoshis');\n  }\n\n  if (!input.output && outputScript && !_.isUndefined(satoshis)) {\n    outputScript = outputScript instanceof Script ? outputScript : new Script(outputScript);\n    $.checkArgumentType(satoshis, 'number', 'satoshis');\n    input.output = new Output({\n      script: outputScript,\n      satoshis: satoshis\n    });\n  }\n\n  return this.uncheckedAddInput(input);\n};\n/**\n * Add an input to this transaction, without checking that the input has information about\n * the output that it's spending.\n *\n * @param {Input} input\n * @return Transaction this, for chaining\n */\n\n\nTransaction.prototype.uncheckedAddInput = function (input) {\n  $.checkArgumentType(input, Input, 'input');\n  this.inputs.push(input);\n  this._inputAmount = undefined;\n\n  this._updateChangeOutput();\n\n  return this;\n};\n/**\n * Returns true if the transaction has enough info on all inputs to be correctly validated\n *\n * @return {boolean}\n */\n\n\nTransaction.prototype.hasAllUtxoInfo = function () {\n  return _.all(this.inputs.map(function (input) {\n    return !!input.output;\n  }));\n};\n/**\n * Manually set the fee for this transaction. Beware that this resets all the signatures\n * for inputs (in further versions, SIGHASH_SINGLE or SIGHASH_NONE signatures will not\n * be reset).\n *\n * @param {number} amount satoshis to be sent\n * @return {Transaction} this, for chaining\n */\n\n\nTransaction.prototype.fee = function (amount) {\n  $.checkArgument(_.isNumber(amount), 'amount must be a number');\n  this._fee = amount;\n\n  this._updateChangeOutput();\n\n  return this;\n};\n/**\n * Manually set the fee per KB for this transaction. Beware that this resets all the signatures\n * for inputs (in further versions, SIGHASH_SINGLE or SIGHASH_NONE signatures will not\n * be reset).\n *\n * @param {number} amount satoshis per KB to be sent\n * @return {Transaction} this, for chaining\n */\n\n\nTransaction.prototype.feePerKb = function (amount) {\n  $.checkArgument(_.isNumber(amount), 'amount must be a number');\n  this._feePerKb = amount;\n\n  this._updateChangeOutput();\n\n  return this;\n};\n/* Output management */\n\n/**\n * Set the change address for this transaction\n *\n * Beware that this resets all the signatures for inputs (in further versions,\n * SIGHASH_SINGLE or SIGHASH_NONE signatures will not be reset).\n *\n * @param {Address} address An address for change to be sent to.\n * @return {Transaction} this, for chaining\n */\n\n\nTransaction.prototype.change = function (address) {\n  $.checkArgument(address, 'address is required');\n  this._changeScript = Script.fromAddress(address);\n\n  this._updateChangeOutput();\n\n  return this;\n};\n/**\n * @return {Output} change output, if it exists\n */\n\n\nTransaction.prototype.getChangeOutput = function () {\n  if (!_.isUndefined(this._changeIndex)) {\n    return this.outputs[this._changeIndex];\n  }\n\n  return null;\n};\n/**\n * @typedef {Object} Transaction~toObject\n * @property {(string|Address)} address\n * @property {number} satoshis\n */\n\n/**\n * Add an output to the transaction.\n *\n * Beware that this resets all the signatures for inputs (in further versions,\n * SIGHASH_SINGLE or SIGHASH_NONE signatures will not be reset).\n *\n * @param {(string|Address|Array.<Transaction~toObject>)} address\n * @param {number} amount in satoshis\n * @return {Transaction} this, for chaining\n */\n\n\nTransaction.prototype.to = function (address, amount) {\n  if (_.isArray(address)) {\n    var self = this;\n\n    _.each(address, function (to) {\n      self.to(to.address, to.satoshis);\n    });\n\n    return this;\n  }\n\n  $.checkArgument(JSUtil.isNaturalNumber(amount), 'Amount is expected to be a positive integer');\n  this.addOutput(new Output({\n    script: Script(new Address(address)),\n    satoshis: amount\n  }));\n  return this;\n};\n/**\n * Add an OP_RETURN output to the transaction.\n *\n * Beware that this resets all the signatures for inputs (in further versions,\n * SIGHASH_SINGLE or SIGHASH_NONE signatures will not be reset).\n *\n * @param {Buffer|string} value the data to be stored in the OP_RETURN output.\n *    In case of a string, the UTF-8 representation will be stored\n * @return {Transaction} this, for chaining\n */\n\n\nTransaction.prototype.addData = function (value) {\n  this.addOutput(new Output({\n    script: Script.buildDataOut(value),\n    satoshis: 0\n  }));\n  return this;\n};\n/**\n * Add an output to the transaction.\n *\n * @param {Output} output the output to add.\n * @return {Transaction} this, for chaining\n */\n\n\nTransaction.prototype.addOutput = function (output) {\n  $.checkArgumentType(output, Output, 'output');\n\n  this._addOutput(output);\n\n  this._updateChangeOutput();\n\n  return this;\n};\n/**\n * Remove all outputs from the transaction.\n *\n * @return {Transaction} this, for chaining\n */\n\n\nTransaction.prototype.clearOutputs = function () {\n  this.outputs = [];\n\n  this._clearSignatures();\n\n  this._outputAmount = undefined;\n  this._changeIndex = undefined;\n\n  this._updateChangeOutput();\n\n  return this;\n};\n\nTransaction.prototype._addOutput = function (output) {\n  this.outputs.push(output);\n  this._outputAmount = undefined;\n};\n/**\n * Calculates or gets the total output amount in satoshis\n *\n * @return {Number} the transaction total output amount\n */\n\n\nTransaction.prototype._getOutputAmount = function () {\n  if (_.isUndefined(this._outputAmount)) {\n    var self = this;\n    this._outputAmount = 0;\n\n    _.each(this.outputs, function (output) {\n      self._outputAmount += output.satoshis;\n    });\n  }\n\n  return this._outputAmount;\n};\n/**\n * Calculates or gets the total input amount in satoshis\n *\n * @return {Number} the transaction total input amount\n */\n\n\nTransaction.prototype._getInputAmount = function () {\n  if (_.isUndefined(this._inputAmount)) {\n    var self = this;\n    this._inputAmount = 0;\n\n    _.each(this.inputs, function (input) {\n      if (_.isUndefined(input.output)) {\n        throw new errors.Transaction.Input.MissingPreviousOutput();\n      }\n\n      self._inputAmount += input.output.satoshis;\n    });\n  }\n\n  return this._inputAmount;\n};\n\nTransaction.prototype._updateChangeOutput = function () {\n  if (!this._changeScript) {\n    return;\n  }\n\n  this._clearSignatures();\n\n  if (!_.isUndefined(this._changeIndex)) {\n    this._removeOutput(this._changeIndex);\n  }\n\n  var available = this._getUnspentValue();\n\n  var fee = this.getFee();\n  var changeAmount = available - fee;\n\n  if (changeAmount > 0) {\n    this._changeIndex = this.outputs.length;\n\n    this._addOutput(new Output({\n      script: this._changeScript,\n      satoshis: changeAmount\n    }));\n  } else {\n    this._changeIndex = undefined;\n  }\n};\n/**\n * Calculates the fee of the transaction.\n *\n * If there's a fixed fee set, return that.\n *\n * If there is no change output set, the fee is the\n * total value of the outputs minus inputs. Note that\n * a serialized transaction only specifies the value\n * of its outputs. (The value of inputs are recorded\n * in the previous transaction outputs being spent.)\n * This method therefore raises a \"MissingPreviousOutput\"\n * error when called on a serialized transaction.\n *\n * If there's no fee set and no change address,\n * estimate the fee based on size.\n *\n * @return {Number} fee of this transaction in satoshis\n */\n\n\nTransaction.prototype.getFee = function () {\n  if (this.isCoinbase()) {\n    return 0;\n  }\n\n  if (!_.isUndefined(this._fee)) {\n    return this._fee;\n  } // if no change output is set, fees should equal all the unspent amount\n\n\n  if (!this._changeScript) {\n    return this._getUnspentValue();\n  }\n\n  return this._estimateFee();\n};\n/**\n * Estimates fee from serialized transaction size in bytes.\n */\n\n\nTransaction.prototype._estimateFee = function () {\n  var estimatedSize = this._estimateSize();\n\n  var available = this._getUnspentValue();\n\n  return Transaction._estimateFee(estimatedSize, available, this._feePerKb);\n};\n\nTransaction.prototype._getUnspentValue = function () {\n  return this._getInputAmount() - this._getOutputAmount();\n};\n\nTransaction.prototype._clearSignatures = function () {\n  _.each(this.inputs, function (input) {\n    input.clearSignatures();\n  });\n};\n\nTransaction._estimateFee = function (size, amountAvailable, feePerKb) {\n  var fee = Math.ceil(size / 1000) * (feePerKb || Transaction.FEE_PER_KB);\n\n  if (amountAvailable > fee) {\n    size += Transaction.CHANGE_OUTPUT_MAX_SIZE;\n  }\n\n  return Math.ceil(size / 1000) * (feePerKb || Transaction.FEE_PER_KB);\n};\n\nTransaction.prototype._estimateSize = function () {\n  var result = Transaction.MAXIMUM_EXTRA_SIZE;\n\n  _.each(this.inputs, function (input) {\n    result += input._estimateSize();\n  });\n\n  _.each(this.outputs, function (output) {\n    result += output.script.toBuffer().length + 9;\n  });\n\n  return result;\n};\n\nTransaction.prototype._removeOutput = function (index) {\n  var output = this.outputs[index];\n  this.outputs = _.without(this.outputs, output);\n  this._outputAmount = undefined;\n};\n\nTransaction.prototype.removeOutput = function (index) {\n  this._removeOutput(index);\n\n  this._updateChangeOutput();\n};\n/**\n * Sort a transaction's inputs and outputs according to BIP69\n *\n * @see {https://github.com/bitcoin/bips/blob/master/bip-0069.mediawiki}\n * @return {Transaction} this\n */\n\n\nTransaction.prototype.sort = function () {\n  this.sortInputs(function (inputs) {\n    var copy = Array.prototype.concat.apply([], inputs);\n    copy.sort(function (first, second) {\n      return compare(first.prevTxId, second.prevTxId) || first.outputIndex - second.outputIndex;\n    });\n    return copy;\n  });\n  this.sortOutputs(function (outputs) {\n    var copy = Array.prototype.concat.apply([], outputs);\n    copy.sort(function (first, second) {\n      return first.satoshis - second.satoshis || compare(first.script.toBuffer(), second.script.toBuffer());\n    });\n    return copy;\n  });\n  return this;\n};\n/**\n * Randomize this transaction's outputs ordering. The shuffling algorithm is a\n * version of the Fisher-Yates shuffle, provided by lodash's _.shuffle().\n *\n * @return {Transaction} this\n */\n\n\nTransaction.prototype.shuffleOutputs = function () {\n  return this.sortOutputs(_.shuffle);\n};\n/**\n * Sort this transaction's outputs, according to a given sorting function that\n * takes an array as argument and returns a new array, with the same elements\n * but with a different order. The argument function MUST NOT modify the order\n * of the original array\n *\n * @param {Function} sortingFunction\n * @return {Transaction} this\n */\n\n\nTransaction.prototype.sortOutputs = function (sortingFunction) {\n  var outs = sortingFunction(this.outputs);\n  return this._newOutputOrder(outs);\n};\n/**\n * Sort this transaction's inputs, according to a given sorting function that\n * takes an array as argument and returns a new array, with the same elements\n * but with a different order.\n *\n * @param {Function} sortingFunction\n * @return {Transaction} this\n */\n\n\nTransaction.prototype.sortInputs = function (sortingFunction) {\n  this.inputs = sortingFunction(this.inputs);\n\n  this._clearSignatures();\n\n  return this;\n};\n\nTransaction.prototype._newOutputOrder = function (newOutputs) {\n  var isInvalidSorting = this.outputs.length !== newOutputs.length || _.difference(this.outputs, newOutputs).length !== 0;\n\n  if (isInvalidSorting) {\n    throw new errors.Transaction.InvalidSorting();\n  }\n\n  if (!_.isUndefined(this._changeIndex)) {\n    var changeOutput = this.outputs[this._changeIndex];\n    this._changeIndex = _.findIndex(newOutputs, changeOutput);\n  }\n\n  this.outputs = newOutputs;\n  return this;\n};\n\nTransaction.prototype.removeInput = function (txId, outputIndex) {\n  var index;\n\n  if (!outputIndex && _.isNumber(txId)) {\n    index = txId;\n  } else {\n    index = _.findIndex(this.inputs, function (input) {\n      return input.prevTxId.toString('hex') === txId && input.outputIndex === outputIndex;\n    });\n  }\n\n  if (index < 0 || index >= this.inputs.length) {\n    throw new errors.Transaction.InvalidIndex(index, this.inputs.length);\n  }\n\n  var input = this.inputs[index];\n  this.inputs = _.without(this.inputs, input);\n  this._inputAmount = undefined;\n\n  this._updateChangeOutput();\n};\n/* Signature handling */\n\n/**\n * Sign the transaction using one or more private keys.\n *\n * It tries to sign each input, verifying that the signature will be valid\n * (matches a public key).\n *\n * @param {Array|String|PrivateKey} privateKey\n * @param {number} sigtype\n * @return {Transaction} this, for chaining\n */\n\n\nTransaction.prototype.sign = function (privateKey, sigtype) {\n  $.checkState(this.hasAllUtxoInfo());\n  var self = this;\n\n  if (_.isArray(privateKey)) {\n    _.each(privateKey, function (privateKey) {\n      self.sign(privateKey, sigtype);\n    });\n\n    return this;\n  }\n\n  _.each(this.getSignatures(privateKey, sigtype), function (signature) {\n    self.applySignature(signature);\n  });\n\n  return this;\n};\n\nTransaction.prototype.getSignatures = function (privKey, sigtype) {\n  privKey = new PrivateKey(privKey);\n  sigtype = sigtype || Signature.SIGHASH_ALL;\n  var transaction = this;\n  var results = [];\n  var hashData = Hash.sha256ripemd160(privKey.publicKey.toBuffer());\n\n  _.each(this.inputs, function forEachInput(input, index) {\n    _.each(input.getSignatures(transaction, privKey, index, sigtype, hashData), function (signature) {\n      results.push(signature);\n    });\n  });\n\n  return results;\n};\n/**\n * Add a signature to the transaction\n *\n * @param {Object} signature\n * @param {number} signature.inputIndex\n * @param {number} signature.sigtype\n * @param {PublicKey} signature.publicKey\n * @param {Signature} signature.signature\n * @return {Transaction} this, for chaining\n */\n\n\nTransaction.prototype.applySignature = function (signature) {\n  this.inputs[signature.inputIndex].addSignature(this, signature);\n  return this;\n};\n\nTransaction.prototype.isFullySigned = function () {\n  _.each(this.inputs, function (input) {\n    if (input.isFullySigned === Input.prototype.isFullySigned) {\n      throw new errors.Transaction.UnableToVerifySignature('Unrecognized script kind, or not enough information to execute script.' + 'This usually happens when creating a transaction from a serialized transaction');\n    }\n  });\n\n  return _.all(_.map(this.inputs, function (input) {\n    return input.isFullySigned();\n  }));\n};\n\nTransaction.prototype.isValidSignature = function (signature) {\n  var self = this;\n\n  if (this.inputs[signature.inputIndex].isValidSignature === Input.prototype.isValidSignature) {\n    throw new errors.Transaction.UnableToVerifySignature('Unrecognized script kind, or not enough information to execute script.' + 'This usually happens when creating a transaction from a serialized transaction');\n  }\n\n  return this.inputs[signature.inputIndex].isValidSignature(self, signature);\n};\n/**\n * @returns {bool} whether the signature is valid for this transaction input\n */\n\n\nTransaction.prototype.verifySignature = function (sig, pubkey, nin, subscript) {\n  return Sighash.verify(this, sig, pubkey, nin, subscript);\n};\n/**\n * Check that a transaction passes basic sanity tests. If not, return a string\n * describing the error. This function contains the same logic as\n * CheckTransaction in bitcoin core.\n */\n\n\nTransaction.prototype.verify = function () {\n  // Basic checks that don't depend on any context\n  if (this.inputs.length === 0) {\n    return 'transaction txins empty';\n  }\n\n  if (this.outputs.length === 0) {\n    return 'transaction txouts empty';\n  } // Check for negative or overflow output values\n\n\n  var valueoutbn = new BN(0);\n\n  for (var i = 0; i < this.outputs.length; i++) {\n    var txout = this.outputs[i];\n\n    if (txout.invalidSatoshis()) {\n      return 'transaction txout ' + i + ' satoshis is invalid';\n    }\n\n    if (txout._satoshisBN.gt(new BN(Transaction.MAX_MONEY, 10))) {\n      return 'transaction txout ' + i + ' greater than MAX_MONEY';\n    }\n\n    valueoutbn = valueoutbn.add(txout._satoshisBN);\n\n    if (valueoutbn.gt(new BN(Transaction.MAX_MONEY))) {\n      return 'transaction txout ' + i + ' total output greater than MAX_MONEY';\n    }\n  } // Size limits\n\n\n  if (this.toBuffer().length > MAX_BLOCK_SIZE) {\n    return 'transaction over the maximum block size';\n  } // Check for duplicate inputs\n\n\n  var txinmap = {};\n\n  for (i = 0; i < this.inputs.length; i++) {\n    var txin = this.inputs[i];\n    var inputid = txin.prevTxId + ':' + txin.outputIndex;\n\n    if (!_.isUndefined(txinmap[inputid])) {\n      return 'transaction input ' + i + ' duplicate input';\n    }\n\n    txinmap[inputid] = true;\n  }\n\n  var isCoinbase = this.isCoinbase();\n\n  if (isCoinbase) {\n    var buf = this.inputs[0]._scriptBuffer;\n\n    if (buf.length < 2 || buf.length > 100) {\n      return 'coinbase transaction script size invalid';\n    }\n  } else {\n    for (i = 0; i < this.inputs.length; i++) {\n      if (this.inputs[i].isNull()) {\n        return 'transaction input ' + i + ' has null input';\n      }\n    }\n  }\n\n  return true;\n};\n/**\n * Analogous to bitcoind's IsCoinBase function in transaction.h\n */\n\n\nTransaction.prototype.isCoinbase = function () {\n  return this.inputs.length === 1 && this.inputs[0].isNull();\n};\n/**\n * Determines if this transaction can be replaced in the mempool with another\n * transaction that provides a sufficiently higher fee (RBF).\n */\n\n\nTransaction.prototype.isRBF = function () {\n  for (var i = 0; i < this.inputs.length; i++) {\n    var input = this.inputs[i];\n\n    if (input.sequenceNumber < Input.MAXINT - 1) {\n      return true;\n    }\n  }\n\n  return false;\n};\n/**\n * Enable this transaction to be replaced in the mempool (RBF) if a transaction\n * includes a sufficiently higher fee. It will set the sequenceNumber to\n * DEFAULT_RBF_SEQNUMBER for all inputs if the sequence number does not\n * already enable RBF.\n */\n\n\nTransaction.prototype.enableRBF = function () {\n  for (var i = 0; i < this.inputs.length; i++) {\n    var input = this.inputs[i];\n\n    if (input.sequenceNumber >= Input.MAXINT - 1) {\n      input.sequenceNumber = Input.DEFAULT_RBF_SEQNUMBER;\n    }\n  }\n\n  return this;\n};\n\nmodule.exports = Transaction;","map":{"version":3,"sources":["/home/user/Desktop/paper/node_modules/bitcore-lib-litecoin/lib/transaction/transaction.js"],"names":["_","require","$","buffer","compare","Buffer","errors","BufferUtil","JSUtil","BufferReader","BufferWriter","Hash","Signature","Sighash","Address","UnspentOutput","Input","PublicKeyHashInput","PublicKeyHash","PublicKeyInput","PublicKey","MultiSigScriptHashInput","MultiSigScriptHash","MultiSigInput","MultiSig","Output","Script","PrivateKey","BN","Transaction","serialized","inputs","outputs","_inputAmount","undefined","_outputAmount","shallowCopy","isHexa","fromString","isBuffer","fromBuffer","isObject","fromObject","InvalidArgument","_newTransaction","CURRENT_VERSION","DEFAULT_NLOCKTIME","MAX_BLOCK_SIZE","DUST_AMOUNT","FEE_SECURITY_MARGIN","MAX_MONEY","NLOCKTIME_BLOCKHEIGHT_LIMIT","NLOCKTIME_MAX_VALUE","FEE_PER_KB","CHANGE_OUTPUT_MAX_SIZE","MAXIMUM_EXTRA_SIZE","transaction","copy","toBuffer","hashProperty","configurable","enumerable","get","_getHash","readReverse","toString","Object","defineProperty","prototype","ioProperty","_getInputAmount","_getOutputAmount","sha256sha256","serialize","unsafe","disableAll","uncheckedSerialize","checkedSerialize","opts","serializationError","getSerializationError","message","invalidSatoshis","invalid","i","length","InvalidSatoshis","unspent","_getUnspentValue","unspentError","disableMoreOutputThanInput","InvalidOutputAmountSum","_hasFeeError","_hasDustOutputs","_isMissingSignatures","isUndefined","_fee","FeeError","Different","disableLargeFees","maximumFee","Math","floor","_estimateFee","_missingChange","ChangeAddressMissing","TooLarge","disableSmallFees","minimumFee","ceil","TooSmall","_changeScript","disableDustOutputs","index","output","satoshis","script","isDataOut","DustOutputs","disableIsFullySigned","isFullySigned","MissingSignatures","inspect","writer","toBufferWriter","writeUInt32LE","version","writeVarintNum","each","input","nLockTime","reader","fromBufferReader","checkArgument","finished","sizeTxIns","sizeTxOuts","readUInt32LE","readVarintNum","push","toObject","toJSON","forEach","obj","hash","changeScript","_changeIndex","changeIndex","fee","arg","self","uncheckedAddInput","txin","isPublicKeyHashOut","isScriptHashOut","publicKeys","threshold","signatures","isPublicKeyOut","UnsupportedScript","addInput","addOutput","_checkConsistency","checkState","lockUntilDate","time","isNumber","LockTimeTooEarly","isDate","getTime","sequenceNumber","DEFAULT_SEQNUMBER","DEFAULT_LOCKTIME_SEQNUMBER","lockUntilBlockHeight","height","BlockHeightTooHigh","NLockTimeOutOfRange","getLockTime","Date","string","from","utxo","pubkeys","isArray","exists","any","prevTxId","txId","outputIndex","_fromMultisigUtxo","_fromNonP2SH","clazz","empty","isMultisigOut","Error","outputScript","checkArgumentType","NeedMoreInfo","_updateChangeOutput","hasAllUtxoInfo","all","map","amount","feePerKb","_feePerKb","change","address","fromAddress","getChangeOutput","to","isNaturalNumber","addData","value","buildDataOut","_addOutput","clearOutputs","_clearSignatures","MissingPreviousOutput","_removeOutput","available","getFee","changeAmount","isCoinbase","estimatedSize","_estimateSize","clearSignatures","size","amountAvailable","result","without","removeOutput","sort","sortInputs","Array","concat","apply","first","second","sortOutputs","shuffleOutputs","shuffle","sortingFunction","outs","_newOutputOrder","newOutputs","isInvalidSorting","difference","InvalidSorting","changeOutput","findIndex","removeInput","InvalidIndex","sign","privateKey","sigtype","getSignatures","signature","applySignature","privKey","SIGHASH_ALL","results","hashData","sha256ripemd160","publicKey","forEachInput","inputIndex","addSignature","UnableToVerifySignature","isValidSignature","verifySignature","sig","pubkey","nin","subscript","verify","valueoutbn","txout","_satoshisBN","gt","add","txinmap","inputid","buf","_scriptBuffer","isNull","isRBF","MAXINT","enableRBF","DEFAULT_RBF_SEQNUMBER","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nvar _ = require('lodash');\nvar $ = require('../util/preconditions');\nvar buffer = require('buffer');\nvar compare = Buffer.compare || require('buffer-compare');\n\nvar errors = require('../errors');\nvar BufferUtil = require('../util/buffer');\nvar JSUtil = require('../util/js');\nvar BufferReader = require('../encoding/bufferreader');\nvar BufferWriter = require('../encoding/bufferwriter');\nvar Hash = require('../crypto/hash');\nvar Signature = require('../crypto/signature');\nvar Sighash = require('./sighash');\n\nvar Address = require('../address');\nvar UnspentOutput = require('./unspentoutput');\nvar Input = require('./input');\nvar PublicKeyHashInput = Input.PublicKeyHash;\nvar PublicKeyInput = Input.PublicKey;\nvar MultiSigScriptHashInput = Input.MultiSigScriptHash;\nvar MultiSigInput = Input.MultiSig;\nvar Output = require('./output');\nvar Script = require('../script');\nvar PrivateKey = require('../privatekey');\nvar BN = require('../crypto/bn');\n\n/**\n * Represents a transaction, a set of inputs and outputs to change ownership of tokens\n *\n * @param {*} serialized\n * @constructor\n */\nfunction Transaction(serialized) {\n  if (!(this instanceof Transaction)) {\n    return new Transaction(serialized);\n  }\n  this.inputs = [];\n  this.outputs = [];\n  this._inputAmount = undefined;\n  this._outputAmount = undefined;\n\n  if (serialized) {\n    if (serialized instanceof Transaction) {\n      return Transaction.shallowCopy(serialized);\n    } else if (JSUtil.isHexa(serialized)) {\n      this.fromString(serialized);\n    } else if (BufferUtil.isBuffer(serialized)) {\n      this.fromBuffer(serialized);\n    } else if (_.isObject(serialized)) {\n      this.fromObject(serialized);\n    } else {\n      throw new errors.InvalidArgument('Must provide an object or string to deserialize a transaction');\n    }\n  } else {\n    this._newTransaction();\n  }\n}\n\nvar CURRENT_VERSION = 1;\nvar DEFAULT_NLOCKTIME = 0;\nvar MAX_BLOCK_SIZE = 1000000;\n\n// Minimum amount for an output for it not to be considered a dust output\nTransaction.DUST_AMOUNT = 546;\n\n// Margin of error to allow fees in the vecinity of the expected value but doesn't allow a big difference\nTransaction.FEE_SECURITY_MARGIN = 15;\n\n// max amount of satoshis in circulation\nTransaction.MAX_MONEY = 21000000 * 1e8;\n\n// nlocktime limit to be considered block height rather than a timestamp\nTransaction.NLOCKTIME_BLOCKHEIGHT_LIMIT = 5e8;\n\n// Max value for an unsigned 32 bit value\nTransaction.NLOCKTIME_MAX_VALUE = 4294967295;\n\n// Value used for fee estimation (satoshis per kilobyte)\nTransaction.FEE_PER_KB = 10000;\n\n// Safe upper bound for change address script size in bytes\nTransaction.CHANGE_OUTPUT_MAX_SIZE = 20 + 4 + 34 + 4;\nTransaction.MAXIMUM_EXTRA_SIZE = 4 + 9 + 9 + 4;\n\n/* Constructors and Serialization */\n\n/**\n * Create a 'shallow' copy of the transaction, by serializing and deserializing\n * it dropping any additional information that inputs and outputs may have hold\n *\n * @param {Transaction} transaction\n * @return {Transaction}\n */\nTransaction.shallowCopy = function(transaction) {\n  var copy = new Transaction(transaction.toBuffer());\n  return copy;\n};\n\nvar hashProperty = {\n  configurable: false,\n  enumerable: true,\n  get: function() {\n    return new BufferReader(this._getHash()).readReverse().toString('hex');\n  }\n};\nObject.defineProperty(Transaction.prototype, 'hash', hashProperty);\nObject.defineProperty(Transaction.prototype, 'id', hashProperty);\n\nvar ioProperty = {\n  configurable: false,\n  enumerable: true,\n  get: function() {\n    return this._getInputAmount();\n  }\n};\nObject.defineProperty(Transaction.prototype, 'inputAmount', ioProperty);\nioProperty.get = function() {\n  return this._getOutputAmount();\n};\nObject.defineProperty(Transaction.prototype, 'outputAmount', ioProperty);\n\n/**\n * Retrieve the little endian hash of the transaction (used for serialization)\n * @return {Buffer}\n */\nTransaction.prototype._getHash = function() {\n  return Hash.sha256sha256(this.toBuffer());\n};\n\n/**\n * Retrieve a hexa string that can be used with bitcoind's CLI interface\n * (decoderawtransaction, sendrawtransaction)\n *\n * @param {Object|boolean=} unsafe if true, skip all tests. if it's an object,\n *   it's expected to contain a set of flags to skip certain tests:\n * * `disableAll`: disable all checks\n * * `disableSmallFees`: disable checking for fees that are too small\n * * `disableLargeFees`: disable checking for fees that are too large\n * * `disableIsFullySigned`: disable checking if all inputs are fully signed\n * * `disableDustOutputs`: disable checking if there are no outputs that are dust amounts\n * * `disableMoreOutputThanInput`: disable checking if the transaction spends more bitcoins than the sum of the input amounts\n * @return {string}\n */\nTransaction.prototype.serialize = function(unsafe) {\n  if (true === unsafe || unsafe && unsafe.disableAll) {\n    return this.uncheckedSerialize();\n  } else {\n    return this.checkedSerialize(unsafe);\n  }\n};\n\nTransaction.prototype.uncheckedSerialize = Transaction.prototype.toString = function() {\n  return this.toBuffer().toString('hex');\n};\n\n/**\n * Retrieve a hexa string that can be used with bitcoind's CLI interface\n * (decoderawtransaction, sendrawtransaction)\n *\n * @param {Object} opts allows to skip certain tests. {@see Transaction#serialize}\n * @return {string}\n */\nTransaction.prototype.checkedSerialize = function(opts) {\n  var serializationError = this.getSerializationError(opts);\n  if (serializationError) {\n    serializationError.message += ' Use Transaction#uncheckedSerialize if you want to skip security checks. ' +\n      'See http://bitcore.io/guide/transaction.html#Serialization for more info.';\n    throw serializationError;\n  }\n  return this.uncheckedSerialize();\n};\n\nTransaction.prototype.invalidSatoshis = function() {\n  var invalid = false;\n  for (var i = 0; i < this.outputs.length; i++) {\n    if (this.outputs[i].invalidSatoshis()) {\n      invalid = true;\n    }\n  }\n  return invalid;\n};\n\n/**\n * Retrieve a possible error that could appear when trying to serialize and\n * broadcast this transaction.\n *\n * @param {Object} opts allows to skip certain tests. {@see Transaction#serialize}\n * @return {bitcore.Error}\n */\nTransaction.prototype.getSerializationError = function(opts) {\n  opts = opts || {};\n\n  if (this.invalidSatoshis()) {\n    return new errors.Transaction.InvalidSatoshis();\n  }\n\n  var unspent = this._getUnspentValue();\n  var unspentError;\n  if (unspent < 0) {\n    if (!opts.disableMoreOutputThanInput) {\n      unspentError = new errors.Transaction.InvalidOutputAmountSum();\n    }\n  } else {\n    unspentError = this._hasFeeError(opts, unspent);\n  }\n\n  return unspentError ||\n    this._hasDustOutputs(opts) ||\n    this._isMissingSignatures(opts);\n};\n\nTransaction.prototype._hasFeeError = function(opts, unspent) {\n\n  if (!_.isUndefined(this._fee) && this._fee !== unspent) {\n    return new errors.Transaction.FeeError.Different(\n      'Unspent value is ' + unspent + ' but specified fee is ' + this._fee\n    );\n  }\n\n  if (!opts.disableLargeFees) {\n    var maximumFee = Math.floor(Transaction.FEE_SECURITY_MARGIN * this._estimateFee());\n    if (unspent > maximumFee) {\n      if (this._missingChange()) {\n        return new errors.Transaction.ChangeAddressMissing(\n          'Fee is too large and no change address was provided'\n        );\n      }\n      return new errors.Transaction.FeeError.TooLarge(\n        'expected less than ' + maximumFee + ' but got ' + unspent\n      );\n    }\n  }\n\n  if (!opts.disableSmallFees) {\n    var minimumFee = Math.ceil(this._estimateFee() / Transaction.FEE_SECURITY_MARGIN);\n    if (unspent < minimumFee) {\n      return new errors.Transaction.FeeError.TooSmall(\n        'expected more than ' + minimumFee + ' but got ' + unspent\n      );\n    }\n  }\n};\n\nTransaction.prototype._missingChange = function() {\n  return !this._changeScript;\n};\n\nTransaction.prototype._hasDustOutputs = function(opts) {\n  if (opts.disableDustOutputs) {\n    return;\n  }\n  var index, output;\n  for (index in this.outputs) {\n    output = this.outputs[index];\n    if (output.satoshis < Transaction.DUST_AMOUNT && !output.script.isDataOut()) {\n      return new errors.Transaction.DustOutputs();\n    }\n  }\n};\n\nTransaction.prototype._isMissingSignatures = function(opts) {\n  if (opts.disableIsFullySigned) {\n    return;\n  }\n  if (!this.isFullySigned()) {\n    return new errors.Transaction.MissingSignatures();\n  }\n};\n\nTransaction.prototype.inspect = function() {\n  return '<Transaction: ' + this.uncheckedSerialize() + '>';\n};\n\nTransaction.prototype.toBuffer = function() {\n  var writer = new BufferWriter();\n  return this.toBufferWriter(writer).toBuffer();\n};\n\nTransaction.prototype.toBufferWriter = function(writer) {\n  writer.writeUInt32LE(this.version);\n  writer.writeVarintNum(this.inputs.length);\n  _.each(this.inputs, function(input) {\n    input.toBufferWriter(writer);\n  });\n  writer.writeVarintNum(this.outputs.length);\n  _.each(this.outputs, function(output) {\n    output.toBufferWriter(writer);\n  });\n  writer.writeUInt32LE(this.nLockTime);\n  return writer;\n};\n\nTransaction.prototype.fromBuffer = function(buffer) {\n  var reader = new BufferReader(buffer);\n  return this.fromBufferReader(reader);\n};\n\nTransaction.prototype.fromBufferReader = function(reader) {\n  $.checkArgument(!reader.finished(), 'No transaction data received');\n  var i, sizeTxIns, sizeTxOuts;\n\n  this.version = reader.readUInt32LE();\n  sizeTxIns = reader.readVarintNum();\n  for (i = 0; i < sizeTxIns; i++) {\n    var input = Input.fromBufferReader(reader);\n    this.inputs.push(input);\n  }\n  sizeTxOuts = reader.readVarintNum();\n  for (i = 0; i < sizeTxOuts; i++) {\n    this.outputs.push(Output.fromBufferReader(reader));\n  }\n  this.nLockTime = reader.readUInt32LE();\n  return this;\n};\n\nTransaction.prototype.toObject = Transaction.prototype.toJSON = function toObject() {\n  var inputs = [];\n  this.inputs.forEach(function(input) {\n    inputs.push(input.toObject());\n  });\n  var outputs = [];\n  this.outputs.forEach(function(output) {\n    outputs.push(output.toObject());\n  });\n  var obj = {\n    hash: this.hash,\n    version: this.version,\n    inputs: inputs,\n    outputs: outputs,\n    nLockTime: this.nLockTime\n  };\n  if (this._changeScript) {\n    obj.changeScript = this._changeScript.toString();\n  }\n  if (!_.isUndefined(this._changeIndex)) {\n    obj.changeIndex = this._changeIndex;\n  }\n  if (!_.isUndefined(this._fee)) {\n    obj.fee = this._fee;\n  }\n  return obj;\n};\n\nTransaction.prototype.fromObject = function fromObject(arg) {\n  /* jshint maxstatements: 20 */\n  $.checkArgument(_.isObject(arg) || arg instanceof Transaction);\n  var self = this;\n  var transaction;\n  if (arg instanceof Transaction) {\n    transaction = transaction.toObject();\n  } else {\n    transaction = arg;\n  }\n  _.each(transaction.inputs, function(input) {\n    if (!input.output || !input.output.script) {\n      self.uncheckedAddInput(new Input(input));\n      return;\n    }\n    var script = new Script(input.output.script);\n    var txin;\n    if (script.isPublicKeyHashOut()) {\n      txin = new Input.PublicKeyHash(input);\n    } else if (script.isScriptHashOut() && input.publicKeys && input.threshold) {\n      txin = new Input.MultiSigScriptHash(\n        input, input.publicKeys, input.threshold, input.signatures\n      );\n    } else if (script.isPublicKeyOut()) {\n      txin = new Input.PublicKey(input);\n    } else {\n      throw new errors.Transaction.Input.UnsupportedScript(input.output.script);\n    }\n    self.addInput(txin);\n  });\n  _.each(transaction.outputs, function(output) {\n    self.addOutput(new Output(output));\n  });\n  if (transaction.changeIndex) {\n    this._changeIndex = transaction.changeIndex;\n  }\n  if (transaction.changeScript) {\n    this._changeScript = new Script(transaction.changeScript);\n  }\n  if (transaction.fee) {\n    this._fee = transaction.fee;\n  }\n  this.nLockTime = transaction.nLockTime;\n  this.version = transaction.version;\n  this._checkConsistency(arg);\n  return this;\n};\n\nTransaction.prototype._checkConsistency = function(arg) {\n  if (!_.isUndefined(this._changeIndex)) {\n    $.checkState(this._changeScript);\n    $.checkState(this.outputs[this._changeIndex]);\n    $.checkState(this.outputs[this._changeIndex].script.toString() ===\n      this._changeScript.toString());\n  }\n  if (arg && arg.hash) {\n    $.checkState(arg.hash === this.hash, 'Hash in object does not match transaction hash');\n  }\n};\n\n/**\n * Sets nLockTime so that transaction is not valid until the desired date(a\n * timestamp in seconds since UNIX epoch is also accepted)\n *\n * @param {Date | Number} time\n * @return {Transaction} this\n */\nTransaction.prototype.lockUntilDate = function(time) {\n  $.checkArgument(time);\n  if (_.isNumber(time) && time < Transaction.NLOCKTIME_BLOCKHEIGHT_LIMIT) {\n    throw new errors.Transaction.LockTimeTooEarly();\n  }\n  if (_.isDate(time)) {\n    time = time.getTime() / 1000;\n  }\n\n  for (var i = 0; i < this.inputs.length; i++) {\n    if (this.inputs[i].sequenceNumber === Input.DEFAULT_SEQNUMBER){\n      this.inputs[i].sequenceNumber = Input.DEFAULT_LOCKTIME_SEQNUMBER;\n    }\n  }\n\n  this.nLockTime = time;\n  return this;\n};\n\n/**\n * Sets nLockTime so that transaction is not valid until the desired block\n * height.\n *\n * @param {Number} height\n * @return {Transaction} this\n */\nTransaction.prototype.lockUntilBlockHeight = function(height) {\n  $.checkArgument(_.isNumber(height));\n  if (height >= Transaction.NLOCKTIME_BLOCKHEIGHT_LIMIT) {\n    throw new errors.Transaction.BlockHeightTooHigh();\n  }\n  if (height < 0) {\n    throw new errors.Transaction.NLockTimeOutOfRange();\n  }\n\n  for (var i = 0; i < this.inputs.length; i++) {\n    if (this.inputs[i].sequenceNumber === Input.DEFAULT_SEQNUMBER){\n      this.inputs[i].sequenceNumber = Input.DEFAULT_LOCKTIME_SEQNUMBER;\n    }\n  }\n\n\n  this.nLockTime = height;\n  return this;\n};\n\n/**\n *  Returns a semantic version of the transaction's nLockTime.\n *  @return {Number|Date}\n *  If nLockTime is 0, it returns null,\n *  if it is < 500000000, it returns a block height (number)\n *  else it returns a Date object.\n */\nTransaction.prototype.getLockTime = function() {\n  if (!this.nLockTime) {\n    return null;\n  }\n  if (this.nLockTime < Transaction.NLOCKTIME_BLOCKHEIGHT_LIMIT) {\n    return this.nLockTime;\n  }\n  return new Date(1000 * this.nLockTime);\n};\n\nTransaction.prototype.fromString = function(string) {\n  this.fromBuffer(new buffer.Buffer(string, 'hex'));\n};\n\nTransaction.prototype._newTransaction = function() {\n  this.version = CURRENT_VERSION;\n  this.nLockTime = DEFAULT_NLOCKTIME;\n};\n\n/* Transaction creation interface */\n\n/**\n * @typedef {Object} Transaction~fromObject\n * @property {string} prevTxId\n * @property {number} outputIndex\n * @property {(Buffer|string|Script)} script\n * @property {number} satoshis\n */\n\n/**\n * Add an input to this transaction. This is a high level interface\n * to add an input, for more control, use @{link Transaction#addInput}.\n *\n * Can receive, as output information, the output of bitcoind's `listunspent` command,\n * and a slightly fancier format recognized by bitcore:\n *\n * ```\n * {\n *  address: 'mszYqVnqKoQx4jcTdJXxwKAissE3Jbrrc1',\n *  txId: 'a477af6b2667c29670467e4e0728b685ee07b240235771862318e29ddbe58458',\n *  outputIndex: 0,\n *  script: Script.empty(),\n *  satoshis: 1020000\n * }\n * ```\n * Where `address` can be either a string or a bitcore Address object. The\n * same is true for `script`, which can be a string or a bitcore Script.\n *\n * Beware that this resets all the signatures for inputs (in further versions,\n * SIGHASH_SINGLE or SIGHASH_NONE signatures will not be reset).\n *\n * @example\n * ```javascript\n * var transaction = new Transaction();\n *\n * // From a pay to public key hash output from bitcoind's listunspent\n * transaction.from({'txid': '0000...', vout: 0, amount: 0.1, scriptPubKey: 'OP_DUP ...'});\n *\n * // From a pay to public key hash output\n * transaction.from({'txId': '0000...', outputIndex: 0, satoshis: 1000, script: 'OP_DUP ...'});\n *\n * // From a multisig P2SH output\n * transaction.from({'txId': '0000...', inputIndex: 0, satoshis: 1000, script: '... OP_HASH'},\n *                  ['03000...', '02000...'], 2);\n * ```\n *\n * @param {(Array.<Transaction~fromObject>|Transaction~fromObject)} utxo\n * @param {Array=} pubkeys\n * @param {number=} threshold\n */\nTransaction.prototype.from = function(utxo, pubkeys, threshold) {\n  if (_.isArray(utxo)) {\n    var self = this;\n    _.each(utxo, function(utxo) {\n      self.from(utxo, pubkeys, threshold);\n    });\n    return this;\n  }\n  var exists = _.any(this.inputs, function(input) {\n    // TODO: Maybe prevTxId should be a string? Or defined as read only property?\n    return input.prevTxId.toString('hex') === utxo.txId && input.outputIndex === utxo.outputIndex;\n  });\n  if (exists) {\n    return this;\n  }\n  if (pubkeys && threshold) {\n    this._fromMultisigUtxo(utxo, pubkeys, threshold);\n  } else {\n    this._fromNonP2SH(utxo);\n  }\n  return this;\n};\n\nTransaction.prototype._fromNonP2SH = function(utxo) {\n  var clazz;\n  utxo = new UnspentOutput(utxo);\n  if (utxo.script.isPublicKeyHashOut()) {\n    clazz = PublicKeyHashInput;\n  } else if (utxo.script.isPublicKeyOut()) {\n    clazz = PublicKeyInput;\n  } else {\n    clazz = Input;\n  }\n  this.addInput(new clazz({\n    output: new Output({\n      script: utxo.script,\n      satoshis: utxo.satoshis\n    }),\n    prevTxId: utxo.txId,\n    outputIndex: utxo.outputIndex,\n    script: Script.empty()\n  }));\n};\n\nTransaction.prototype._fromMultisigUtxo = function(utxo, pubkeys, threshold) {\n  $.checkArgument(threshold <= pubkeys.length,\n    'Number of required signatures must be greater than the number of public keys');\n  var clazz;\n  utxo = new UnspentOutput(utxo);\n  if (utxo.script.isMultisigOut()) {\n    clazz = MultiSigInput;\n  } else if (utxo.script.isScriptHashOut()) {\n    clazz = MultiSigScriptHashInput;\n  } else {\n    throw new Error(\"@TODO\");\n  }\n  this.addInput(new clazz({\n    output: new Output({\n      script: utxo.script,\n      satoshis: utxo.satoshis\n    }),\n    prevTxId: utxo.txId,\n    outputIndex: utxo.outputIndex,\n    script: Script.empty()\n  }, pubkeys, threshold));\n};\n\n/**\n * Add an input to this transaction. The input must be an instance of the `Input` class.\n * It should have information about the Output that it's spending, but if it's not already\n * set, two additional parameters, `outputScript` and `satoshis` can be provided.\n *\n * @param {Input} input\n * @param {String|Script} outputScript\n * @param {number} satoshis\n * @return Transaction this, for chaining\n */\nTransaction.prototype.addInput = function(input, outputScript, satoshis) {\n  $.checkArgumentType(input, Input, 'input');\n  if (!input.output && (_.isUndefined(outputScript) || _.isUndefined(satoshis))) {\n    throw new errors.Transaction.NeedMoreInfo('Need information about the UTXO script and satoshis');\n  }\n  if (!input.output && outputScript && !_.isUndefined(satoshis)) {\n    outputScript = outputScript instanceof Script ? outputScript : new Script(outputScript);\n    $.checkArgumentType(satoshis, 'number', 'satoshis');\n    input.output = new Output({\n      script: outputScript,\n      satoshis: satoshis\n    });\n  }\n  return this.uncheckedAddInput(input);\n};\n\n/**\n * Add an input to this transaction, without checking that the input has information about\n * the output that it's spending.\n *\n * @param {Input} input\n * @return Transaction this, for chaining\n */\nTransaction.prototype.uncheckedAddInput = function(input) {\n  $.checkArgumentType(input, Input, 'input');\n  this.inputs.push(input);\n  this._inputAmount = undefined;\n  this._updateChangeOutput();\n  return this;\n};\n\n/**\n * Returns true if the transaction has enough info on all inputs to be correctly validated\n *\n * @return {boolean}\n */\nTransaction.prototype.hasAllUtxoInfo = function() {\n  return _.all(this.inputs.map(function(input) {\n    return !!input.output;\n  }));\n};\n\n/**\n * Manually set the fee for this transaction. Beware that this resets all the signatures\n * for inputs (in further versions, SIGHASH_SINGLE or SIGHASH_NONE signatures will not\n * be reset).\n *\n * @param {number} amount satoshis to be sent\n * @return {Transaction} this, for chaining\n */\nTransaction.prototype.fee = function(amount) {\n  $.checkArgument(_.isNumber(amount), 'amount must be a number');\n  this._fee = amount;\n  this._updateChangeOutput();\n  return this;\n};\n\n/**\n * Manually set the fee per KB for this transaction. Beware that this resets all the signatures\n * for inputs (in further versions, SIGHASH_SINGLE or SIGHASH_NONE signatures will not\n * be reset).\n *\n * @param {number} amount satoshis per KB to be sent\n * @return {Transaction} this, for chaining\n */\nTransaction.prototype.feePerKb = function(amount) {\n  $.checkArgument(_.isNumber(amount), 'amount must be a number');\n  this._feePerKb = amount;\n  this._updateChangeOutput();\n  return this;\n};\n\n/* Output management */\n\n/**\n * Set the change address for this transaction\n *\n * Beware that this resets all the signatures for inputs (in further versions,\n * SIGHASH_SINGLE or SIGHASH_NONE signatures will not be reset).\n *\n * @param {Address} address An address for change to be sent to.\n * @return {Transaction} this, for chaining\n */\nTransaction.prototype.change = function(address) {\n  $.checkArgument(address, 'address is required');\n  this._changeScript = Script.fromAddress(address);\n  this._updateChangeOutput();\n  return this;\n};\n\n\n/**\n * @return {Output} change output, if it exists\n */\nTransaction.prototype.getChangeOutput = function() {\n  if (!_.isUndefined(this._changeIndex)) {\n    return this.outputs[this._changeIndex];\n  }\n  return null;\n};\n\n/**\n * @typedef {Object} Transaction~toObject\n * @property {(string|Address)} address\n * @property {number} satoshis\n */\n\n/**\n * Add an output to the transaction.\n *\n * Beware that this resets all the signatures for inputs (in further versions,\n * SIGHASH_SINGLE or SIGHASH_NONE signatures will not be reset).\n *\n * @param {(string|Address|Array.<Transaction~toObject>)} address\n * @param {number} amount in satoshis\n * @return {Transaction} this, for chaining\n */\nTransaction.prototype.to = function(address, amount) {\n  if (_.isArray(address)) {\n    var self = this;\n    _.each(address, function(to) {\n      self.to(to.address, to.satoshis);\n    });\n    return this;\n  }\n\n  $.checkArgument(\n    JSUtil.isNaturalNumber(amount),\n    'Amount is expected to be a positive integer'\n  );\n  this.addOutput(new Output({\n    script: Script(new Address(address)),\n    satoshis: amount\n  }));\n  return this;\n};\n\n/**\n * Add an OP_RETURN output to the transaction.\n *\n * Beware that this resets all the signatures for inputs (in further versions,\n * SIGHASH_SINGLE or SIGHASH_NONE signatures will not be reset).\n *\n * @param {Buffer|string} value the data to be stored in the OP_RETURN output.\n *    In case of a string, the UTF-8 representation will be stored\n * @return {Transaction} this, for chaining\n */\nTransaction.prototype.addData = function(value) {\n  this.addOutput(new Output({\n    script: Script.buildDataOut(value),\n    satoshis: 0\n  }));\n  return this;\n};\n\n\n/**\n * Add an output to the transaction.\n *\n * @param {Output} output the output to add.\n * @return {Transaction} this, for chaining\n */\nTransaction.prototype.addOutput = function(output) {\n  $.checkArgumentType(output, Output, 'output');\n  this._addOutput(output);\n  this._updateChangeOutput();\n  return this;\n};\n\n\n/**\n * Remove all outputs from the transaction.\n *\n * @return {Transaction} this, for chaining\n */\nTransaction.prototype.clearOutputs = function() {\n  this.outputs = [];\n  this._clearSignatures();\n  this._outputAmount = undefined;\n  this._changeIndex = undefined;\n  this._updateChangeOutput();\n  return this;\n};\n\n\nTransaction.prototype._addOutput = function(output) {\n  this.outputs.push(output);\n  this._outputAmount = undefined;\n};\n\n\n/**\n * Calculates or gets the total output amount in satoshis\n *\n * @return {Number} the transaction total output amount\n */\nTransaction.prototype._getOutputAmount = function() {\n  if (_.isUndefined(this._outputAmount)) {\n    var self = this;\n    this._outputAmount = 0;\n    _.each(this.outputs, function(output) {\n      self._outputAmount += output.satoshis;\n    });\n  }\n  return this._outputAmount;\n};\n\n\n/**\n * Calculates or gets the total input amount in satoshis\n *\n * @return {Number} the transaction total input amount\n */\nTransaction.prototype._getInputAmount = function() {\n  if (_.isUndefined(this._inputAmount)) {\n    var self = this;\n    this._inputAmount = 0;\n    _.each(this.inputs, function(input) {\n      if (_.isUndefined(input.output)) {\n        throw new errors.Transaction.Input.MissingPreviousOutput();\n      }\n      self._inputAmount += input.output.satoshis;\n    });\n  }\n  return this._inputAmount;\n};\n\nTransaction.prototype._updateChangeOutput = function() {\n  if (!this._changeScript) {\n    return;\n  }\n  this._clearSignatures();\n  if (!_.isUndefined(this._changeIndex)) {\n    this._removeOutput(this._changeIndex);\n  }\n  var available = this._getUnspentValue();\n  var fee = this.getFee();\n  var changeAmount = available - fee;\n  if (changeAmount > 0) {\n    this._changeIndex = this.outputs.length;\n    this._addOutput(new Output({\n      script: this._changeScript,\n      satoshis: changeAmount\n    }));\n  } else {\n    this._changeIndex = undefined;\n  }\n};\n/**\n * Calculates the fee of the transaction.\n *\n * If there's a fixed fee set, return that.\n *\n * If there is no change output set, the fee is the\n * total value of the outputs minus inputs. Note that\n * a serialized transaction only specifies the value\n * of its outputs. (The value of inputs are recorded\n * in the previous transaction outputs being spent.)\n * This method therefore raises a \"MissingPreviousOutput\"\n * error when called on a serialized transaction.\n *\n * If there's no fee set and no change address,\n * estimate the fee based on size.\n *\n * @return {Number} fee of this transaction in satoshis\n */\nTransaction.prototype.getFee = function() {\n  if (this.isCoinbase()) {\n    return 0;\n  }\n  if (!_.isUndefined(this._fee)) {\n    return this._fee;\n  }\n  // if no change output is set, fees should equal all the unspent amount\n  if (!this._changeScript) {\n    return this._getUnspentValue();\n  }\n  return this._estimateFee();\n};\n\n/**\n * Estimates fee from serialized transaction size in bytes.\n */\nTransaction.prototype._estimateFee = function() {\n  var estimatedSize = this._estimateSize();\n  var available = this._getUnspentValue();\n  return Transaction._estimateFee(estimatedSize, available, this._feePerKb);\n};\n\nTransaction.prototype._getUnspentValue = function() {\n  return this._getInputAmount() - this._getOutputAmount();\n};\n\nTransaction.prototype._clearSignatures = function() {\n  _.each(this.inputs, function(input) {\n    input.clearSignatures();\n  });\n};\n\nTransaction._estimateFee = function(size, amountAvailable, feePerKb) {\n  var fee = Math.ceil(size / 1000) * (feePerKb || Transaction.FEE_PER_KB);\n  if (amountAvailable > fee) {\n    size += Transaction.CHANGE_OUTPUT_MAX_SIZE;\n  }\n  return Math.ceil(size / 1000) * (feePerKb || Transaction.FEE_PER_KB);\n};\n\nTransaction.prototype._estimateSize = function() {\n  var result = Transaction.MAXIMUM_EXTRA_SIZE;\n  _.each(this.inputs, function(input) {\n    result += input._estimateSize();\n  });\n  _.each(this.outputs, function(output) {\n    result += output.script.toBuffer().length + 9;\n  });\n  return result;\n};\n\nTransaction.prototype._removeOutput = function(index) {\n  var output = this.outputs[index];\n  this.outputs = _.without(this.outputs, output);\n  this._outputAmount = undefined;\n};\n\nTransaction.prototype.removeOutput = function(index) {\n  this._removeOutput(index);\n  this._updateChangeOutput();\n};\n\n/**\n * Sort a transaction's inputs and outputs according to BIP69\n *\n * @see {https://github.com/bitcoin/bips/blob/master/bip-0069.mediawiki}\n * @return {Transaction} this\n */\nTransaction.prototype.sort = function() {\n  this.sortInputs(function(inputs) {\n    var copy = Array.prototype.concat.apply([], inputs);\n    copy.sort(function(first, second) {\n      return compare(first.prevTxId, second.prevTxId)\n        || first.outputIndex - second.outputIndex;\n    });\n    return copy;\n  });\n  this.sortOutputs(function(outputs) {\n    var copy = Array.prototype.concat.apply([], outputs);\n    copy.sort(function(first, second) {\n      return first.satoshis - second.satoshis\n        || compare(first.script.toBuffer(), second.script.toBuffer());\n    });\n    return copy;\n  });\n  return this;\n};\n\n/**\n * Randomize this transaction's outputs ordering. The shuffling algorithm is a\n * version of the Fisher-Yates shuffle, provided by lodash's _.shuffle().\n *\n * @return {Transaction} this\n */\nTransaction.prototype.shuffleOutputs = function() {\n  return this.sortOutputs(_.shuffle);\n};\n\n/**\n * Sort this transaction's outputs, according to a given sorting function that\n * takes an array as argument and returns a new array, with the same elements\n * but with a different order. The argument function MUST NOT modify the order\n * of the original array\n *\n * @param {Function} sortingFunction\n * @return {Transaction} this\n */\nTransaction.prototype.sortOutputs = function(sortingFunction) {\n  var outs = sortingFunction(this.outputs);\n  return this._newOutputOrder(outs);\n};\n\n/**\n * Sort this transaction's inputs, according to a given sorting function that\n * takes an array as argument and returns a new array, with the same elements\n * but with a different order.\n *\n * @param {Function} sortingFunction\n * @return {Transaction} this\n */\nTransaction.prototype.sortInputs = function(sortingFunction) {\n  this.inputs = sortingFunction(this.inputs);\n  this._clearSignatures();\n  return this;\n};\n\nTransaction.prototype._newOutputOrder = function(newOutputs) {\n  var isInvalidSorting = (this.outputs.length !== newOutputs.length ||\n                          _.difference(this.outputs, newOutputs).length !== 0);\n  if (isInvalidSorting) {\n    throw new errors.Transaction.InvalidSorting();\n  }\n\n  if (!_.isUndefined(this._changeIndex)) {\n    var changeOutput = this.outputs[this._changeIndex];\n    this._changeIndex = _.findIndex(newOutputs, changeOutput);\n  }\n\n  this.outputs = newOutputs;\n  return this;\n};\n\nTransaction.prototype.removeInput = function(txId, outputIndex) {\n  var index;\n  if (!outputIndex && _.isNumber(txId)) {\n    index = txId;\n  } else {\n    index = _.findIndex(this.inputs, function(input) {\n      return input.prevTxId.toString('hex') === txId && input.outputIndex === outputIndex;\n    });\n  }\n  if (index < 0 || index >= this.inputs.length) {\n    throw new errors.Transaction.InvalidIndex(index, this.inputs.length);\n  }\n  var input = this.inputs[index];\n  this.inputs = _.without(this.inputs, input);\n  this._inputAmount = undefined;\n  this._updateChangeOutput();\n};\n\n/* Signature handling */\n\n/**\n * Sign the transaction using one or more private keys.\n *\n * It tries to sign each input, verifying that the signature will be valid\n * (matches a public key).\n *\n * @param {Array|String|PrivateKey} privateKey\n * @param {number} sigtype\n * @return {Transaction} this, for chaining\n */\nTransaction.prototype.sign = function(privateKey, sigtype) {\n  $.checkState(this.hasAllUtxoInfo());\n  var self = this;\n  if (_.isArray(privateKey)) {\n    _.each(privateKey, function(privateKey) {\n      self.sign(privateKey, sigtype);\n    });\n    return this;\n  }\n  _.each(this.getSignatures(privateKey, sigtype), function(signature) {\n    self.applySignature(signature);\n  });\n  return this;\n};\n\nTransaction.prototype.getSignatures = function(privKey, sigtype) {\n  privKey = new PrivateKey(privKey);\n  sigtype = sigtype || Signature.SIGHASH_ALL;\n  var transaction = this;\n  var results = [];\n  var hashData = Hash.sha256ripemd160(privKey.publicKey.toBuffer());\n  _.each(this.inputs, function forEachInput(input, index) {\n    _.each(input.getSignatures(transaction, privKey, index, sigtype, hashData), function(signature) {\n      results.push(signature);\n    });\n  });\n  return results;\n};\n\n/**\n * Add a signature to the transaction\n *\n * @param {Object} signature\n * @param {number} signature.inputIndex\n * @param {number} signature.sigtype\n * @param {PublicKey} signature.publicKey\n * @param {Signature} signature.signature\n * @return {Transaction} this, for chaining\n */\nTransaction.prototype.applySignature = function(signature) {\n  this.inputs[signature.inputIndex].addSignature(this, signature);\n  return this;\n};\n\nTransaction.prototype.isFullySigned = function() {\n  _.each(this.inputs, function(input) {\n    if (input.isFullySigned === Input.prototype.isFullySigned) {\n      throw new errors.Transaction.UnableToVerifySignature(\n        'Unrecognized script kind, or not enough information to execute script.' +\n        'This usually happens when creating a transaction from a serialized transaction'\n      );\n    }\n  });\n  return _.all(_.map(this.inputs, function(input) {\n    return input.isFullySigned();\n  }));\n};\n\nTransaction.prototype.isValidSignature = function(signature) {\n  var self = this;\n  if (this.inputs[signature.inputIndex].isValidSignature === Input.prototype.isValidSignature) {\n    throw new errors.Transaction.UnableToVerifySignature(\n      'Unrecognized script kind, or not enough information to execute script.' +\n      'This usually happens when creating a transaction from a serialized transaction'\n    );\n  }\n  return this.inputs[signature.inputIndex].isValidSignature(self, signature);\n};\n\n/**\n * @returns {bool} whether the signature is valid for this transaction input\n */\nTransaction.prototype.verifySignature = function(sig, pubkey, nin, subscript) {\n  return Sighash.verify(this, sig, pubkey, nin, subscript);\n};\n\n/**\n * Check that a transaction passes basic sanity tests. If not, return a string\n * describing the error. This function contains the same logic as\n * CheckTransaction in bitcoin core.\n */\nTransaction.prototype.verify = function() {\n  // Basic checks that don't depend on any context\n  if (this.inputs.length === 0) {\n    return 'transaction txins empty';\n  }\n\n  if (this.outputs.length === 0) {\n    return 'transaction txouts empty';\n  }\n\n  // Check for negative or overflow output values\n  var valueoutbn = new BN(0);\n  for (var i = 0; i < this.outputs.length; i++) {\n    var txout = this.outputs[i];\n\n    if (txout.invalidSatoshis()) {\n      return 'transaction txout ' + i + ' satoshis is invalid';\n    }\n    if (txout._satoshisBN.gt(new BN(Transaction.MAX_MONEY, 10))) {\n      return 'transaction txout ' + i + ' greater than MAX_MONEY';\n    }\n    valueoutbn = valueoutbn.add(txout._satoshisBN);\n    if (valueoutbn.gt(new BN(Transaction.MAX_MONEY))) {\n      return 'transaction txout ' + i + ' total output greater than MAX_MONEY';\n    }\n  }\n\n  // Size limits\n  if (this.toBuffer().length > MAX_BLOCK_SIZE) {\n    return 'transaction over the maximum block size';\n  }\n\n  // Check for duplicate inputs\n  var txinmap = {};\n  for (i = 0; i < this.inputs.length; i++) {\n    var txin = this.inputs[i];\n\n    var inputid = txin.prevTxId + ':' + txin.outputIndex;\n    if (!_.isUndefined(txinmap[inputid])) {\n      return 'transaction input ' + i + ' duplicate input';\n    }\n    txinmap[inputid] = true;\n  }\n\n  var isCoinbase = this.isCoinbase();\n  if (isCoinbase) {\n    var buf = this.inputs[0]._scriptBuffer;\n    if (buf.length < 2 || buf.length > 100) {\n      return 'coinbase transaction script size invalid';\n    }\n  } else {\n    for (i = 0; i < this.inputs.length; i++) {\n      if (this.inputs[i].isNull()) {\n        return 'transaction input ' + i + ' has null input';\n      }\n    }\n  }\n  return true;\n};\n\n/**\n * Analogous to bitcoind's IsCoinBase function in transaction.h\n */\nTransaction.prototype.isCoinbase = function() {\n  return (this.inputs.length === 1 && this.inputs[0].isNull());\n};\n\n/**\n * Determines if this transaction can be replaced in the mempool with another\n * transaction that provides a sufficiently higher fee (RBF).\n */\nTransaction.prototype.isRBF = function() {\n  for (var i = 0; i < this.inputs.length; i++) {\n    var input = this.inputs[i];\n    if (input.sequenceNumber < Input.MAXINT - 1) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/**\n * Enable this transaction to be replaced in the mempool (RBF) if a transaction\n * includes a sufficiently higher fee. It will set the sequenceNumber to\n * DEFAULT_RBF_SEQNUMBER for all inputs if the sequence number does not\n * already enable RBF.\n */\nTransaction.prototype.enableRBF = function() {\n  for (var i = 0; i < this.inputs.length; i++) {\n    var input = this.inputs[i];\n    if (input.sequenceNumber >= Input.MAXINT - 1) {\n      input.sequenceNumber = Input.DEFAULT_RBF_SEQNUMBER;\n    }\n  }\n  return this;\n};\n\nmodule.exports = Transaction;\n"]},"metadata":{},"sourceType":"script"}