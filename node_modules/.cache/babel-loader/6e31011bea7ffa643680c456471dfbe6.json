{"ast":null,"code":"'use strict';\n\nvar _ = require('lodash');\n\nfunction format(message, args) {\n  return message.replace('{0}', args[0]).replace('{1}', args[1]).replace('{2}', args[2]);\n}\n\nvar traverseNode = function traverseNode(parent, errorDefinition) {\n  var NodeError = function NodeError() {\n    if (_.isString(errorDefinition.message)) {\n      this.message = format(errorDefinition.message, arguments);\n    } else if (_.isFunction(errorDefinition.message)) {\n      this.message = errorDefinition.message.apply(null, arguments);\n    } else {\n      throw new Error('Invalid error definition for ' + errorDefinition.name);\n    }\n\n    this.stack = this.message + '\\n' + new Error().stack;\n  };\n\n  NodeError.prototype = Object.create(parent.prototype);\n  NodeError.prototype.name = parent.prototype.name + errorDefinition.name;\n  parent[errorDefinition.name] = NodeError;\n\n  if (errorDefinition.errors) {\n    childDefinitions(NodeError, errorDefinition.errors);\n  }\n\n  return NodeError;\n};\n/* jshint latedef: false */\n\n\nvar childDefinitions = function childDefinitions(parent, _childDefinitions) {\n  _.each(_childDefinitions, function (childDefinition) {\n    traverseNode(parent, childDefinition);\n  });\n};\n/* jshint latedef: true */\n\n\nvar traverseRoot = function traverseRoot(parent, errorsDefinition) {\n  childDefinitions(parent, errorsDefinition);\n  return parent;\n};\n\nvar bitcore = {};\n\nbitcore.Error = function () {\n  this.message = 'Internal error';\n  this.stack = this.message + '\\n' + new Error().stack;\n};\n\nbitcore.Error.prototype = Object.create(Error.prototype);\nbitcore.Error.prototype.name = 'bitcore.Error';\n\nvar data = require('./spec');\n\ntraverseRoot(bitcore.Error, data);\nmodule.exports = bitcore.Error;\n\nmodule.exports.extend = function (spec) {\n  return traverseNode(bitcore.Error, spec);\n};","map":{"version":3,"sources":["/home/user/Desktop/react-wallet/node_modules/bitcore-lib-litecoin/lib/errors/index.js"],"names":["_","require","format","message","args","replace","traverseNode","parent","errorDefinition","NodeError","isString","arguments","isFunction","apply","Error","name","stack","prototype","Object","create","errors","childDefinitions","each","childDefinition","traverseRoot","errorsDefinition","bitcore","data","module","exports","extend","spec"],"mappings":"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","sourcesContent":["'use strict';\n\nvar _ = require('lodash');\n\nfunction format(message, args) {\n  return message\n    .replace('{0}', args[0])\n    .replace('{1}', args[1])\n    .replace('{2}', args[2]);\n}\nvar traverseNode = function(parent, errorDefinition) {\n  var NodeError = function() {\n    if (_.isString(errorDefinition.message)) {\n      this.message = format(errorDefinition.message, arguments);\n    } else if (_.isFunction(errorDefinition.message)) {\n      this.message = errorDefinition.message.apply(null, arguments);\n    } else {\n      throw new Error('Invalid error definition for ' + errorDefinition.name);\n    }\n    this.stack = this.message + '\\n' + (new Error()).stack;\n  };\n  NodeError.prototype = Object.create(parent.prototype);\n  NodeError.prototype.name = parent.prototype.name + errorDefinition.name;\n  parent[errorDefinition.name] = NodeError;\n  if (errorDefinition.errors) {\n    childDefinitions(NodeError, errorDefinition.errors);\n  }\n  return NodeError;\n};\n\n/* jshint latedef: false */\nvar childDefinitions = function(parent, childDefinitions) {\n  _.each(childDefinitions, function(childDefinition) {\n    traverseNode(parent, childDefinition);\n  });\n};\n/* jshint latedef: true */\n\nvar traverseRoot = function(parent, errorsDefinition) {\n  childDefinitions(parent, errorsDefinition);\n  return parent;\n};\n\n\nvar bitcore = {};\nbitcore.Error = function() {\n  this.message = 'Internal error';\n  this.stack = this.message + '\\n' + (new Error()).stack;\n};\nbitcore.Error.prototype = Object.create(Error.prototype);\nbitcore.Error.prototype.name = 'bitcore.Error';\n\n\nvar data = require('./spec');\ntraverseRoot(bitcore.Error, data);\n\nmodule.exports = bitcore.Error;\n\nmodule.exports.extend = function(spec) {\n  return traverseNode(bitcore.Error, spec);\n};\n"]},"metadata":{},"sourceType":"script"}