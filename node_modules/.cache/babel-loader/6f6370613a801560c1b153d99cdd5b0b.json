{"ast":null,"code":"'use strict';\n\nvar crypto = require(\"crypto\");\n/**\n * PDKBF2\n * Credit to: https://github.com/stayradiated/pbkdf2-sha512\n * Copyright (c) 2014, JP Richardson Copyright (c) 2010-2011 Intalio Pte, All Rights Reserved\n */\n\n\nfunction pbkdf2(key, salt, iterations, dkLen) {\n  /* jshint maxstatements: 31 */\n\n  /* jshint maxcomplexity: 9 */\n  var hLen = 64; //SHA512 Mac length\n\n  if (dkLen > (Math.pow(2, 32) - 1) * hLen) {\n    throw Error('Requested key length too long');\n  }\n\n  if (typeof key !== 'string' && !Buffer.isBuffer(key)) {\n    throw new TypeError('key must a string or Buffer');\n  }\n\n  if (typeof salt !== 'string' && !Buffer.isBuffer(salt)) {\n    throw new TypeError('salt must a string or Buffer');\n  }\n\n  if (typeof key === 'string') {\n    key = new Buffer(key);\n  }\n\n  if (typeof salt === 'string') {\n    salt = new Buffer(salt);\n  }\n\n  var DK = new Buffer(dkLen);\n  var U = new Buffer(hLen);\n  var T = new Buffer(hLen);\n  var block1 = new Buffer(salt.length + 4);\n  var l = Math.ceil(dkLen / hLen);\n  var r = dkLen - (l - 1) * hLen;\n  salt.copy(block1, 0, 0, salt.length);\n\n  for (var i = 1; i <= l; i++) {\n    block1[salt.length + 0] = i >> 24 & 0xff;\n    block1[salt.length + 1] = i >> 16 & 0xff;\n    block1[salt.length + 2] = i >> 8 & 0xff;\n    block1[salt.length + 3] = i >> 0 & 0xff;\n    U = crypto.createHmac('sha512', key).update(block1).digest();\n    U.copy(T, 0, 0, hLen);\n\n    for (var j = 1; j < iterations; j++) {\n      U = crypto.createHmac('sha512', key).update(U).digest();\n\n      for (var k = 0; k < hLen; k++) {\n        T[k] ^= U[k];\n      }\n    }\n\n    var destPos = (i - 1) * hLen;\n    var len = i === l ? r : hLen;\n    T.copy(DK, destPos, 0, len);\n  }\n\n  return DK;\n}\n\nmodule.exports = pbkdf2;","map":{"version":3,"sources":["/home/user/Desktop/react-wallet/node_modules/bitcore-mnemonic-litecoin/lib/pbkdf2.js"],"names":["crypto","require","pbkdf2","key","salt","iterations","dkLen","hLen","Math","pow","Error","Buffer","isBuffer","TypeError","DK","U","T","block1","length","l","ceil","r","copy","i","createHmac","update","digest","j","k","destPos","len","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nvar crypto = require(\"crypto\");\n\n/**\n * PDKBF2\n * Credit to: https://github.com/stayradiated/pbkdf2-sha512\n * Copyright (c) 2014, JP Richardson Copyright (c) 2010-2011 Intalio Pte, All Rights Reserved\n */\nfunction pbkdf2(key, salt, iterations, dkLen) {\n  /* jshint maxstatements: 31 */\n  /* jshint maxcomplexity: 9 */\n\n  var hLen = 64; //SHA512 Mac length\n  if (dkLen > (Math.pow(2, 32) - 1) * hLen) {\n    throw Error('Requested key length too long');\n  }\n\n  if (typeof key !== 'string' && !Buffer.isBuffer(key)) {\n    throw new TypeError('key must a string or Buffer');\n  }\n\n  if (typeof salt !== 'string' && !Buffer.isBuffer(salt)) {\n    throw new TypeError('salt must a string or Buffer');\n  }\n\n  if (typeof key === 'string') {\n    key = new Buffer(key);\n  }\n\n  if (typeof salt === 'string') {\n    salt = new Buffer(salt);\n  }\n\n  var DK = new Buffer(dkLen);\n\n  var U = new Buffer(hLen);\n  var T = new Buffer(hLen);\n  var block1 = new Buffer(salt.length + 4);\n\n  var l = Math.ceil(dkLen / hLen);\n  var r = dkLen - (l - 1) * hLen;\n\n  salt.copy(block1, 0, 0, salt.length);\n  for (var i = 1; i <= l; i++) {\n    block1[salt.length + 0] = (i >> 24 & 0xff);\n    block1[salt.length + 1] = (i >> 16 & 0xff);\n    block1[salt.length + 2] = (i >> 8  & 0xff);\n    block1[salt.length + 3] = (i >> 0  & 0xff);\n\n    U = crypto.createHmac('sha512', key).update(block1).digest();\n\n    U.copy(T, 0, 0, hLen);\n\n    for (var j = 1; j < iterations; j++) {\n      U = crypto.createHmac('sha512', key).update(U).digest();\n\n      for (var k = 0; k < hLen; k++) {\n        T[k] ^= U[k];\n      }\n    }\n\n    var destPos = (i - 1) * hLen;\n    var len = (i === l ? r : hLen);\n    T.copy(DK, destPos, 0, len);\n  }\n\n  return DK;\n}\n\nmodule.exports = pbkdf2;\n"]},"metadata":{},"sourceType":"script"}