{"ast":null,"code":"'use strict';\n\nvar _ = require('lodash');\n\nvar BufferUtil = require('./util/buffer');\n\nvar JSUtil = require('./util/js');\n\nvar networks = [];\nvar networkMaps = {};\n/**\n * A network is merely a map containing values that correspond to version\n * numbers for each bitcoin network. Currently only supporting \"livenet\"\n * (a.k.a. \"mainnet\") and \"testnet\".\n * @constructor\n */\n\nfunction Network() {}\n\nNetwork.prototype.toString = function toString() {\n  return this.name;\n};\n/**\n * @function\n * @member Networks#get\n * Retrieves the network associated with a magic number or string.\n * @param {string|number|Network} arg\n * @param {string|Array} keys - if set, only check if the magic number associated with this name matches\n * @return Network\n */\n\n\nfunction get(arg, keys) {\n  if (~networks.indexOf(arg)) {\n    return arg;\n  }\n\n  if (keys) {\n    if (!_.isArray(keys)) {\n      keys = [keys];\n    }\n\n    var containsArg = function (key) {\n      return networks[index][key] === arg;\n    };\n\n    for (var index in networks) {\n      if (_.any(keys, containsArg)) {\n        return networks[index];\n      }\n    }\n\n    return undefined;\n  }\n\n  return networkMaps[arg];\n}\n/**\n * @function\n * @member Networks#add\n * Will add a custom Network\n * @param {Object} data\n * @param {string} data.name - The name of the network\n * @param {string} data.alias - The aliased name of the network\n * @param {Number} data.pubkeyhash - The publickey hash prefix\n * @param {Number} data.privatekey - The privatekey prefix\n * @param {Number} data.scripthash - The scripthash prefix\n * @param {Number} data.xpubkey - The extended public key magic\n * @param {Number} data.xprivkey - The extended private key magic\n * @param {Number} data.networkMagic - The network magic number\n * @param {Number} data.port - The network port\n * @param {Array}  data.dnsSeeds - An array of dns seeds\n * @return Network\n */\n\n\nfunction addNetwork(data) {\n  var network = new Network();\n  JSUtil.defineImmutable(network, {\n    name: data.name,\n    alias: data.alias,\n    pubkeyhash: data.pubkeyhash,\n    privatekey: data.privatekey,\n    scripthash: data.scripthash,\n    xpubkey: data.xpubkey,\n    xprivkey: data.xprivkey\n  });\n\n  if (data.networkMagic) {\n    JSUtil.defineImmutable(network, {\n      networkMagic: BufferUtil.integerAsBuffer(data.networkMagic)\n    });\n  }\n\n  if (data.port) {\n    JSUtil.defineImmutable(network, {\n      port: data.port\n    });\n  }\n\n  if (data.dnsSeeds) {\n    JSUtil.defineImmutable(network, {\n      dnsSeeds: data.dnsSeeds\n    });\n  }\n\n  _.each(network, function (value) {\n    if (!_.isUndefined(value) && !_.isObject(value)) {\n      networkMaps[value] = network;\n    }\n  });\n\n  networks.push(network);\n  return network;\n}\n/**\n * @function\n * @member Networks#remove\n * Will remove a custom network\n * @param {Network} network\n */\n\n\nfunction removeNetwork(network) {\n  for (var i = 0; i < networks.length; i++) {\n    if (networks[i] === network) {\n      networks.splice(i, 1);\n    }\n  }\n\n  for (var key in networkMaps) {\n    if (networkMaps[key] === network) {\n      delete networkMaps[key];\n    }\n  }\n}\n\naddNetwork({\n  name: 'livenet',\n  alias: 'mainnet',\n  pubkeyhash: 0x30,\n  privatekey: 0xb0,\n  scripthash: 0x05,\n  xpubkey: 0x0488b21e,\n  xprivkey: 0x0488ade4,\n  networkMagic: 0xfcc1b7dc,\n  port: 9333,\n  dnsSeeds: ['dnsseed.litecointools.com', 'dnsseed.litecoinpool.org', 'dnsseed.ltc.xurious.com', 'dnsseed.koin-project.com', 'dnsseed.weminemnc.com']\n});\n/**\n * @instance\n * @member Networks#livenet\n */\n\nvar livenet = get('livenet'); //FIXME UPDATE FOR LTC\n\naddNetwork({\n  name: 'testnet',\n  alias: 'regtest',\n  pubkeyhash: 0x6f,\n  privatekey: 0xef,\n  scripthash: 0xc4,\n  xpubkey: 0x043587cf,\n  xprivkey: 0x04358394\n});\n/**\n * @instance\n * @member Networks#testnet\n */\n\nvar testnet = get('testnet'); //FIXME UPDATE FOR LTC\n// Add configurable values for testnet/regtest\n\nvar TESTNET = {\n  PORT: 18333,\n  NETWORK_MAGIC: BufferUtil.integerAsBuffer(0x0b110907),\n  DNS_SEEDS: ['testnet-seed.bitcoin.petertodd.org', 'testnet-seed.bluematt.me', 'testnet-seed.alexykot.me', 'testnet-seed.bitcoin.schildbach.de']\n};\n\nfor (var key in TESTNET) {\n  if (!_.isObject(TESTNET[key])) {\n    networkMaps[TESTNET[key]] = testnet;\n  }\n}\n\nvar REGTEST = {\n  //FIXME UPDATE FOR LTC\n  PORT: 18444,\n  NETWORK_MAGIC: BufferUtil.integerAsBuffer(0xfabfb5da),\n  DNS_SEEDS: []\n};\n\nfor (var key in REGTEST) {\n  if (!_.isObject(REGTEST[key])) {\n    networkMaps[REGTEST[key]] = testnet;\n  }\n}\n\nObject.defineProperty(testnet, 'port', {\n  enumerable: true,\n  configurable: false,\n  get: function () {\n    if (this.regtestEnabled) {\n      return REGTEST.PORT;\n    } else {\n      return TESTNET.PORT;\n    }\n  }\n});\nObject.defineProperty(testnet, 'networkMagic', {\n  enumerable: true,\n  configurable: false,\n  get: function () {\n    if (this.regtestEnabled) {\n      return REGTEST.NETWORK_MAGIC;\n    } else {\n      return TESTNET.NETWORK_MAGIC;\n    }\n  }\n});\nObject.defineProperty(testnet, 'dnsSeeds', {\n  enumerable: true,\n  configurable: false,\n  get: function () {\n    if (this.regtestEnabled) {\n      return REGTEST.DNS_SEEDS;\n    } else {\n      return TESTNET.DNS_SEEDS;\n    }\n  }\n});\n/**\n * @function\n * @member Networks#enableRegtest\n * Will enable regtest features for testnet\n */\n\nfunction enableRegtest() {\n  testnet.regtestEnabled = true;\n}\n/**\n * @function\n * @member Networks#disableRegtest\n * Will disable regtest features for testnet\n */\n\n\nfunction disableRegtest() {\n  testnet.regtestEnabled = false;\n}\n/**\n * @namespace Networks\n */\n\n\nmodule.exports = {\n  add: addNetwork,\n  remove: removeNetwork,\n  defaultNetwork: livenet,\n  livenet: livenet,\n  mainnet: livenet,\n  testnet: testnet,\n  get: get,\n  enableRegtest: enableRegtest,\n  disableRegtest: disableRegtest\n};","map":{"version":3,"sources":["/home/user/Desktop/paper/node_modules/bitcore-lib-litecoin/lib/networks.js"],"names":["_","require","BufferUtil","JSUtil","networks","networkMaps","Network","prototype","toString","name","get","arg","keys","indexOf","isArray","containsArg","key","index","any","undefined","addNetwork","data","network","defineImmutable","alias","pubkeyhash","privatekey","scripthash","xpubkey","xprivkey","networkMagic","integerAsBuffer","port","dnsSeeds","each","value","isUndefined","isObject","push","removeNetwork","i","length","splice","livenet","testnet","TESTNET","PORT","NETWORK_MAGIC","DNS_SEEDS","REGTEST","Object","defineProperty","enumerable","configurable","regtestEnabled","enableRegtest","disableRegtest","module","exports","add","remove","defaultNetwork","mainnet"],"mappings":"AAAA;;AACA,IAAIA,CAAC,GAAGC,OAAO,CAAC,QAAD,CAAf;;AAEA,IAAIC,UAAU,GAAGD,OAAO,CAAC,eAAD,CAAxB;;AACA,IAAIE,MAAM,GAAGF,OAAO,CAAC,WAAD,CAApB;;AACA,IAAIG,QAAQ,GAAG,EAAf;AACA,IAAIC,WAAW,GAAG,EAAlB;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,OAAT,GAAmB,CAAE;;AAErBA,OAAO,CAACC,SAAR,CAAkBC,QAAlB,GAA6B,SAASA,QAAT,GAAoB;AAC/C,SAAO,KAAKC,IAAZ;AACD,CAFD;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,GAAT,CAAaC,GAAb,EAAkBC,IAAlB,EAAwB;AACtB,MAAI,CAACR,QAAQ,CAACS,OAAT,CAAiBF,GAAjB,CAAL,EAA4B;AAC1B,WAAOA,GAAP;AACD;;AACD,MAAIC,IAAJ,EAAU;AACR,QAAI,CAACZ,CAAC,CAACc,OAAF,CAAUF,IAAV,CAAL,EAAsB;AACpBA,MAAAA,IAAI,GAAG,CAACA,IAAD,CAAP;AACD;;AACD,QAAIG,WAAW,GAAG,UAASC,GAAT,EAAc;AAC9B,aAAOZ,QAAQ,CAACa,KAAD,CAAR,CAAgBD,GAAhB,MAAyBL,GAAhC;AACD,KAFD;;AAGA,SAAK,IAAIM,KAAT,IAAkBb,QAAlB,EAA4B;AAC1B,UAAIJ,CAAC,CAACkB,GAAF,CAAMN,IAAN,EAAYG,WAAZ,CAAJ,EAA8B;AAC5B,eAAOX,QAAQ,CAACa,KAAD,CAAf;AACD;AACF;;AACD,WAAOE,SAAP;AACD;;AACD,SAAOd,WAAW,CAACM,GAAD,CAAlB;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASS,UAAT,CAAoBC,IAApB,EAA0B;AAExB,MAAIC,OAAO,GAAG,IAAIhB,OAAJ,EAAd;AAEAH,EAAAA,MAAM,CAACoB,eAAP,CAAuBD,OAAvB,EAAgC;AAC9Bb,IAAAA,IAAI,EAAEY,IAAI,CAACZ,IADmB;AAE9Be,IAAAA,KAAK,EAAEH,IAAI,CAACG,KAFkB;AAG9BC,IAAAA,UAAU,EAAEJ,IAAI,CAACI,UAHa;AAI9BC,IAAAA,UAAU,EAAEL,IAAI,CAACK,UAJa;AAK9BC,IAAAA,UAAU,EAAEN,IAAI,CAACM,UALa;AAM9BC,IAAAA,OAAO,EAAEP,IAAI,CAACO,OANgB;AAO9BC,IAAAA,QAAQ,EAAER,IAAI,CAACQ;AAPe,GAAhC;;AAUA,MAAIR,IAAI,CAACS,YAAT,EAAuB;AACrB3B,IAAAA,MAAM,CAACoB,eAAP,CAAuBD,OAAvB,EAAgC;AAC9BQ,MAAAA,YAAY,EAAE5B,UAAU,CAAC6B,eAAX,CAA2BV,IAAI,CAACS,YAAhC;AADgB,KAAhC;AAGD;;AAED,MAAIT,IAAI,CAACW,IAAT,EAAe;AACb7B,IAAAA,MAAM,CAACoB,eAAP,CAAuBD,OAAvB,EAAgC;AAC9BU,MAAAA,IAAI,EAAEX,IAAI,CAACW;AADmB,KAAhC;AAGD;;AAED,MAAIX,IAAI,CAACY,QAAT,EAAmB;AACjB9B,IAAAA,MAAM,CAACoB,eAAP,CAAuBD,OAAvB,EAAgC;AAC9BW,MAAAA,QAAQ,EAAEZ,IAAI,CAACY;AADe,KAAhC;AAGD;;AACDjC,EAAAA,CAAC,CAACkC,IAAF,CAAOZ,OAAP,EAAgB,UAASa,KAAT,EAAgB;AAC9B,QAAI,CAACnC,CAAC,CAACoC,WAAF,CAAcD,KAAd,CAAD,IAAyB,CAACnC,CAAC,CAACqC,QAAF,CAAWF,KAAX,CAA9B,EAAiD;AAC/C9B,MAAAA,WAAW,CAAC8B,KAAD,CAAX,GAAqBb,OAArB;AACD;AACF,GAJD;;AAMAlB,EAAAA,QAAQ,CAACkC,IAAT,CAAchB,OAAd;AAEA,SAAOA,OAAP;AAED;AAED;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASiB,aAAT,CAAuBjB,OAAvB,EAAgC;AAC9B,OAAK,IAAIkB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGpC,QAAQ,CAACqC,MAA7B,EAAqCD,CAAC,EAAtC,EAA0C;AACxC,QAAIpC,QAAQ,CAACoC,CAAD,CAAR,KAAgBlB,OAApB,EAA6B;AAC3BlB,MAAAA,QAAQ,CAACsC,MAAT,CAAgBF,CAAhB,EAAmB,CAAnB;AACD;AACF;;AACD,OAAK,IAAIxB,GAAT,IAAgBX,WAAhB,EAA6B;AAC3B,QAAIA,WAAW,CAACW,GAAD,CAAX,KAAqBM,OAAzB,EAAkC;AAChC,aAAOjB,WAAW,CAACW,GAAD,CAAlB;AACD;AACF;AACF;;AAEDI,UAAU,CAAC;AACTX,EAAAA,IAAI,EAAE,SADG;AAETe,EAAAA,KAAK,EAAE,SAFE;AAGTC,EAAAA,UAAU,EAAE,IAHH;AAITC,EAAAA,UAAU,EAAE,IAJH;AAKTC,EAAAA,UAAU,EAAE,IALH;AAMTC,EAAAA,OAAO,EAAE,UANA;AAOTC,EAAAA,QAAQ,EAAE,UAPD;AAQTC,EAAAA,YAAY,EAAE,UARL;AASTE,EAAAA,IAAI,EAAE,IATG;AAUTC,EAAAA,QAAQ,EAAE,CACR,2BADQ,EAER,0BAFQ,EAGR,yBAHQ,EAIR,0BAJQ,EAKR,uBALQ;AAVD,CAAD,CAAV;AAmBA;AACA;AACA;AACA;;AACA,IAAIU,OAAO,GAAGjC,GAAG,CAAC,SAAD,CAAjB,C,CAA8B;;AAE9BU,UAAU,CAAC;AACTX,EAAAA,IAAI,EAAE,SADG;AAETe,EAAAA,KAAK,EAAE,SAFE;AAGTC,EAAAA,UAAU,EAAE,IAHH;AAITC,EAAAA,UAAU,EAAE,IAJH;AAKTC,EAAAA,UAAU,EAAE,IALH;AAMTC,EAAAA,OAAO,EAAE,UANA;AAOTC,EAAAA,QAAQ,EAAE;AAPD,CAAD,CAAV;AAUA;AACA;AACA;AACA;;AACA,IAAIe,OAAO,GAAGlC,GAAG,CAAC,SAAD,CAAjB,C,CAA8B;AAE9B;;AAEA,IAAImC,OAAO,GAAG;AACZC,EAAAA,IAAI,EAAE,KADM;AAEZC,EAAAA,aAAa,EAAE7C,UAAU,CAAC6B,eAAX,CAA2B,UAA3B,CAFH;AAGZiB,EAAAA,SAAS,EAAE,CACT,oCADS,EAET,0BAFS,EAGT,0BAHS,EAIT,oCAJS;AAHC,CAAd;;AAWA,KAAK,IAAIhC,GAAT,IAAgB6B,OAAhB,EAAyB;AACvB,MAAI,CAAC7C,CAAC,CAACqC,QAAF,CAAWQ,OAAO,CAAC7B,GAAD,CAAlB,CAAL,EAA+B;AAC7BX,IAAAA,WAAW,CAACwC,OAAO,CAAC7B,GAAD,CAAR,CAAX,GAA4B4B,OAA5B;AACD;AACF;;AAED,IAAIK,OAAO,GAAG;AAAK;AACjBH,EAAAA,IAAI,EAAE,KADM;AAEZC,EAAAA,aAAa,EAAE7C,UAAU,CAAC6B,eAAX,CAA2B,UAA3B,CAFH;AAGZiB,EAAAA,SAAS,EAAE;AAHC,CAAd;;AAMA,KAAK,IAAIhC,GAAT,IAAgBiC,OAAhB,EAAyB;AACvB,MAAI,CAACjD,CAAC,CAACqC,QAAF,CAAWY,OAAO,CAACjC,GAAD,CAAlB,CAAL,EAA+B;AAC7BX,IAAAA,WAAW,CAAC4C,OAAO,CAACjC,GAAD,CAAR,CAAX,GAA4B4B,OAA5B;AACD;AACF;;AAEDM,MAAM,CAACC,cAAP,CAAsBP,OAAtB,EAA+B,MAA/B,EAAuC;AACrCQ,EAAAA,UAAU,EAAE,IADyB;AAErCC,EAAAA,YAAY,EAAE,KAFuB;AAGrC3C,EAAAA,GAAG,EAAE,YAAW;AACd,QAAI,KAAK4C,cAAT,EAAyB;AACvB,aAAOL,OAAO,CAACH,IAAf;AACD,KAFD,MAEO;AACL,aAAOD,OAAO,CAACC,IAAf;AACD;AACF;AAToC,CAAvC;AAYAI,MAAM,CAACC,cAAP,CAAsBP,OAAtB,EAA+B,cAA/B,EAA+C;AAC7CQ,EAAAA,UAAU,EAAE,IADiC;AAE7CC,EAAAA,YAAY,EAAE,KAF+B;AAG7C3C,EAAAA,GAAG,EAAE,YAAW;AACd,QAAI,KAAK4C,cAAT,EAAyB;AACvB,aAAOL,OAAO,CAACF,aAAf;AACD,KAFD,MAEO;AACL,aAAOF,OAAO,CAACE,aAAf;AACD;AACF;AAT4C,CAA/C;AAYAG,MAAM,CAACC,cAAP,CAAsBP,OAAtB,EAA+B,UAA/B,EAA2C;AACzCQ,EAAAA,UAAU,EAAE,IAD6B;AAEzCC,EAAAA,YAAY,EAAE,KAF2B;AAGzC3C,EAAAA,GAAG,EAAE,YAAW;AACd,QAAI,KAAK4C,cAAT,EAAyB;AACvB,aAAOL,OAAO,CAACD,SAAf;AACD,KAFD,MAEO;AACL,aAAOH,OAAO,CAACG,SAAf;AACD;AACF;AATwC,CAA3C;AAYA;AACA;AACA;AACA;AACA;;AACA,SAASO,aAAT,GAAyB;AACvBX,EAAAA,OAAO,CAACU,cAAR,GAAyB,IAAzB;AACD;AAED;AACA;AACA;AACA;AACA;;;AACA,SAASE,cAAT,GAA0B;AACxBZ,EAAAA,OAAO,CAACU,cAAR,GAAyB,KAAzB;AACD;AAED;AACA;AACA;;;AACAG,MAAM,CAACC,OAAP,GAAiB;AACfC,EAAAA,GAAG,EAAEvC,UADU;AAEfwC,EAAAA,MAAM,EAAErB,aAFO;AAGfsB,EAAAA,cAAc,EAAElB,OAHD;AAIfA,EAAAA,OAAO,EAAEA,OAJM;AAKfmB,EAAAA,OAAO,EAAEnB,OALM;AAMfC,EAAAA,OAAO,EAAEA,OANM;AAOflC,EAAAA,GAAG,EAAEA,GAPU;AAQf6C,EAAAA,aAAa,EAAEA,aARA;AASfC,EAAAA,cAAc,EAAEA;AATD,CAAjB","sourcesContent":["'use strict';\nvar _ = require('lodash');\n\nvar BufferUtil = require('./util/buffer');\nvar JSUtil = require('./util/js');\nvar networks = [];\nvar networkMaps = {};\n\n/**\n * A network is merely a map containing values that correspond to version\n * numbers for each bitcoin network. Currently only supporting \"livenet\"\n * (a.k.a. \"mainnet\") and \"testnet\".\n * @constructor\n */\nfunction Network() {}\n\nNetwork.prototype.toString = function toString() {\n  return this.name;\n};\n\n/**\n * @function\n * @member Networks#get\n * Retrieves the network associated with a magic number or string.\n * @param {string|number|Network} arg\n * @param {string|Array} keys - if set, only check if the magic number associated with this name matches\n * @return Network\n */\nfunction get(arg, keys) {\n  if (~networks.indexOf(arg)) {\n    return arg;\n  }\n  if (keys) {\n    if (!_.isArray(keys)) {\n      keys = [keys];\n    }\n    var containsArg = function(key) {\n      return networks[index][key] === arg;\n    };\n    for (var index in networks) {\n      if (_.any(keys, containsArg)) {\n        return networks[index];\n      }\n    }\n    return undefined;\n  }\n  return networkMaps[arg];\n}\n\n/**\n * @function\n * @member Networks#add\n * Will add a custom Network\n * @param {Object} data\n * @param {string} data.name - The name of the network\n * @param {string} data.alias - The aliased name of the network\n * @param {Number} data.pubkeyhash - The publickey hash prefix\n * @param {Number} data.privatekey - The privatekey prefix\n * @param {Number} data.scripthash - The scripthash prefix\n * @param {Number} data.xpubkey - The extended public key magic\n * @param {Number} data.xprivkey - The extended private key magic\n * @param {Number} data.networkMagic - The network magic number\n * @param {Number} data.port - The network port\n * @param {Array}  data.dnsSeeds - An array of dns seeds\n * @return Network\n */\nfunction addNetwork(data) {\n\n  var network = new Network();\n\n  JSUtil.defineImmutable(network, {\n    name: data.name,\n    alias: data.alias,\n    pubkeyhash: data.pubkeyhash,\n    privatekey: data.privatekey,\n    scripthash: data.scripthash,\n    xpubkey: data.xpubkey,\n    xprivkey: data.xprivkey\n  });\n\n  if (data.networkMagic) {\n    JSUtil.defineImmutable(network, {\n      networkMagic: BufferUtil.integerAsBuffer(data.networkMagic)\n    });\n  }\n\n  if (data.port) {\n    JSUtil.defineImmutable(network, {\n      port: data.port\n    });\n  }\n\n  if (data.dnsSeeds) {\n    JSUtil.defineImmutable(network, {\n      dnsSeeds: data.dnsSeeds\n    });\n  }\n  _.each(network, function(value) {\n    if (!_.isUndefined(value) && !_.isObject(value)) {\n      networkMaps[value] = network;\n    }\n  });\n\n  networks.push(network);\n\n  return network;\n\n}\n\n/**\n * @function\n * @member Networks#remove\n * Will remove a custom network\n * @param {Network} network\n */\nfunction removeNetwork(network) {\n  for (var i = 0; i < networks.length; i++) {\n    if (networks[i] === network) {\n      networks.splice(i, 1);\n    }\n  }\n  for (var key in networkMaps) {\n    if (networkMaps[key] === network) {\n      delete networkMaps[key];\n    }\n  }\n}\n\naddNetwork({\n  name: 'livenet',\n  alias: 'mainnet',\n  pubkeyhash: 0x30,\n  privatekey: 0xb0,\n  scripthash: 0x05,\n  xpubkey: 0x0488b21e,\n  xprivkey: 0x0488ade4,\n  networkMagic: 0xfcc1b7dc,\n  port: 9333,\n  dnsSeeds: [\n    'dnsseed.litecointools.com',\n    'dnsseed.litecoinpool.org',\n    'dnsseed.ltc.xurious.com',\n    'dnsseed.koin-project.com',\n    'dnsseed.weminemnc.com'\n  ]\n});\n\n/**\n * @instance\n * @member Networks#livenet\n */\nvar livenet = get('livenet'); //FIXME UPDATE FOR LTC\n\naddNetwork({\n  name: 'testnet',\n  alias: 'regtest',\n  pubkeyhash: 0x6f,\n  privatekey: 0xef,\n  scripthash: 0xc4,\n  xpubkey: 0x043587cf,\n  xprivkey: 0x04358394\n});\n\n/**\n * @instance\n * @member Networks#testnet\n */\nvar testnet = get('testnet'); //FIXME UPDATE FOR LTC\n\n// Add configurable values for testnet/regtest\n\nvar TESTNET = {\n  PORT: 18333,\n  NETWORK_MAGIC: BufferUtil.integerAsBuffer(0x0b110907),\n  DNS_SEEDS: [\n    'testnet-seed.bitcoin.petertodd.org',\n    'testnet-seed.bluematt.me',\n    'testnet-seed.alexykot.me',\n    'testnet-seed.bitcoin.schildbach.de'\n  ]\n};\n\nfor (var key in TESTNET) {\n  if (!_.isObject(TESTNET[key])) {\n    networkMaps[TESTNET[key]] = testnet;\n  }\n}\n\nvar REGTEST = {    //FIXME UPDATE FOR LTC\n  PORT: 18444,\n  NETWORK_MAGIC: BufferUtil.integerAsBuffer(0xfabfb5da),\n  DNS_SEEDS: []\n};\n\nfor (var key in REGTEST) {\n  if (!_.isObject(REGTEST[key])) {\n    networkMaps[REGTEST[key]] = testnet;\n  }\n}\n\nObject.defineProperty(testnet, 'port', {\n  enumerable: true,\n  configurable: false,\n  get: function() {\n    if (this.regtestEnabled) {\n      return REGTEST.PORT;\n    } else {\n      return TESTNET.PORT;\n    }\n  }\n});\n\nObject.defineProperty(testnet, 'networkMagic', {\n  enumerable: true,\n  configurable: false,\n  get: function() {\n    if (this.regtestEnabled) {\n      return REGTEST.NETWORK_MAGIC;\n    } else {\n      return TESTNET.NETWORK_MAGIC;\n    }\n  }\n});\n\nObject.defineProperty(testnet, 'dnsSeeds', {\n  enumerable: true,\n  configurable: false,\n  get: function() {\n    if (this.regtestEnabled) {\n      return REGTEST.DNS_SEEDS;\n    } else {\n      return TESTNET.DNS_SEEDS;\n    }\n  }\n});\n\n/**\n * @function\n * @member Networks#enableRegtest\n * Will enable regtest features for testnet\n */\nfunction enableRegtest() {\n  testnet.regtestEnabled = true;\n}\n\n/**\n * @function\n * @member Networks#disableRegtest\n * Will disable regtest features for testnet\n */\nfunction disableRegtest() {\n  testnet.regtestEnabled = false;\n}\n\n/**\n * @namespace Networks\n */\nmodule.exports = {\n  add: addNetwork,\n  remove: removeNetwork,\n  defaultNetwork: livenet,\n  livenet: livenet,\n  mainnet: livenet,\n  testnet: testnet,\n  get: get,\n  enableRegtest: enableRegtest,\n  disableRegtest: disableRegtest\n};\n"]},"metadata":{},"sourceType":"script"}