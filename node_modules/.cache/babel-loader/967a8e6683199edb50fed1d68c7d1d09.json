{"ast":null,"code":"'use strict';\n\nvar _ = require('lodash');\n\nvar inherits = require('inherits');\n\nvar Input = require('./input');\n\nvar Output = require('../output');\n\nvar $ = require('../../util/preconditions');\n\nvar Script = require('../../script');\n\nvar Signature = require('../../crypto/signature');\n\nvar Sighash = require('../sighash');\n\nvar PublicKey = require('../../publickey');\n\nvar BufferUtil = require('../../util/buffer');\n\nvar TransactionSignature = require('../signature');\n/**\n * @constructor\n */\n\n\nfunction MultiSigScriptHashInput(input, pubkeys, threshold, signatures) {\n  Input.apply(this, arguments);\n  var self = this;\n  pubkeys = pubkeys || input.publicKeys;\n  threshold = threshold || input.threshold;\n  signatures = signatures || input.signatures;\n  this.publicKeys = _.sortBy(pubkeys, function (publicKey) {\n    return publicKey.toString('hex');\n  });\n  this.redeemScript = Script.buildMultisigOut(this.publicKeys, threshold);\n  $.checkState(Script.buildScriptHashOut(this.redeemScript).equals(this.output.script), 'Provided public keys don\\'t hash to the provided output');\n  this.publicKeyIndex = {};\n\n  _.each(this.publicKeys, function (publicKey, index) {\n    self.publicKeyIndex[publicKey.toString()] = index;\n  });\n\n  this.threshold = threshold; // Empty array of signatures\n\n  this.signatures = signatures ? this._deserializeSignatures(signatures) : new Array(this.publicKeys.length);\n}\n\ninherits(MultiSigScriptHashInput, Input);\n\nMultiSigScriptHashInput.prototype.toObject = function () {\n  var obj = Input.prototype.toObject.apply(this, arguments);\n  obj.threshold = this.threshold;\n  obj.publicKeys = _.map(this.publicKeys, function (publicKey) {\n    return publicKey.toString();\n  });\n  obj.signatures = this._serializeSignatures();\n  return obj;\n};\n\nMultiSigScriptHashInput.prototype._deserializeSignatures = function (signatures) {\n  return _.map(signatures, function (signature) {\n    if (!signature) {\n      return undefined;\n    }\n\n    return new TransactionSignature(signature);\n  });\n};\n\nMultiSigScriptHashInput.prototype._serializeSignatures = function () {\n  return _.map(this.signatures, function (signature) {\n    if (!signature) {\n      return undefined;\n    }\n\n    return signature.toObject();\n  });\n};\n\nMultiSigScriptHashInput.prototype.getSignatures = function (transaction, privateKey, index, sigtype) {\n  $.checkState(this.output instanceof Output);\n  sigtype = sigtype || Signature.SIGHASH_ALL;\n  var self = this;\n  var results = [];\n\n  _.each(this.publicKeys, function (publicKey) {\n    if (publicKey.toString() === privateKey.publicKey.toString()) {\n      results.push(new TransactionSignature({\n        publicKey: privateKey.publicKey,\n        prevTxId: self.prevTxId,\n        outputIndex: self.outputIndex,\n        inputIndex: index,\n        signature: Sighash.sign(transaction, privateKey, sigtype, index, self.redeemScript),\n        sigtype: sigtype\n      }));\n    }\n  });\n\n  return results;\n};\n\nMultiSigScriptHashInput.prototype.addSignature = function (transaction, signature) {\n  $.checkState(!this.isFullySigned(), 'All needed signatures have already been added');\n  $.checkArgument(!_.isUndefined(this.publicKeyIndex[signature.publicKey.toString()]), 'Signature has no matching public key');\n  $.checkState(this.isValidSignature(transaction, signature));\n  this.signatures[this.publicKeyIndex[signature.publicKey.toString()]] = signature;\n\n  this._updateScript();\n\n  return this;\n};\n\nMultiSigScriptHashInput.prototype._updateScript = function () {\n  this.setScript(Script.buildP2SHMultisigIn(this.publicKeys, this.threshold, this._createSignatures(), {\n    cachedMultisig: this.redeemScript\n  }));\n  return this;\n};\n\nMultiSigScriptHashInput.prototype._createSignatures = function () {\n  return _.map(_.filter(this.signatures, function (signature) {\n    return !_.isUndefined(signature);\n  }), function (signature) {\n    return BufferUtil.concat([signature.signature.toDER(), BufferUtil.integerAsSingleByteBuffer(signature.sigtype)]);\n  });\n};\n\nMultiSigScriptHashInput.prototype.clearSignatures = function () {\n  this.signatures = new Array(this.publicKeys.length);\n\n  this._updateScript();\n};\n\nMultiSigScriptHashInput.prototype.isFullySigned = function () {\n  return this.countSignatures() === this.threshold;\n};\n\nMultiSigScriptHashInput.prototype.countMissingSignatures = function () {\n  return this.threshold - this.countSignatures();\n};\n\nMultiSigScriptHashInput.prototype.countSignatures = function () {\n  return _.reduce(this.signatures, function (sum, signature) {\n    return sum + !!signature;\n  }, 0);\n};\n\nMultiSigScriptHashInput.prototype.publicKeysWithoutSignature = function () {\n  var self = this;\n  return _.filter(this.publicKeys, function (publicKey) {\n    return !self.signatures[self.publicKeyIndex[publicKey.toString()]];\n  });\n};\n\nMultiSigScriptHashInput.prototype.isValidSignature = function (transaction, signature) {\n  // FIXME: Refactor signature so this is not necessary\n  signature.signature.nhashtype = signature.sigtype;\n  return Sighash.verify(transaction, signature.signature, signature.publicKey, signature.inputIndex, this.redeemScript);\n};\n\nMultiSigScriptHashInput.OPCODES_SIZE = 7; // serialized size (<=3) + 0 .. N .. M OP_CHECKMULTISIG\n\nMultiSigScriptHashInput.SIGNATURE_SIZE = 74; // size (1) + DER (<=72) + sighash (1)\n\nMultiSigScriptHashInput.PUBKEY_SIZE = 34; // size (1) + DER (<=33)\n\nMultiSigScriptHashInput.prototype._estimateSize = function () {\n  return MultiSigScriptHashInput.OPCODES_SIZE + this.threshold * MultiSigScriptHashInput.SIGNATURE_SIZE + this.publicKeys.length * MultiSigScriptHashInput.PUBKEY_SIZE;\n};\n\nmodule.exports = MultiSigScriptHashInput;","map":{"version":3,"sources":["/home/user/Desktop/react-wallet/node_modules/bitcore-lib-litecoin/lib/transaction/input/multisigscripthash.js"],"names":["_","require","inherits","Input","Output","$","Script","Signature","Sighash","PublicKey","BufferUtil","TransactionSignature","MultiSigScriptHashInput","input","pubkeys","threshold","signatures","apply","arguments","self","publicKeys","sortBy","publicKey","toString","redeemScript","buildMultisigOut","checkState","buildScriptHashOut","equals","output","script","publicKeyIndex","each","index","_deserializeSignatures","Array","length","prototype","toObject","obj","map","_serializeSignatures","signature","undefined","getSignatures","transaction","privateKey","sigtype","SIGHASH_ALL","results","push","prevTxId","outputIndex","inputIndex","sign","addSignature","isFullySigned","checkArgument","isUndefined","isValidSignature","_updateScript","setScript","buildP2SHMultisigIn","_createSignatures","cachedMultisig","filter","concat","toDER","integerAsSingleByteBuffer","clearSignatures","countSignatures","countMissingSignatures","reduce","sum","publicKeysWithoutSignature","nhashtype","verify","OPCODES_SIZE","SIGNATURE_SIZE","PUBKEY_SIZE","_estimateSize","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nvar _ = require('lodash');\nvar inherits = require('inherits');\nvar Input = require('./input');\nvar Output = require('../output');\nvar $ = require('../../util/preconditions');\n\nvar Script = require('../../script');\nvar Signature = require('../../crypto/signature');\nvar Sighash = require('../sighash');\nvar PublicKey = require('../../publickey');\nvar BufferUtil = require('../../util/buffer');\nvar TransactionSignature = require('../signature');\n\n/**\n * @constructor\n */\nfunction MultiSigScriptHashInput(input, pubkeys, threshold, signatures) {\n  Input.apply(this, arguments);\n  var self = this;\n  pubkeys = pubkeys || input.publicKeys;\n  threshold = threshold || input.threshold;\n  signatures = signatures || input.signatures;\n  this.publicKeys = _.sortBy(pubkeys, function(publicKey) { return publicKey.toString('hex'); });\n  this.redeemScript = Script.buildMultisigOut(this.publicKeys, threshold);\n  $.checkState(Script.buildScriptHashOut(this.redeemScript).equals(this.output.script),\n               'Provided public keys don\\'t hash to the provided output');\n  this.publicKeyIndex = {};\n  _.each(this.publicKeys, function(publicKey, index) {\n    self.publicKeyIndex[publicKey.toString()] = index;\n  });\n  this.threshold = threshold;\n  // Empty array of signatures\n  this.signatures = signatures ? this._deserializeSignatures(signatures) : new Array(this.publicKeys.length);\n}\ninherits(MultiSigScriptHashInput, Input);\n\nMultiSigScriptHashInput.prototype.toObject = function() {\n  var obj = Input.prototype.toObject.apply(this, arguments);\n  obj.threshold = this.threshold;\n  obj.publicKeys = _.map(this.publicKeys, function(publicKey) { return publicKey.toString(); });\n  obj.signatures = this._serializeSignatures();\n  return obj;\n};\n\nMultiSigScriptHashInput.prototype._deserializeSignatures = function(signatures) {\n  return _.map(signatures, function(signature) {\n    if (!signature) {\n      return undefined;\n    }\n    return new TransactionSignature(signature);\n  });\n};\n\nMultiSigScriptHashInput.prototype._serializeSignatures = function() {\n  return _.map(this.signatures, function(signature) {\n    if (!signature) {\n      return undefined;\n    }\n    return signature.toObject();\n  });\n};\n\nMultiSigScriptHashInput.prototype.getSignatures = function(transaction, privateKey, index, sigtype) {\n  $.checkState(this.output instanceof Output);\n  sigtype = sigtype || Signature.SIGHASH_ALL;\n\n  var self = this;\n  var results = [];\n  _.each(this.publicKeys, function(publicKey) {\n    if (publicKey.toString() === privateKey.publicKey.toString()) {\n      results.push(new TransactionSignature({\n        publicKey: privateKey.publicKey,\n        prevTxId: self.prevTxId,\n        outputIndex: self.outputIndex,\n        inputIndex: index,\n        signature: Sighash.sign(transaction, privateKey, sigtype, index, self.redeemScript),\n        sigtype: sigtype\n      }));\n    }\n  });\n  return results;\n};\n\nMultiSigScriptHashInput.prototype.addSignature = function(transaction, signature) {\n  $.checkState(!this.isFullySigned(), 'All needed signatures have already been added');\n  $.checkArgument(!_.isUndefined(this.publicKeyIndex[signature.publicKey.toString()]),\n                  'Signature has no matching public key');\n  $.checkState(this.isValidSignature(transaction, signature));\n  this.signatures[this.publicKeyIndex[signature.publicKey.toString()]] = signature;\n  this._updateScript();\n  return this;\n};\n\nMultiSigScriptHashInput.prototype._updateScript = function() {\n  this.setScript(Script.buildP2SHMultisigIn(\n    this.publicKeys,\n    this.threshold,\n    this._createSignatures(),\n    { cachedMultisig: this.redeemScript }\n  ));\n  return this;\n};\n\nMultiSigScriptHashInput.prototype._createSignatures = function() {\n  return _.map(\n    _.filter(this.signatures, function(signature) { return !_.isUndefined(signature); }),\n    function(signature) {\n      return BufferUtil.concat([\n        signature.signature.toDER(),\n        BufferUtil.integerAsSingleByteBuffer(signature.sigtype)\n      ]);\n    }\n  );\n};\n\nMultiSigScriptHashInput.prototype.clearSignatures = function() {\n  this.signatures = new Array(this.publicKeys.length);\n  this._updateScript();\n};\n\nMultiSigScriptHashInput.prototype.isFullySigned = function() {\n  return this.countSignatures() === this.threshold;\n};\n\nMultiSigScriptHashInput.prototype.countMissingSignatures = function() {\n  return this.threshold - this.countSignatures();\n};\n\nMultiSigScriptHashInput.prototype.countSignatures = function() {\n  return _.reduce(this.signatures, function(sum, signature) {\n    return sum + (!!signature);\n  }, 0);\n};\n\nMultiSigScriptHashInput.prototype.publicKeysWithoutSignature = function() {\n  var self = this;\n  return _.filter(this.publicKeys, function(publicKey) {\n    return !(self.signatures[self.publicKeyIndex[publicKey.toString()]]);\n  });\n};\n\nMultiSigScriptHashInput.prototype.isValidSignature = function(transaction, signature) {\n  // FIXME: Refactor signature so this is not necessary\n  signature.signature.nhashtype = signature.sigtype;\n  return Sighash.verify(\n      transaction,\n      signature.signature,\n      signature.publicKey,\n      signature.inputIndex,\n      this.redeemScript\n  );\n};\n\nMultiSigScriptHashInput.OPCODES_SIZE = 7; // serialized size (<=3) + 0 .. N .. M OP_CHECKMULTISIG\nMultiSigScriptHashInput.SIGNATURE_SIZE = 74; // size (1) + DER (<=72) + sighash (1)\nMultiSigScriptHashInput.PUBKEY_SIZE = 34; // size (1) + DER (<=33)\n\nMultiSigScriptHashInput.prototype._estimateSize = function() {\n  return MultiSigScriptHashInput.OPCODES_SIZE +\n    this.threshold * MultiSigScriptHashInput.SIGNATURE_SIZE +\n    this.publicKeys.length * MultiSigScriptHashInput.PUBKEY_SIZE;\n};\n\nmodule.exports = MultiSigScriptHashInput;\n"]},"metadata":{},"sourceType":"script"}