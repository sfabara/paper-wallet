{"ast":null,"code":"'use strict';\n\nvar utils = exports;\n\nutils.assert = function assert(val, msg) {\n  if (!val) throw new Error(msg || 'Assertion failed');\n};\n\nfunction toArray(msg, enc) {\n  if (Array.isArray(msg)) return msg.slice();\n  if (!msg) return [];\n  var res = [];\n\n  if (typeof msg !== 'string') {\n    for (var i = 0; i < msg.length; i++) {\n      res[i] = msg[i] | 0;\n    }\n\n    return res;\n  }\n\n  if (!enc) {\n    for (var i = 0; i < msg.length; i++) {\n      var c = msg.charCodeAt(i);\n      var hi = c >> 8;\n      var lo = c & 0xff;\n      if (hi) res.push(hi, lo);else res.push(lo);\n    }\n  } else if (enc === 'hex') {\n    msg = msg.replace(/[^a-z0-9]+/ig, '');\n    if (msg.length % 2 !== 0) msg = '0' + msg;\n\n    for (var i = 0; i < msg.length; i += 2) {\n      res.push(parseInt(msg[i] + msg[i + 1], 16));\n    }\n  }\n\n  return res;\n}\n\nutils.toArray = toArray;\n\nfunction zero2(word) {\n  if (word.length === 1) return '0' + word;else return word;\n}\n\nutils.zero2 = zero2;\n\nfunction toHex(msg) {\n  var res = '';\n\n  for (var i = 0; i < msg.length; i++) {\n    res += zero2(msg[i].toString(16));\n  }\n\n  return res;\n}\n\nutils.toHex = toHex;\n\nutils.encode = function encode(arr, enc) {\n  if (enc === 'hex') return toHex(arr);else return arr;\n}; // Represent num in a w-NAF form\n\n\nfunction getNAF(num, w) {\n  var naf = [];\n  var ws = 1 << w + 1;\n  var k = num.clone();\n\n  while (k.cmpn(1) >= 0) {\n    var z;\n\n    if (k.isOdd()) {\n      var mod = k.andln(ws - 1);\n      if (mod > (ws >> 1) - 1) z = (ws >> 1) - mod;else z = mod;\n      k.isubn(z);\n    } else {\n      z = 0;\n    }\n\n    naf.push(z); // Optimization, shift by word if possible\n\n    var shift = k.cmpn(0) !== 0 && k.andln(ws - 1) === 0 ? w + 1 : 1;\n\n    for (var i = 1; i < shift; i++) {\n      naf.push(0);\n    }\n\n    k.ishrn(shift);\n  }\n\n  return naf;\n}\n\nutils.getNAF = getNAF; // Represent k1, k2 in a Joint Sparse Form\n\nfunction getJSF(k1, k2) {\n  var jsf = [[], []];\n  k1 = k1.clone();\n  k2 = k2.clone();\n  var d1 = 0;\n  var d2 = 0;\n\n  while (k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0) {\n    // First phase\n    var m14 = k1.andln(3) + d1 & 3;\n    var m24 = k2.andln(3) + d2 & 3;\n    if (m14 === 3) m14 = -1;\n    if (m24 === 3) m24 = -1;\n    var u1;\n\n    if ((m14 & 1) === 0) {\n      u1 = 0;\n    } else {\n      var m8 = k1.andln(7) + d1 & 7;\n      if ((m8 === 3 || m8 === 5) && m24 === 2) u1 = -m14;else u1 = m14;\n    }\n\n    jsf[0].push(u1);\n    var u2;\n\n    if ((m24 & 1) === 0) {\n      u2 = 0;\n    } else {\n      var m8 = k2.andln(7) + d2 & 7;\n      if ((m8 === 3 || m8 === 5) && m14 === 2) u2 = -m24;else u2 = m24;\n    }\n\n    jsf[1].push(u2); // Second phase\n\n    if (2 * d1 === u1 + 1) d1 = 1 - d1;\n    if (2 * d2 === u2 + 1) d2 = 1 - d2;\n    k1.ishrn(1);\n    k2.ishrn(1);\n  }\n\n  return jsf;\n}\n\nutils.getJSF = getJSF;","map":{"version":3,"sources":["/home/user/Desktop/react-wallet/node_modules/bitcore-lib-litecoin/node_modules/elliptic/lib/elliptic/utils.js"],"names":["utils","exports","assert","val","msg","Error","toArray","enc","Array","isArray","slice","res","i","length","c","charCodeAt","hi","lo","push","replace","parseInt","zero2","word","toHex","toString","encode","arr","getNAF","num","w","naf","ws","k","clone","cmpn","z","isOdd","mod","andln","isubn","shift","ishrn","getJSF","k1","k2","jsf","d1","d2","m14","m24","u1","m8","u2"],"mappings":"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","sourcesContent":["'use strict';\n\nvar utils = exports;\n\nutils.assert = function assert(val, msg) {\n  if (!val)\n    throw new Error(msg || 'Assertion failed');\n};\n\nfunction toArray(msg, enc) {\n  if (Array.isArray(msg))\n    return msg.slice();\n  if (!msg)\n    return [];\n  var res = [];\n  if (typeof msg !== 'string') {\n    for (var i = 0; i < msg.length; i++)\n      res[i] = msg[i] | 0;\n    return res;\n  }\n  if (!enc) {\n    for (var i = 0; i < msg.length; i++) {\n      var c = msg.charCodeAt(i);\n      var hi = c >> 8;\n      var lo = c & 0xff;\n      if (hi)\n        res.push(hi, lo);\n      else\n        res.push(lo);\n    }\n  } else if (enc === 'hex') {\n    msg = msg.replace(/[^a-z0-9]+/ig, '');\n    if (msg.length % 2 !== 0)\n      msg = '0' + msg;\n    for (var i = 0; i < msg.length; i += 2)\n      res.push(parseInt(msg[i] + msg[i + 1], 16));\n  }\n  return res;\n}\nutils.toArray = toArray;\n\nfunction zero2(word) {\n  if (word.length === 1)\n    return '0' + word;\n  else\n    return word;\n}\nutils.zero2 = zero2;\n\nfunction toHex(msg) {\n  var res = '';\n  for (var i = 0; i < msg.length; i++)\n    res += zero2(msg[i].toString(16));\n  return res;\n}\nutils.toHex = toHex;\n\nutils.encode = function encode(arr, enc) {\n  if (enc === 'hex')\n    return toHex(arr);\n  else\n    return arr;\n};\n\n// Represent num in a w-NAF form\nfunction getNAF(num, w) {\n  var naf = [];\n  var ws = 1 << (w + 1);\n  var k = num.clone();\n  while (k.cmpn(1) >= 0) {\n    var z;\n    if (k.isOdd()) {\n      var mod = k.andln(ws - 1);\n      if (mod > (ws >> 1) - 1)\n        z = (ws >> 1) - mod;\n      else\n        z = mod;\n      k.isubn(z);\n    } else {\n      z = 0;\n    }\n    naf.push(z);\n\n    // Optimization, shift by word if possible\n    var shift = (k.cmpn(0) !== 0 && k.andln(ws - 1) === 0) ? (w + 1) : 1;\n    for (var i = 1; i < shift; i++)\n      naf.push(0);\n    k.ishrn(shift);\n  }\n\n  return naf;\n}\nutils.getNAF = getNAF;\n\n// Represent k1, k2 in a Joint Sparse Form\nfunction getJSF(k1, k2) {\n  var jsf = [\n    [],\n    []\n  ];\n\n  k1 = k1.clone();\n  k2 = k2.clone();\n  var d1 = 0;\n  var d2 = 0;\n  while (k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0) {\n\n    // First phase\n    var m14 = (k1.andln(3) + d1) & 3;\n    var m24 = (k2.andln(3) + d2) & 3;\n    if (m14 === 3)\n      m14 = -1;\n    if (m24 === 3)\n      m24 = -1;\n    var u1;\n    if ((m14 & 1) === 0) {\n      u1 = 0;\n    } else {\n      var m8 = (k1.andln(7) + d1) & 7;\n      if ((m8 === 3 || m8 === 5) && m24 === 2)\n        u1 = -m14;\n      else\n        u1 = m14;\n    }\n    jsf[0].push(u1);\n\n    var u2;\n    if ((m24 & 1) === 0) {\n      u2 = 0;\n    } else {\n      var m8 = (k2.andln(7) + d2) & 7;\n      if ((m8 === 3 || m8 === 5) && m14 === 2)\n        u2 = -m24;\n      else\n        u2 = m24;\n    }\n    jsf[1].push(u2);\n\n    // Second phase\n    if (2 * d1 === u1 + 1)\n      d1 = 1 - d1;\n    if (2 * d2 === u2 + 1)\n      d2 = 1 - d2;\n    k1.ishrn(1);\n    k2.ishrn(1);\n  }\n\n  return jsf;\n}\nutils.getJSF = getJSF;\n"]},"metadata":{},"sourceType":"script"}