{"ast":null,"code":"'use strict';\n\nvar _ = require('lodash');\n\nvar errors = require('./errors');\n\nvar $ = require('./util/preconditions');\n\nvar UNITS = {\n  'BTC': [1e8, 8],\n  'mBTC': [1e5, 5],\n  'uBTC': [1e2, 2],\n  'bits': [1e2, 2],\n  'satoshis': [1, 0]\n};\n/**\n * Utility for handling and converting bitcoins units. The supported units are\n * BTC, mBTC, bits (also named uBTC) and satoshis. A unit instance can be created with an\n * amount and a unit code, or alternatively using static methods like {fromBTC}.\n * It also allows to be created from a fiat amount and the exchange rate, or\n * alternatively using the {fromFiat} static method.\n * You can consult for different representation of a unit instance using it's\n * {to} method, the fixed unit methods like {toSatoshis} or alternatively using\n * the unit accessors. It also can be converted to a fiat amount by providing the\n * corresponding BTC/fiat exchange rate.\n *\n * @example\n * ```javascript\n * var sats = Unit.fromBTC(1.3).toSatoshis();\n * var mili = Unit.fromBits(1.3).to(Unit.mBTC);\n * var bits = Unit.fromFiat(1.3, 350).bits;\n * var btc = new Unit(1.3, Unit.bits).BTC;\n * ```\n *\n * @param {Number} amount - The amount to be represented\n * @param {String|Number} code - The unit of the amount or the exchange rate\n * @returns {Unit} A new instance of an Unit\n * @constructor\n */\n\nfunction Unit(amount, code) {\n  if (!(this instanceof Unit)) {\n    return new Unit(amount, code);\n  } // convert fiat to BTC\n\n\n  if (_.isNumber(code)) {\n    if (code <= 0) {\n      throw new errors.Unit.InvalidRate(code);\n    }\n\n    amount = amount / code;\n    code = Unit.BTC;\n  }\n\n  this._value = this._from(amount, code);\n  var self = this;\n\n  var defineAccesor = function defineAccesor(key) {\n    Object.defineProperty(self, key, {\n      get: function get() {\n        return self.to(key);\n      },\n      enumerable: true\n    });\n  };\n\n  Object.keys(UNITS).forEach(defineAccesor);\n}\n\nObject.keys(UNITS).forEach(function (key) {\n  Unit[key] = key;\n});\n/**\n * Returns a Unit instance created from JSON string or object\n *\n * @param {String|Object} json - JSON with keys: amount and code\n * @returns {Unit} A Unit instance\n */\n\nUnit.fromObject = function fromObject(data) {\n  $.checkArgument(_.isObject(data), 'Argument is expected to be an object');\n  return new Unit(data.amount, data.code);\n};\n/**\n * Returns a Unit instance created from an amount in BTC\n *\n * @param {Number} amount - The amount in BTC\n * @returns {Unit} A Unit instance\n */\n\n\nUnit.fromBTC = function (amount) {\n  return new Unit(amount, Unit.BTC);\n};\n/**\n * Returns a Unit instance created from an amount in mBTC\n *\n * @param {Number} amount - The amount in mBTC\n * @returns {Unit} A Unit instance\n */\n\n\nUnit.fromMillis = Unit.fromMilis = function (amount) {\n  return new Unit(amount, Unit.mBTC);\n};\n/**\n * Returns a Unit instance created from an amount in bits\n *\n * @param {Number} amount - The amount in bits\n * @returns {Unit} A Unit instance\n */\n\n\nUnit.fromMicros = Unit.fromBits = function (amount) {\n  return new Unit(amount, Unit.bits);\n};\n/**\n * Returns a Unit instance created from an amount in satoshis\n *\n * @param {Number} amount - The amount in satoshis\n * @returns {Unit} A Unit instance\n */\n\n\nUnit.fromSatoshis = function (amount) {\n  return new Unit(amount, Unit.satoshis);\n};\n/**\n * Returns a Unit instance created from a fiat amount and exchange rate.\n *\n * @param {Number} amount - The amount in fiat\n * @param {Number} rate - The exchange rate BTC/fiat\n * @returns {Unit} A Unit instance\n */\n\n\nUnit.fromFiat = function (amount, rate) {\n  return new Unit(amount, rate);\n};\n\nUnit.prototype._from = function (amount, code) {\n  if (!UNITS[code]) {\n    throw new errors.Unit.UnknownCode(code);\n  }\n\n  return parseInt((amount * UNITS[code][0]).toFixed());\n};\n/**\n * Returns the value represented in the specified unit\n *\n * @param {String|Number} code - The unit code or exchange rate\n * @returns {Number} The converted value\n */\n\n\nUnit.prototype.to = function (code) {\n  if (_.isNumber(code)) {\n    if (code <= 0) {\n      throw new errors.Unit.InvalidRate(code);\n    }\n\n    return parseFloat((this.BTC * code).toFixed(2));\n  }\n\n  if (!UNITS[code]) {\n    throw new errors.Unit.UnknownCode(code);\n  }\n\n  var value = this._value / UNITS[code][0];\n  return parseFloat(value.toFixed(UNITS[code][1]));\n};\n/**\n * Returns the value represented in BTC\n *\n * @returns {Number} The value converted to BTC\n */\n\n\nUnit.prototype.toBTC = function () {\n  return this.to(Unit.BTC);\n};\n/**\n * Returns the value represented in mBTC\n *\n * @returns {Number} The value converted to mBTC\n */\n\n\nUnit.prototype.toMillis = Unit.prototype.toMilis = function () {\n  return this.to(Unit.mBTC);\n};\n/**\n * Returns the value represented in bits\n *\n * @returns {Number} The value converted to bits\n */\n\n\nUnit.prototype.toMicros = Unit.prototype.toBits = function () {\n  return this.to(Unit.bits);\n};\n/**\n * Returns the value represented in satoshis\n *\n * @returns {Number} The value converted to satoshis\n */\n\n\nUnit.prototype.toSatoshis = function () {\n  return this.to(Unit.satoshis);\n};\n/**\n * Returns the value represented in fiat\n *\n * @param {string} rate - The exchange rate between BTC/currency\n * @returns {Number} The value converted to satoshis\n */\n\n\nUnit.prototype.atRate = function (rate) {\n  return this.to(rate);\n};\n/**\n * Returns a the string representation of the value in satoshis\n *\n * @returns {string} the value in satoshis\n */\n\n\nUnit.prototype.toString = function () {\n  return this.satoshis + ' satoshis';\n};\n/**\n * Returns a plain object representation of the Unit\n *\n * @returns {Object} An object with the keys: amount and code\n */\n\n\nUnit.prototype.toObject = Unit.prototype.toJSON = function toObject() {\n  return {\n    amount: this.BTC,\n    code: Unit.BTC\n  };\n};\n/**\n * Returns a string formatted for the console\n *\n * @returns {string} the value in satoshis\n */\n\n\nUnit.prototype.inspect = function () {\n  return '<Unit: ' + this.toString() + '>';\n};\n\nmodule.exports = Unit;","map":{"version":3,"sources":["/home/user/Desktop/react-wallet/node_modules/bitcore-lib-litecoin/lib/unit.js"],"names":["_","require","errors","$","UNITS","Unit","amount","code","isNumber","InvalidRate","BTC","_value","_from","self","defineAccesor","key","Object","defineProperty","get","to","enumerable","keys","forEach","fromObject","data","checkArgument","isObject","fromBTC","fromMillis","fromMilis","mBTC","fromMicros","fromBits","bits","fromSatoshis","satoshis","fromFiat","rate","prototype","UnknownCode","parseInt","toFixed","parseFloat","value","toBTC","toMillis","toMilis","toMicros","toBits","toSatoshis","atRate","toString","toObject","toJSON","inspect","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nvar _ = require('lodash');\n\nvar errors = require('./errors');\nvar $ = require('./util/preconditions');\n\nvar UNITS = {\n  'BTC'      : [1e8, 8],\n  'mBTC'     : [1e5, 5],\n  'uBTC'     : [1e2, 2],\n  'bits'     : [1e2, 2],\n  'satoshis' : [1, 0]\n};\n\n/**\n * Utility for handling and converting bitcoins units. The supported units are\n * BTC, mBTC, bits (also named uBTC) and satoshis. A unit instance can be created with an\n * amount and a unit code, or alternatively using static methods like {fromBTC}.\n * It also allows to be created from a fiat amount and the exchange rate, or\n * alternatively using the {fromFiat} static method.\n * You can consult for different representation of a unit instance using it's\n * {to} method, the fixed unit methods like {toSatoshis} or alternatively using\n * the unit accessors. It also can be converted to a fiat amount by providing the\n * corresponding BTC/fiat exchange rate.\n *\n * @example\n * ```javascript\n * var sats = Unit.fromBTC(1.3).toSatoshis();\n * var mili = Unit.fromBits(1.3).to(Unit.mBTC);\n * var bits = Unit.fromFiat(1.3, 350).bits;\n * var btc = new Unit(1.3, Unit.bits).BTC;\n * ```\n *\n * @param {Number} amount - The amount to be represented\n * @param {String|Number} code - The unit of the amount or the exchange rate\n * @returns {Unit} A new instance of an Unit\n * @constructor\n */\nfunction Unit(amount, code) {\n  if (!(this instanceof Unit)) {\n    return new Unit(amount, code);\n  }\n\n  // convert fiat to BTC\n  if (_.isNumber(code)) {\n    if (code <= 0) {\n      throw new errors.Unit.InvalidRate(code);\n    }\n    amount = amount / code;\n    code = Unit.BTC;\n  }\n\n  this._value = this._from(amount, code);\n\n  var self = this;\n  var defineAccesor = function(key) {\n    Object.defineProperty(self, key, {\n      get: function() { return self.to(key); },\n      enumerable: true,\n    });\n  };\n\n  Object.keys(UNITS).forEach(defineAccesor);\n}\n\nObject.keys(UNITS).forEach(function(key) {\n  Unit[key] = key;\n});\n\n/**\n * Returns a Unit instance created from JSON string or object\n *\n * @param {String|Object} json - JSON with keys: amount and code\n * @returns {Unit} A Unit instance\n */\nUnit.fromObject = function fromObject(data){\n  $.checkArgument(_.isObject(data), 'Argument is expected to be an object');\n  return new Unit(data.amount, data.code);\n};\n\n/**\n * Returns a Unit instance created from an amount in BTC\n *\n * @param {Number} amount - The amount in BTC\n * @returns {Unit} A Unit instance\n */\nUnit.fromBTC = function(amount) {\n  return new Unit(amount, Unit.BTC);\n};\n\n/**\n * Returns a Unit instance created from an amount in mBTC\n *\n * @param {Number} amount - The amount in mBTC\n * @returns {Unit} A Unit instance\n */\nUnit.fromMillis = Unit.fromMilis = function(amount) {\n  return new Unit(amount, Unit.mBTC);\n};\n\n/**\n * Returns a Unit instance created from an amount in bits\n *\n * @param {Number} amount - The amount in bits\n * @returns {Unit} A Unit instance\n */\nUnit.fromMicros = Unit.fromBits = function(amount) {\n  return new Unit(amount, Unit.bits);\n};\n\n/**\n * Returns a Unit instance created from an amount in satoshis\n *\n * @param {Number} amount - The amount in satoshis\n * @returns {Unit} A Unit instance\n */\nUnit.fromSatoshis = function(amount) {\n  return new Unit(amount, Unit.satoshis);\n};\n\n/**\n * Returns a Unit instance created from a fiat amount and exchange rate.\n *\n * @param {Number} amount - The amount in fiat\n * @param {Number} rate - The exchange rate BTC/fiat\n * @returns {Unit} A Unit instance\n */\nUnit.fromFiat = function(amount, rate) {\n  return new Unit(amount, rate);\n};\n\nUnit.prototype._from = function(amount, code) {\n  if (!UNITS[code]) {\n    throw new errors.Unit.UnknownCode(code);\n  }\n  return parseInt((amount * UNITS[code][0]).toFixed());\n};\n\n/**\n * Returns the value represented in the specified unit\n *\n * @param {String|Number} code - The unit code or exchange rate\n * @returns {Number} The converted value\n */\nUnit.prototype.to = function(code) {\n  if (_.isNumber(code)) {\n    if (code <= 0) {\n      throw new errors.Unit.InvalidRate(code);\n    }\n    return parseFloat((this.BTC * code).toFixed(2));\n  }\n\n  if (!UNITS[code]) {\n    throw new errors.Unit.UnknownCode(code);\n  }\n\n  var value = this._value / UNITS[code][0];\n  return parseFloat(value.toFixed(UNITS[code][1]));\n};\n\n/**\n * Returns the value represented in BTC\n *\n * @returns {Number} The value converted to BTC\n */\nUnit.prototype.toBTC = function() {\n  return this.to(Unit.BTC);\n};\n\n/**\n * Returns the value represented in mBTC\n *\n * @returns {Number} The value converted to mBTC\n */\nUnit.prototype.toMillis = Unit.prototype.toMilis = function() {\n  return this.to(Unit.mBTC);\n};\n\n/**\n * Returns the value represented in bits\n *\n * @returns {Number} The value converted to bits\n */\nUnit.prototype.toMicros = Unit.prototype.toBits = function() {\n  return this.to(Unit.bits);\n};\n\n/**\n * Returns the value represented in satoshis\n *\n * @returns {Number} The value converted to satoshis\n */\nUnit.prototype.toSatoshis = function() {\n  return this.to(Unit.satoshis);\n};\n\n/**\n * Returns the value represented in fiat\n *\n * @param {string} rate - The exchange rate between BTC/currency\n * @returns {Number} The value converted to satoshis\n */\nUnit.prototype.atRate = function(rate) {\n  return this.to(rate);\n};\n\n/**\n * Returns a the string representation of the value in satoshis\n *\n * @returns {string} the value in satoshis\n */\nUnit.prototype.toString = function() {\n  return this.satoshis + ' satoshis';\n};\n\n/**\n * Returns a plain object representation of the Unit\n *\n * @returns {Object} An object with the keys: amount and code\n */\nUnit.prototype.toObject = Unit.prototype.toJSON = function toObject() {\n  return {\n    amount: this.BTC,\n    code: Unit.BTC\n  };\n};\n\n/**\n * Returns a string formatted for the console\n *\n * @returns {string} the value in satoshis\n */\nUnit.prototype.inspect = function() {\n  return '<Unit: ' + this.toString() + '>';\n};\n\nmodule.exports = Unit;\n"]},"metadata":{},"sourceType":"script"}