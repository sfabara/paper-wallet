{"ast":null,"code":"'use strict';\n\nvar _ = require('lodash');\n\nvar $ = require('../../util/preconditions');\n\nvar errors = require('../../errors');\n\nvar BufferWriter = require('../../encoding/bufferwriter');\n\nvar buffer = require('buffer');\n\nvar BufferUtil = require('../../util/buffer');\n\nvar JSUtil = require('../../util/js');\n\nvar Script = require('../../script');\n\nvar Sighash = require('../sighash');\n\nvar Output = require('../output');\n\nvar MAXINT = 0xffffffff; // Math.pow(2, 32) - 1;\n\nvar DEFAULT_RBF_SEQNUMBER = MAXINT - 2;\nvar DEFAULT_SEQNUMBER = MAXINT;\nvar DEFAULT_LOCKTIME_SEQNUMBER = MAXINT - 1;\n\nfunction Input(params) {\n  if (!(this instanceof Input)) {\n    return new Input(params);\n  }\n\n  if (params) {\n    return this._fromObject(params);\n  }\n}\n\nInput.MAXINT = MAXINT;\nInput.DEFAULT_SEQNUMBER = DEFAULT_SEQNUMBER;\nInput.DEFAULT_LOCKTIME_SEQNUMBER = DEFAULT_LOCKTIME_SEQNUMBER;\nInput.DEFAULT_RBF_SEQNUMBER = DEFAULT_RBF_SEQNUMBER;\nObject.defineProperty(Input.prototype, 'script', {\n  configurable: false,\n  enumerable: true,\n  get: function () {\n    if (this.isNull()) {\n      return null;\n    }\n\n    if (!this._script) {\n      this._script = new Script(this._scriptBuffer);\n      this._script._isInput = true;\n    }\n\n    return this._script;\n  }\n});\n\nInput.fromObject = function (obj) {\n  $.checkArgument(_.isObject(obj));\n  var input = new Input();\n  return input._fromObject(obj);\n};\n\nInput.prototype._fromObject = function (params) {\n  var prevTxId;\n\n  if (_.isString(params.prevTxId) && JSUtil.isHexa(params.prevTxId)) {\n    prevTxId = new buffer.Buffer(params.prevTxId, 'hex');\n  } else {\n    prevTxId = params.prevTxId;\n  }\n\n  this.output = params.output ? params.output instanceof Output ? params.output : new Output(params.output) : undefined;\n  this.prevTxId = prevTxId || params.txidbuf;\n  this.outputIndex = _.isUndefined(params.outputIndex) ? params.txoutnum : params.outputIndex;\n  this.sequenceNumber = _.isUndefined(params.sequenceNumber) ? _.isUndefined(params.seqnum) ? DEFAULT_SEQNUMBER : params.seqnum : params.sequenceNumber;\n\n  if (_.isUndefined(params.script) && _.isUndefined(params.scriptBuffer)) {\n    throw new errors.Transaction.Input.MissingScript();\n  }\n\n  this.setScript(params.scriptBuffer || params.script);\n  return this;\n};\n\nInput.prototype.toObject = Input.prototype.toJSON = function toObject() {\n  var obj = {\n    prevTxId: this.prevTxId.toString('hex'),\n    outputIndex: this.outputIndex,\n    sequenceNumber: this.sequenceNumber,\n    script: this._scriptBuffer.toString('hex')\n  }; // add human readable form if input contains valid script\n\n  if (this.script) {\n    obj.scriptString = this.script.toString();\n  }\n\n  if (this.output) {\n    obj.output = this.output.toObject();\n  }\n\n  return obj;\n};\n\nInput.fromBufferReader = function (br) {\n  var input = new Input();\n  input.prevTxId = br.readReverse(32);\n  input.outputIndex = br.readUInt32LE();\n  input._scriptBuffer = br.readVarLengthBuffer();\n  input.sequenceNumber = br.readUInt32LE(); // TODO: return different classes according to which input it is\n  // e.g: CoinbaseInput, PublicKeyHashInput, MultiSigScriptHashInput, etc.\n\n  return input;\n};\n\nInput.prototype.toBufferWriter = function (writer) {\n  if (!writer) {\n    writer = new BufferWriter();\n  }\n\n  writer.writeReverse(this.prevTxId);\n  writer.writeUInt32LE(this.outputIndex);\n  var script = this._scriptBuffer;\n  writer.writeVarintNum(script.length);\n  writer.write(script);\n  writer.writeUInt32LE(this.sequenceNumber);\n  return writer;\n};\n\nInput.prototype.setScript = function (script) {\n  this._script = null;\n\n  if (script instanceof Script) {\n    this._script = script;\n    this._script._isInput = true;\n    this._scriptBuffer = script.toBuffer();\n  } else if (JSUtil.isHexa(script)) {\n    // hex string script\n    this._scriptBuffer = new buffer.Buffer(script, 'hex');\n  } else if (_.isString(script)) {\n    // human readable string script\n    this._script = new Script(script);\n    this._script._isInput = true;\n    this._scriptBuffer = this._script.toBuffer();\n  } else if (BufferUtil.isBuffer(script)) {\n    // buffer script\n    this._scriptBuffer = new buffer.Buffer(script);\n  } else {\n    throw new TypeError('Invalid argument type: script');\n  }\n\n  return this;\n};\n/**\n * Retrieve signatures for the provided PrivateKey.\n *\n * @param {Transaction} transaction - the transaction to be signed\n * @param {PrivateKey} privateKey - the private key to use when signing\n * @param {number} inputIndex - the index of this input in the provided transaction\n * @param {number} sigType - defaults to Signature.SIGHASH_ALL\n * @param {Buffer} addressHash - if provided, don't calculate the hash of the\n *     public key associated with the private key provided\n * @abstract\n */\n\n\nInput.prototype.getSignatures = function () {\n  throw new errors.AbstractMethodInvoked('Trying to sign unsupported output type (only P2PKH and P2SH multisig inputs are supported)' + ' for input: ' + JSON.stringify(this));\n};\n\nInput.prototype.isFullySigned = function () {\n  throw new errors.AbstractMethodInvoked('Input#isFullySigned');\n};\n\nInput.prototype.isFinal = function () {\n  return this.sequenceNumber !== 4294967295;\n};\n\nInput.prototype.addSignature = function () {\n  throw new errors.AbstractMethodInvoked('Input#addSignature');\n};\n\nInput.prototype.clearSignatures = function () {\n  throw new errors.AbstractMethodInvoked('Input#clearSignatures');\n};\n\nInput.prototype.isValidSignature = function (transaction, signature) {\n  // FIXME: Refactor signature so this is not necessary\n  signature.signature.nhashtype = signature.sigtype;\n  return Sighash.verify(transaction, signature.signature, signature.publicKey, signature.inputIndex, this.output.script);\n};\n/**\n * @returns true if this is a coinbase input (represents no input)\n */\n\n\nInput.prototype.isNull = function () {\n  return this.prevTxId.toString('hex') === '0000000000000000000000000000000000000000000000000000000000000000' && this.outputIndex === 0xffffffff;\n};\n\nInput.prototype._estimateSize = function () {\n  return this.toBufferWriter().toBuffer().length;\n};\n\nmodule.exports = Input;","map":{"version":3,"sources":["/home/user/Desktop/react-wallet/node_modules/bitcore-lib-litecoin/lib/transaction/input/input.js"],"names":["_","require","$","errors","BufferWriter","buffer","BufferUtil","JSUtil","Script","Sighash","Output","MAXINT","DEFAULT_RBF_SEQNUMBER","DEFAULT_SEQNUMBER","DEFAULT_LOCKTIME_SEQNUMBER","Input","params","_fromObject","Object","defineProperty","prototype","configurable","enumerable","get","isNull","_script","_scriptBuffer","_isInput","fromObject","obj","checkArgument","isObject","input","prevTxId","isString","isHexa","Buffer","output","undefined","txidbuf","outputIndex","isUndefined","txoutnum","sequenceNumber","seqnum","script","scriptBuffer","Transaction","MissingScript","setScript","toObject","toJSON","toString","scriptString","fromBufferReader","br","readReverse","readUInt32LE","readVarLengthBuffer","toBufferWriter","writer","writeReverse","writeUInt32LE","writeVarintNum","length","write","toBuffer","isBuffer","TypeError","getSignatures","AbstractMethodInvoked","JSON","stringify","isFullySigned","isFinal","addSignature","clearSignatures","isValidSignature","transaction","signature","nhashtype","sigtype","verify","publicKey","inputIndex","_estimateSize","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nvar _ = require('lodash');\nvar $ = require('../../util/preconditions');\nvar errors = require('../../errors');\nvar BufferWriter = require('../../encoding/bufferwriter');\nvar buffer = require('buffer');\nvar BufferUtil = require('../../util/buffer');\nvar JSUtil = require('../../util/js');\nvar Script = require('../../script');\nvar Sighash = require('../sighash');\nvar Output = require('../output');\n\nvar MAXINT = 0xffffffff; // Math.pow(2, 32) - 1;\nvar DEFAULT_RBF_SEQNUMBER = MAXINT - 2;\nvar DEFAULT_SEQNUMBER = MAXINT;\nvar DEFAULT_LOCKTIME_SEQNUMBER = MAXINT - 1;\n\nfunction Input(params) {\n  if (!(this instanceof Input)) {\n    return new Input(params);\n  }\n  if (params) {\n    return this._fromObject(params);\n  }\n}\n\nInput.MAXINT = MAXINT;\nInput.DEFAULT_SEQNUMBER = DEFAULT_SEQNUMBER;\nInput.DEFAULT_LOCKTIME_SEQNUMBER = DEFAULT_LOCKTIME_SEQNUMBER;\nInput.DEFAULT_RBF_SEQNUMBER = DEFAULT_RBF_SEQNUMBER;\n\nObject.defineProperty(Input.prototype, 'script', {\n  configurable: false,\n  enumerable: true,\n  get: function() {\n    if (this.isNull()) {\n      return null;\n    }\n    if (!this._script) {\n      this._script = new Script(this._scriptBuffer);\n      this._script._isInput = true;\n    }\n    return this._script;\n  }\n});\n\nInput.fromObject = function(obj) {\n  $.checkArgument(_.isObject(obj));\n  var input = new Input();\n  return input._fromObject(obj);\n};\n\nInput.prototype._fromObject = function(params) {\n  var prevTxId;\n  if (_.isString(params.prevTxId) && JSUtil.isHexa(params.prevTxId)) {\n    prevTxId = new buffer.Buffer(params.prevTxId, 'hex');\n  } else {\n    prevTxId = params.prevTxId;\n  }\n  this.output = params.output ?\n    (params.output instanceof Output ? params.output : new Output(params.output)) : undefined;\n  this.prevTxId = prevTxId || params.txidbuf;\n  this.outputIndex = _.isUndefined(params.outputIndex) ? params.txoutnum : params.outputIndex;\n  this.sequenceNumber = _.isUndefined(params.sequenceNumber) ?\n    (_.isUndefined(params.seqnum) ? DEFAULT_SEQNUMBER : params.seqnum) : params.sequenceNumber;\n  if (_.isUndefined(params.script) && _.isUndefined(params.scriptBuffer)) {\n    throw new errors.Transaction.Input.MissingScript();\n  }\n  this.setScript(params.scriptBuffer || params.script);\n  return this;\n};\n\nInput.prototype.toObject = Input.prototype.toJSON = function toObject() {\n  var obj = {\n    prevTxId: this.prevTxId.toString('hex'),\n    outputIndex: this.outputIndex,\n    sequenceNumber: this.sequenceNumber,\n    script: this._scriptBuffer.toString('hex'),\n  };\n  // add human readable form if input contains valid script\n  if (this.script) {\n    obj.scriptString = this.script.toString();\n  }\n  if (this.output) {\n    obj.output = this.output.toObject();\n  }\n  return obj;\n};\n\nInput.fromBufferReader = function(br) {\n  var input = new Input();\n  input.prevTxId = br.readReverse(32);\n  input.outputIndex = br.readUInt32LE();\n  input._scriptBuffer = br.readVarLengthBuffer();\n  input.sequenceNumber = br.readUInt32LE();\n  // TODO: return different classes according to which input it is\n  // e.g: CoinbaseInput, PublicKeyHashInput, MultiSigScriptHashInput, etc.\n  return input;\n};\n\nInput.prototype.toBufferWriter = function(writer) {\n  if (!writer) {\n    writer = new BufferWriter();\n  }\n  writer.writeReverse(this.prevTxId);\n  writer.writeUInt32LE(this.outputIndex);\n  var script = this._scriptBuffer;\n  writer.writeVarintNum(script.length);\n  writer.write(script);\n  writer.writeUInt32LE(this.sequenceNumber);\n  return writer;\n};\n\nInput.prototype.setScript = function(script) {\n  this._script = null;\n  if (script instanceof Script) {\n    this._script = script;\n    this._script._isInput = true;\n    this._scriptBuffer = script.toBuffer();\n  } else if (JSUtil.isHexa(script)) {\n    // hex string script\n    this._scriptBuffer = new buffer.Buffer(script, 'hex');\n  } else if (_.isString(script)) {\n    // human readable string script\n    this._script = new Script(script);\n    this._script._isInput = true;\n    this._scriptBuffer = this._script.toBuffer();\n  } else if (BufferUtil.isBuffer(script)) {\n    // buffer script\n    this._scriptBuffer = new buffer.Buffer(script);\n  } else {\n    throw new TypeError('Invalid argument type: script');\n  }\n  return this;\n};\n\n/**\n * Retrieve signatures for the provided PrivateKey.\n *\n * @param {Transaction} transaction - the transaction to be signed\n * @param {PrivateKey} privateKey - the private key to use when signing\n * @param {number} inputIndex - the index of this input in the provided transaction\n * @param {number} sigType - defaults to Signature.SIGHASH_ALL\n * @param {Buffer} addressHash - if provided, don't calculate the hash of the\n *     public key associated with the private key provided\n * @abstract\n */\nInput.prototype.getSignatures = function() {\n  throw new errors.AbstractMethodInvoked(\n    'Trying to sign unsupported output type (only P2PKH and P2SH multisig inputs are supported)' +\n    ' for input: ' + JSON.stringify(this)\n  );\n};\n\nInput.prototype.isFullySigned = function() {\n  throw new errors.AbstractMethodInvoked('Input#isFullySigned');\n};\n\nInput.prototype.isFinal = function() {\n  return this.sequenceNumber !== 4294967295;\n};\n\nInput.prototype.addSignature = function() {\n  throw new errors.AbstractMethodInvoked('Input#addSignature');\n};\n\nInput.prototype.clearSignatures = function() {\n  throw new errors.AbstractMethodInvoked('Input#clearSignatures');\n};\n\nInput.prototype.isValidSignature = function(transaction, signature) {\n  // FIXME: Refactor signature so this is not necessary\n  signature.signature.nhashtype = signature.sigtype;\n  return Sighash.verify(\n    transaction,\n    signature.signature,\n    signature.publicKey,\n    signature.inputIndex,\n    this.output.script\n  );\n};\n\n/**\n * @returns true if this is a coinbase input (represents no input)\n */\nInput.prototype.isNull = function() {\n  return this.prevTxId.toString('hex') === '0000000000000000000000000000000000000000000000000000000000000000' &&\n    this.outputIndex === 0xffffffff;\n};\n\nInput.prototype._estimateSize = function() {\n  return this.toBufferWriter().toBuffer().length;\n};\n\nmodule.exports = Input;\n"]},"metadata":{},"sourceType":"script"}