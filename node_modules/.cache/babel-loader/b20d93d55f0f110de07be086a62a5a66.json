{"ast":null,"code":"'use strict';\n\nvar _ = require('lodash');\n\nvar Base58 = require('./base58');\n\nvar buffer = require('buffer');\n\nvar sha256sha256 = require('../crypto/hash').sha256sha256;\n\nvar Base58Check = function Base58Check(obj) {\n  if (!(this instanceof Base58Check)) return new Base58Check(obj);\n\n  if (Buffer.isBuffer(obj)) {\n    var buf = obj;\n    this.fromBuffer(buf);\n  } else if (typeof obj === 'string') {\n    var str = obj;\n    this.fromString(str);\n  } else if (obj) {\n    this.set(obj);\n  }\n};\n\nBase58Check.prototype.set = function (obj) {\n  this.buf = obj.buf || this.buf || undefined;\n  return this;\n};\n\nBase58Check.validChecksum = function validChecksum(data, checksum) {\n  if (_.isString(data)) {\n    data = new buffer.Buffer(Base58.decode(data));\n  }\n\n  if (_.isString(checksum)) {\n    checksum = new buffer.Buffer(Base58.decode(checksum));\n  }\n\n  if (!checksum) {\n    checksum = data.slice(-4);\n    data = data.slice(0, -4);\n  }\n\n  return Base58Check.checksum(data).toString('hex') === checksum.toString('hex');\n};\n\nBase58Check.decode = function (s) {\n  if (typeof s !== 'string') throw new Error('Input must be a string');\n  var buf = new Buffer(Base58.decode(s));\n  if (buf.length < 4) throw new Error(\"Input string too short\");\n  var data = buf.slice(0, -4);\n  var csum = buf.slice(-4);\n  var hash = sha256sha256(data);\n  var hash4 = hash.slice(0, 4);\n  if (csum.toString('hex') !== hash4.toString('hex')) throw new Error(\"Checksum mismatch\");\n  return data;\n};\n\nBase58Check.checksum = function (buffer) {\n  return sha256sha256(buffer).slice(0, 4);\n};\n\nBase58Check.encode = function (buf) {\n  if (!Buffer.isBuffer(buf)) throw new Error('Input must be a buffer');\n  var checkedBuf = new Buffer(buf.length + 4);\n  var hash = Base58Check.checksum(buf);\n  buf.copy(checkedBuf);\n  hash.copy(checkedBuf, buf.length);\n  return Base58.encode(checkedBuf);\n};\n\nBase58Check.prototype.fromBuffer = function (buf) {\n  this.buf = buf;\n  return this;\n};\n\nBase58Check.prototype.fromString = function (str) {\n  var buf = Base58Check.decode(str);\n  this.buf = buf;\n  return this;\n};\n\nBase58Check.prototype.toBuffer = function () {\n  return this.buf;\n};\n\nBase58Check.prototype.toString = function () {\n  return Base58Check.encode(this.buf);\n};\n\nmodule.exports = Base58Check;","map":{"version":3,"sources":["/home/user/Desktop/paper/node_modules/bitcore-lib-litecoin/lib/encoding/base58check.js"],"names":["_","require","Base58","buffer","sha256sha256","Base58Check","obj","Buffer","isBuffer","buf","fromBuffer","str","fromString","set","prototype","undefined","validChecksum","data","checksum","isString","decode","slice","toString","s","Error","length","csum","hash","hash4","encode","checkedBuf","copy","toBuffer","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nvar _ = require('lodash');\nvar Base58 = require('./base58');\nvar buffer = require('buffer');\nvar sha256sha256 = require('../crypto/hash').sha256sha256;\n\nvar Base58Check = function Base58Check(obj) {\n  if (!(this instanceof Base58Check))\n    return new Base58Check(obj);\n  if (Buffer.isBuffer(obj)) {\n    var buf = obj;\n    this.fromBuffer(buf);\n  } else if (typeof obj === 'string') {\n    var str = obj;\n    this.fromString(str);\n  } else if (obj) {\n    this.set(obj);\n  }\n};\n\nBase58Check.prototype.set = function(obj) {\n  this.buf = obj.buf || this.buf || undefined;\n  return this;\n};\n\nBase58Check.validChecksum = function validChecksum(data, checksum) {\n  if (_.isString(data)) {\n    data = new buffer.Buffer(Base58.decode(data));\n  }\n  if (_.isString(checksum)) {\n    checksum = new buffer.Buffer(Base58.decode(checksum));\n  }\n  if (!checksum) {\n    checksum = data.slice(-4);\n    data = data.slice(0, -4);\n  }\n  return Base58Check.checksum(data).toString('hex') === checksum.toString('hex');\n};\n\nBase58Check.decode = function(s) {\n  if (typeof s !== 'string')\n    throw new Error('Input must be a string');\n\n  var buf = new Buffer(Base58.decode(s));\n\n  if (buf.length < 4)\n    throw new Error(\"Input string too short\");\n\n  var data = buf.slice(0, -4);\n  var csum = buf.slice(-4);\n\n  var hash = sha256sha256(data);\n  var hash4 = hash.slice(0, 4);\n\n  if (csum.toString('hex') !== hash4.toString('hex'))\n    throw new Error(\"Checksum mismatch\");\n\n  return data;\n};\n\nBase58Check.checksum = function(buffer) {\n  return sha256sha256(buffer).slice(0, 4);\n};\n\nBase58Check.encode = function(buf) {\n  if (!Buffer.isBuffer(buf))\n    throw new Error('Input must be a buffer');\n  var checkedBuf = new Buffer(buf.length + 4);\n  var hash = Base58Check.checksum(buf);\n  buf.copy(checkedBuf);\n  hash.copy(checkedBuf, buf.length);\n  return Base58.encode(checkedBuf);\n};\n\nBase58Check.prototype.fromBuffer = function(buf) {\n  this.buf = buf;\n  return this;\n};\n\nBase58Check.prototype.fromString = function(str) {\n  var buf = Base58Check.decode(str);\n  this.buf = buf;\n  return this;\n};\n\nBase58Check.prototype.toBuffer = function() {\n  return this.buf;\n};\n\nBase58Check.prototype.toString = function() {\n  return Base58Check.encode(this.buf);\n};\n\nmodule.exports = Base58Check;\n"]},"metadata":{},"sourceType":"script"}