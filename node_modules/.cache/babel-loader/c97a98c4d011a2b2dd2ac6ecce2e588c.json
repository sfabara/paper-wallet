{"ast":null,"code":"'use strict';\n\nvar _ = require('lodash');\n\nvar $ = require('./util/preconditions');\n\nvar BufferUtil = require('./util/buffer');\n\nvar JSUtil = require('./util/js');\n\nfunction Opcode(num) {\n  if (!(this instanceof Opcode)) {\n    return new Opcode(num);\n  }\n\n  var value;\n\n  if (_.isNumber(num)) {\n    value = num;\n  } else if (_.isString(num)) {\n    value = Opcode.map[num];\n  } else {\n    throw new TypeError('Unrecognized num type: \"' + typeof num + '\" for Opcode');\n  }\n\n  JSUtil.defineImmutable(this, {\n    num: value\n  });\n  return this;\n}\n\nOpcode.fromBuffer = function (buf) {\n  $.checkArgument(BufferUtil.isBuffer(buf));\n  return new Opcode(Number('0x' + buf.toString('hex')));\n};\n\nOpcode.fromNumber = function (num) {\n  $.checkArgument(_.isNumber(num));\n  return new Opcode(num);\n};\n\nOpcode.fromString = function (str) {\n  $.checkArgument(_.isString(str));\n  var value = Opcode.map[str];\n\n  if (typeof value === 'undefined') {\n    throw new TypeError('Invalid opcodestr');\n  }\n\n  return new Opcode(value);\n};\n\nOpcode.prototype.toHex = function () {\n  return this.num.toString(16);\n};\n\nOpcode.prototype.toBuffer = function () {\n  return new Buffer(this.toHex(), 'hex');\n};\n\nOpcode.prototype.toNumber = function () {\n  return this.num;\n};\n\nOpcode.prototype.toString = function () {\n  var str = Opcode.reverseMap[this.num];\n\n  if (typeof str === 'undefined') {\n    throw new Error('Opcode does not have a string representation');\n  }\n\n  return str;\n};\n\nOpcode.smallInt = function (n) {\n  $.checkArgument(_.isNumber(n), 'Invalid Argument: n should be number');\n  $.checkArgument(n >= 0 && n <= 16, 'Invalid Argument: n must be between 0 and 16');\n\n  if (n === 0) {\n    return Opcode('OP_0');\n  }\n\n  return new Opcode(Opcode.map.OP_1 + n - 1);\n};\n\nOpcode.map = {\n  // push value\n  OP_FALSE: 0,\n  OP_0: 0,\n  OP_PUSHDATA1: 76,\n  OP_PUSHDATA2: 77,\n  OP_PUSHDATA4: 78,\n  OP_1NEGATE: 79,\n  OP_RESERVED: 80,\n  OP_TRUE: 81,\n  OP_1: 81,\n  OP_2: 82,\n  OP_3: 83,\n  OP_4: 84,\n  OP_5: 85,\n  OP_6: 86,\n  OP_7: 87,\n  OP_8: 88,\n  OP_9: 89,\n  OP_10: 90,\n  OP_11: 91,\n  OP_12: 92,\n  OP_13: 93,\n  OP_14: 94,\n  OP_15: 95,\n  OP_16: 96,\n  // control\n  OP_NOP: 97,\n  OP_VER: 98,\n  OP_IF: 99,\n  OP_NOTIF: 100,\n  OP_VERIF: 101,\n  OP_VERNOTIF: 102,\n  OP_ELSE: 103,\n  OP_ENDIF: 104,\n  OP_VERIFY: 105,\n  OP_RETURN: 106,\n  // stack ops\n  OP_TOALTSTACK: 107,\n  OP_FROMALTSTACK: 108,\n  OP_2DROP: 109,\n  OP_2DUP: 110,\n  OP_3DUP: 111,\n  OP_2OVER: 112,\n  OP_2ROT: 113,\n  OP_2SWAP: 114,\n  OP_IFDUP: 115,\n  OP_DEPTH: 116,\n  OP_DROP: 117,\n  OP_DUP: 118,\n  OP_NIP: 119,\n  OP_OVER: 120,\n  OP_PICK: 121,\n  OP_ROLL: 122,\n  OP_ROT: 123,\n  OP_SWAP: 124,\n  OP_TUCK: 125,\n  // splice ops\n  OP_CAT: 126,\n  OP_SUBSTR: 127,\n  OP_LEFT: 128,\n  OP_RIGHT: 129,\n  OP_SIZE: 130,\n  // bit logic\n  OP_INVERT: 131,\n  OP_AND: 132,\n  OP_OR: 133,\n  OP_XOR: 134,\n  OP_EQUAL: 135,\n  OP_EQUALVERIFY: 136,\n  OP_RESERVED1: 137,\n  OP_RESERVED2: 138,\n  // numeric\n  OP_1ADD: 139,\n  OP_1SUB: 140,\n  OP_2MUL: 141,\n  OP_2DIV: 142,\n  OP_NEGATE: 143,\n  OP_ABS: 144,\n  OP_NOT: 145,\n  OP_0NOTEQUAL: 146,\n  OP_ADD: 147,\n  OP_SUB: 148,\n  OP_MUL: 149,\n  OP_DIV: 150,\n  OP_MOD: 151,\n  OP_LSHIFT: 152,\n  OP_RSHIFT: 153,\n  OP_BOOLAND: 154,\n  OP_BOOLOR: 155,\n  OP_NUMEQUAL: 156,\n  OP_NUMEQUALVERIFY: 157,\n  OP_NUMNOTEQUAL: 158,\n  OP_LESSTHAN: 159,\n  OP_GREATERTHAN: 160,\n  OP_LESSTHANOREQUAL: 161,\n  OP_GREATERTHANOREQUAL: 162,\n  OP_MIN: 163,\n  OP_MAX: 164,\n  OP_WITHIN: 165,\n  // crypto\n  OP_RIPEMD160: 166,\n  OP_SHA1: 167,\n  OP_SHA256: 168,\n  OP_HASH160: 169,\n  OP_HASH256: 170,\n  OP_CODESEPARATOR: 171,\n  OP_CHECKSIG: 172,\n  OP_CHECKSIGVERIFY: 173,\n  OP_CHECKMULTISIG: 174,\n  OP_CHECKMULTISIGVERIFY: 175,\n  OP_CHECKLOCKTIMEVERIFY: 177,\n  // expansion\n  OP_NOP1: 176,\n  OP_NOP2: 177,\n  OP_NOP3: 178,\n  OP_NOP4: 179,\n  OP_NOP5: 180,\n  OP_NOP6: 181,\n  OP_NOP7: 182,\n  OP_NOP8: 183,\n  OP_NOP9: 184,\n  OP_NOP10: 185,\n  // template matching params\n  OP_PUBKEYHASH: 253,\n  OP_PUBKEY: 254,\n  OP_INVALIDOPCODE: 255\n};\nOpcode.reverseMap = [];\n\nfor (var k in Opcode.map) {\n  Opcode.reverseMap[Opcode.map[k]] = k;\n} // Easier access to opcodes\n\n\n_.extend(Opcode, Opcode.map);\n/**\n * @returns true if opcode is one of OP_0, OP_1, ..., OP_16\n */\n\n\nOpcode.isSmallIntOp = function (opcode) {\n  if (opcode instanceof Opcode) {\n    opcode = opcode.toNumber();\n  }\n\n  return opcode === Opcode.map.OP_0 || opcode >= Opcode.map.OP_1 && opcode <= Opcode.map.OP_16;\n};\n/**\n * Will return a string formatted for the console\n *\n * @returns {string} Script opcode\n */\n\n\nOpcode.prototype.inspect = function () {\n  return '<Opcode: ' + this.toString() + ', hex: ' + this.toHex() + ', decimal: ' + this.num + '>';\n};\n\nmodule.exports = Opcode;","map":{"version":3,"sources":["/home/user/Desktop/paper/node_modules/bitcore-lib-litecoin/lib/opcode.js"],"names":["_","require","$","BufferUtil","JSUtil","Opcode","num","value","isNumber","isString","map","TypeError","defineImmutable","fromBuffer","buf","checkArgument","isBuffer","Number","toString","fromNumber","fromString","str","prototype","toHex","toBuffer","Buffer","toNumber","reverseMap","Error","smallInt","n","OP_1","OP_FALSE","OP_0","OP_PUSHDATA1","OP_PUSHDATA2","OP_PUSHDATA4","OP_1NEGATE","OP_RESERVED","OP_TRUE","OP_2","OP_3","OP_4","OP_5","OP_6","OP_7","OP_8","OP_9","OP_10","OP_11","OP_12","OP_13","OP_14","OP_15","OP_16","OP_NOP","OP_VER","OP_IF","OP_NOTIF","OP_VERIF","OP_VERNOTIF","OP_ELSE","OP_ENDIF","OP_VERIFY","OP_RETURN","OP_TOALTSTACK","OP_FROMALTSTACK","OP_2DROP","OP_2DUP","OP_3DUP","OP_2OVER","OP_2ROT","OP_2SWAP","OP_IFDUP","OP_DEPTH","OP_DROP","OP_DUP","OP_NIP","OP_OVER","OP_PICK","OP_ROLL","OP_ROT","OP_SWAP","OP_TUCK","OP_CAT","OP_SUBSTR","OP_LEFT","OP_RIGHT","OP_SIZE","OP_INVERT","OP_AND","OP_OR","OP_XOR","OP_EQUAL","OP_EQUALVERIFY","OP_RESERVED1","OP_RESERVED2","OP_1ADD","OP_1SUB","OP_2MUL","OP_2DIV","OP_NEGATE","OP_ABS","OP_NOT","OP_0NOTEQUAL","OP_ADD","OP_SUB","OP_MUL","OP_DIV","OP_MOD","OP_LSHIFT","OP_RSHIFT","OP_BOOLAND","OP_BOOLOR","OP_NUMEQUAL","OP_NUMEQUALVERIFY","OP_NUMNOTEQUAL","OP_LESSTHAN","OP_GREATERTHAN","OP_LESSTHANOREQUAL","OP_GREATERTHANOREQUAL","OP_MIN","OP_MAX","OP_WITHIN","OP_RIPEMD160","OP_SHA1","OP_SHA256","OP_HASH160","OP_HASH256","OP_CODESEPARATOR","OP_CHECKSIG","OP_CHECKSIGVERIFY","OP_CHECKMULTISIG","OP_CHECKMULTISIGVERIFY","OP_CHECKLOCKTIMEVERIFY","OP_NOP1","OP_NOP2","OP_NOP3","OP_NOP4","OP_NOP5","OP_NOP6","OP_NOP7","OP_NOP8","OP_NOP9","OP_NOP10","OP_PUBKEYHASH","OP_PUBKEY","OP_INVALIDOPCODE","k","extend","isSmallIntOp","opcode","inspect","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nvar _ = require('lodash');\nvar $ = require('./util/preconditions');\nvar BufferUtil = require('./util/buffer');\nvar JSUtil = require('./util/js');\n\nfunction Opcode(num) {\n  if (!(this instanceof Opcode)) {\n    return new Opcode(num);\n  }\n\n  var value;\n\n  if (_.isNumber(num)) {\n    value = num;\n  } else if (_.isString(num)) {\n    value = Opcode.map[num];\n  } else {\n    throw new TypeError('Unrecognized num type: \"' + typeof(num) + '\" for Opcode');\n  }\n\n  JSUtil.defineImmutable(this, {\n    num: value\n  });\n\n  return this;\n}\n\nOpcode.fromBuffer = function(buf) {\n  $.checkArgument(BufferUtil.isBuffer(buf));\n  return new Opcode(Number('0x' + buf.toString('hex')));\n};\n\nOpcode.fromNumber = function(num) {\n  $.checkArgument(_.isNumber(num));\n  return new Opcode(num);\n};\n\nOpcode.fromString = function(str) {\n  $.checkArgument(_.isString(str));\n  var value = Opcode.map[str];\n  if (typeof value === 'undefined') {\n    throw new TypeError('Invalid opcodestr');\n  }\n  return new Opcode(value);\n};\n\nOpcode.prototype.toHex = function() {\n  return this.num.toString(16);\n};\n\nOpcode.prototype.toBuffer = function() {\n  return new Buffer(this.toHex(), 'hex');\n};\n\nOpcode.prototype.toNumber = function() {\n  return this.num;\n};\n\nOpcode.prototype.toString = function() {\n  var str = Opcode.reverseMap[this.num];\n  if (typeof str === 'undefined') {\n    throw new Error('Opcode does not have a string representation');\n  }\n  return str;\n};\n\nOpcode.smallInt = function(n) {\n  $.checkArgument(_.isNumber(n), 'Invalid Argument: n should be number');\n  $.checkArgument(n >= 0 && n <= 16, 'Invalid Argument: n must be between 0 and 16');\n  if (n === 0) {\n    return Opcode('OP_0');\n  }\n  return new Opcode(Opcode.map.OP_1 + n - 1);\n};\n\nOpcode.map = {\n  // push value\n  OP_FALSE: 0,\n  OP_0: 0,\n  OP_PUSHDATA1: 76,\n  OP_PUSHDATA2: 77,\n  OP_PUSHDATA4: 78,\n  OP_1NEGATE: 79,\n  OP_RESERVED: 80,\n  OP_TRUE: 81,\n  OP_1: 81,\n  OP_2: 82,\n  OP_3: 83,\n  OP_4: 84,\n  OP_5: 85,\n  OP_6: 86,\n  OP_7: 87,\n  OP_8: 88,\n  OP_9: 89,\n  OP_10: 90,\n  OP_11: 91,\n  OP_12: 92,\n  OP_13: 93,\n  OP_14: 94,\n  OP_15: 95,\n  OP_16: 96,\n\n  // control\n  OP_NOP: 97,\n  OP_VER: 98,\n  OP_IF: 99,\n  OP_NOTIF: 100,\n  OP_VERIF: 101,\n  OP_VERNOTIF: 102,\n  OP_ELSE: 103,\n  OP_ENDIF: 104,\n  OP_VERIFY: 105,\n  OP_RETURN: 106,\n\n  // stack ops\n  OP_TOALTSTACK: 107,\n  OP_FROMALTSTACK: 108,\n  OP_2DROP: 109,\n  OP_2DUP: 110,\n  OP_3DUP: 111,\n  OP_2OVER: 112,\n  OP_2ROT: 113,\n  OP_2SWAP: 114,\n  OP_IFDUP: 115,\n  OP_DEPTH: 116,\n  OP_DROP: 117,\n  OP_DUP: 118,\n  OP_NIP: 119,\n  OP_OVER: 120,\n  OP_PICK: 121,\n  OP_ROLL: 122,\n  OP_ROT: 123,\n  OP_SWAP: 124,\n  OP_TUCK: 125,\n\n  // splice ops\n  OP_CAT: 126,\n  OP_SUBSTR: 127,\n  OP_LEFT: 128,\n  OP_RIGHT: 129,\n  OP_SIZE: 130,\n\n  // bit logic\n  OP_INVERT: 131,\n  OP_AND: 132,\n  OP_OR: 133,\n  OP_XOR: 134,\n  OP_EQUAL: 135,\n  OP_EQUALVERIFY: 136,\n  OP_RESERVED1: 137,\n  OP_RESERVED2: 138,\n\n  // numeric\n  OP_1ADD: 139,\n  OP_1SUB: 140,\n  OP_2MUL: 141,\n  OP_2DIV: 142,\n  OP_NEGATE: 143,\n  OP_ABS: 144,\n  OP_NOT: 145,\n  OP_0NOTEQUAL: 146,\n\n  OP_ADD: 147,\n  OP_SUB: 148,\n  OP_MUL: 149,\n  OP_DIV: 150,\n  OP_MOD: 151,\n  OP_LSHIFT: 152,\n  OP_RSHIFT: 153,\n\n  OP_BOOLAND: 154,\n  OP_BOOLOR: 155,\n  OP_NUMEQUAL: 156,\n  OP_NUMEQUALVERIFY: 157,\n  OP_NUMNOTEQUAL: 158,\n  OP_LESSTHAN: 159,\n  OP_GREATERTHAN: 160,\n  OP_LESSTHANOREQUAL: 161,\n  OP_GREATERTHANOREQUAL: 162,\n  OP_MIN: 163,\n  OP_MAX: 164,\n\n  OP_WITHIN: 165,\n\n  // crypto\n  OP_RIPEMD160: 166,\n  OP_SHA1: 167,\n  OP_SHA256: 168,\n  OP_HASH160: 169,\n  OP_HASH256: 170,\n  OP_CODESEPARATOR: 171,\n  OP_CHECKSIG: 172,\n  OP_CHECKSIGVERIFY: 173,\n  OP_CHECKMULTISIG: 174,\n  OP_CHECKMULTISIGVERIFY: 175,\n\n  OP_CHECKLOCKTIMEVERIFY: 177,\n\n  // expansion\n  OP_NOP1: 176,\n  OP_NOP2: 177,\n  OP_NOP3: 178,\n  OP_NOP4: 179,\n  OP_NOP5: 180,\n  OP_NOP6: 181,\n  OP_NOP7: 182,\n  OP_NOP8: 183,\n  OP_NOP9: 184,\n  OP_NOP10: 185,\n\n  // template matching params\n  OP_PUBKEYHASH: 253,\n  OP_PUBKEY: 254,\n  OP_INVALIDOPCODE: 255\n};\n\nOpcode.reverseMap = [];\n\nfor (var k in Opcode.map) {\n  Opcode.reverseMap[Opcode.map[k]] = k;\n}\n\n// Easier access to opcodes\n_.extend(Opcode, Opcode.map);\n\n/**\n * @returns true if opcode is one of OP_0, OP_1, ..., OP_16\n */\nOpcode.isSmallIntOp = function(opcode) {\n  if (opcode instanceof Opcode) {\n    opcode = opcode.toNumber();\n  }\n  return ((opcode === Opcode.map.OP_0) ||\n    ((opcode >= Opcode.map.OP_1) && (opcode <= Opcode.map.OP_16)));\n};\n\n/**\n * Will return a string formatted for the console\n *\n * @returns {string} Script opcode\n */\nOpcode.prototype.inspect = function() {\n  return '<Opcode: ' + this.toString() + ', hex: '+this.toHex()+', decimal: '+this.num+'>';\n};\n\nmodule.exports = Opcode;\n"]},"metadata":{},"sourceType":"script"}