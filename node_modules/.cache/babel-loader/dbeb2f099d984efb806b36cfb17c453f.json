{"ast":null,"code":"'use strict';\n\nvar bn = require('bn.js');\n\nvar elliptic = require('../../elliptic');\n\nvar getNAF = elliptic.utils.getNAF;\nvar getJSF = elliptic.utils.getJSF;\nvar assert = elliptic.utils.assert;\n\nfunction BaseCurve(type, conf) {\n  this.type = type;\n  this.p = new bn(conf.p, 16); // Use Montgomery, when there is no fast reduction for the prime\n\n  this.red = conf.prime ? bn.red(conf.prime) : bn.mont(this.p); // Useful for many curves\n\n  this.zero = new bn(0).toRed(this.red);\n  this.one = new bn(1).toRed(this.red);\n  this.two = new bn(2).toRed(this.red); // Curve configuration, optional\n\n  this.n = conf.n && new bn(conf.n, 16);\n  this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed); // Temporary arrays\n\n  this._wnafT1 = new Array(4);\n  this._wnafT2 = new Array(4);\n  this._wnafT3 = new Array(4);\n  this._wnafT4 = new Array(4);\n}\n\nmodule.exports = BaseCurve;\n\nBaseCurve.prototype.point = function point() {\n  throw new Error('Not implemented');\n};\n\nBaseCurve.prototype.validate = function validate() {\n  throw new Error('Not implemented');\n};\n\nBaseCurve.prototype._fixedNafMul = function _fixedNafMul(p, k) {\n  var doubles = p._getDoubles();\n\n  var naf = getNAF(k, 1);\n  var I = (1 << doubles.step + 1) - (doubles.step % 2 === 0 ? 2 : 1);\n  I /= 3; // Translate into more windowed form\n\n  var repr = [];\n\n  for (var j = 0; j < naf.length; j += doubles.step) {\n    var nafW = 0;\n\n    for (var k = j + doubles.step - 1; k >= j; k--) {\n      nafW = (nafW << 1) + naf[k];\n    }\n\n    repr.push(nafW);\n  }\n\n  var a = this.jpoint(null, null, null);\n  var b = this.jpoint(null, null, null);\n\n  for (var i = I; i > 0; i--) {\n    for (var j = 0; j < repr.length; j++) {\n      var nafW = repr[j];\n      if (nafW === i) b = b.mixedAdd(doubles.points[j]);else if (nafW === -i) b = b.mixedAdd(doubles.points[j].neg());\n    }\n\n    a = a.add(b);\n  }\n\n  return a.toP();\n};\n\nBaseCurve.prototype._wnafMul = function _wnafMul(p, k) {\n  var w = 4; // Precompute window\n\n  var nafPoints = p._getNAFPoints(w);\n\n  w = nafPoints.wnd;\n  var wnd = nafPoints.points; // Get NAF form\n\n  var naf = getNAF(k, w); // Add `this`*(N+1) for every w-NAF index\n\n  var acc = this.jpoint(null, null, null);\n\n  for (var i = naf.length - 1; i >= 0; i--) {\n    // Count zeroes\n    for (var k = 0; i >= 0 && naf[i] === 0; i--) {\n      k++;\n    }\n\n    if (i >= 0) k++;\n    acc = acc.dblp(k);\n    if (i < 0) break;\n    var z = naf[i];\n    assert(z !== 0);\n\n    if (p.type === 'affine') {\n      // J +- P\n      if (z > 0) acc = acc.mixedAdd(wnd[z - 1 >> 1]);else acc = acc.mixedAdd(wnd[-z - 1 >> 1].neg());\n    } else {\n      // J +- J\n      if (z > 0) acc = acc.add(wnd[z - 1 >> 1]);else acc = acc.add(wnd[-z - 1 >> 1].neg());\n    }\n  }\n\n  return p.type === 'affine' ? acc.toP() : acc;\n};\n\nBaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW, points, coeffs, len) {\n  var wndWidth = this._wnafT1;\n  var wnd = this._wnafT2;\n  var naf = this._wnafT3; // Fill all arrays\n\n  var max = 0;\n\n  for (var i = 0; i < len; i++) {\n    var p = points[i];\n\n    var nafPoints = p._getNAFPoints(defW);\n\n    wndWidth[i] = nafPoints.wnd;\n    wnd[i] = nafPoints.points;\n  } // Comb small window NAFs\n\n\n  for (var i = len - 1; i >= 1; i -= 2) {\n    var a = i - 1;\n    var b = i;\n\n    if (wndWidth[a] !== 1 || wndWidth[b] !== 1) {\n      naf[a] = getNAF(coeffs[a], wndWidth[a]);\n      naf[b] = getNAF(coeffs[b], wndWidth[b]);\n      max = Math.max(naf[a].length, max);\n      max = Math.max(naf[b].length, max);\n      continue;\n    }\n\n    var comb = [points[a],\n    /* 1 */\n    null,\n    /* 3 */\n    null,\n    /* 5 */\n    points[b]\n    /* 7 */\n    ]; // Try to avoid Projective points, if possible\n\n    if (points[a].y.cmp(points[b].y) === 0) {\n      comb[1] = points[a].add(points[b]);\n      comb[2] = points[a].toJ().mixedAdd(points[b].neg());\n    } else if (points[a].y.cmp(points[b].y.redNeg()) === 0) {\n      comb[1] = points[a].toJ().mixedAdd(points[b]);\n      comb[2] = points[a].add(points[b].neg());\n    } else {\n      comb[1] = points[a].toJ().mixedAdd(points[b]);\n      comb[2] = points[a].toJ().mixedAdd(points[b].neg());\n    }\n\n    var index = [-3,\n    /* -1 -1 */\n    -1,\n    /* -1 0 */\n    -5,\n    /* -1 1 */\n    -7,\n    /* 0 -1 */\n    0,\n    /* 0 0 */\n    7,\n    /* 0 1 */\n    5,\n    /* 1 -1 */\n    1,\n    /* 1 0 */\n    3\n    /* 1 1 */\n    ];\n    var jsf = getJSF(coeffs[a], coeffs[b]);\n    max = Math.max(jsf[0].length, max);\n    naf[a] = new Array(max);\n    naf[b] = new Array(max);\n\n    for (var j = 0; j < max; j++) {\n      var ja = jsf[0][j] | 0;\n      var jb = jsf[1][j] | 0;\n      naf[a][j] = index[(ja + 1) * 3 + (jb + 1)];\n      naf[b][j] = 0;\n      wnd[a] = comb;\n    }\n  }\n\n  var acc = this.jpoint(null, null, null);\n  var tmp = this._wnafT4;\n\n  for (var i = max; i >= 0; i--) {\n    var k = 0;\n\n    while (i >= 0) {\n      var zero = true;\n\n      for (var j = 0; j < len; j++) {\n        tmp[j] = naf[j][i] | 0;\n        if (tmp[j] !== 0) zero = false;\n      }\n\n      if (!zero) break;\n      k++;\n      i--;\n    }\n\n    if (i >= 0) k++;\n    acc = acc.dblp(k);\n    if (i < 0) break;\n\n    for (var j = 0; j < len; j++) {\n      var z = tmp[j];\n      var p;\n      if (z === 0) continue;else if (z > 0) p = wnd[j][z - 1 >> 1];else if (z < 0) p = wnd[j][-z - 1 >> 1].neg();\n      if (p.type === 'affine') acc = acc.mixedAdd(p);else acc = acc.add(p);\n    }\n  } // Zeroify references\n\n\n  for (var i = 0; i < len; i++) {\n    wnd[i] = null;\n  }\n\n  return acc.toP();\n};\n\nfunction BasePoint(curve, type) {\n  this.curve = curve;\n  this.type = type;\n  this.precomputed = null;\n}\n\nBaseCurve.BasePoint = BasePoint;\n\nBasePoint.prototype.validate = function validate() {\n  return this.curve.validate(this);\n};\n\nBasePoint.prototype.precompute = function precompute(power) {\n  if (this.precomputed) return this;\n  var precomputed = {\n    doubles: null,\n    naf: null,\n    beta: null\n  };\n  precomputed.naf = this._getNAFPoints(8);\n  precomputed.doubles = this._getDoubles(4, power);\n  precomputed.beta = this._getBeta();\n  this.precomputed = precomputed;\n  return this;\n};\n\nBasePoint.prototype._getDoubles = function _getDoubles(step, power) {\n  if (this.precomputed && this.precomputed.doubles) return this.precomputed.doubles;\n  var doubles = [this];\n  var acc = this;\n\n  for (var i = 0; i < power; i += step) {\n    for (var j = 0; j < step; j++) {\n      acc = acc.dbl();\n    }\n\n    doubles.push(acc);\n  }\n\n  return {\n    step: step,\n    points: doubles\n  };\n};\n\nBasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {\n  if (this.precomputed && this.precomputed.naf) return this.precomputed.naf;\n  var res = [this];\n  var max = (1 << wnd) - 1;\n  var dbl = max === 1 ? null : this.dbl();\n\n  for (var i = 1; i < max; i++) {\n    res[i] = res[i - 1].add(dbl);\n  }\n\n  return {\n    wnd: wnd,\n    points: res\n  };\n};\n\nBasePoint.prototype._getBeta = function _getBeta() {\n  return null;\n};\n\nBasePoint.prototype.dblp = function dblp(k) {\n  var r = this;\n\n  for (var i = 0; i < k; i++) {\n    r = r.dbl();\n  }\n\n  return r;\n};","map":{"version":3,"sources":["/home/user/Desktop/react-wallet/node_modules/bitcore-lib-litecoin/node_modules/elliptic/lib/elliptic/curve/base.js"],"names":["bn","require","elliptic","getNAF","utils","getJSF","assert","BaseCurve","type","conf","p","red","prime","mont","zero","toRed","one","two","n","g","pointFromJSON","gRed","_wnafT1","Array","_wnafT2","_wnafT3","_wnafT4","module","exports","prototype","point","Error","validate","_fixedNafMul","k","doubles","_getDoubles","naf","I","step","repr","j","length","nafW","push","a","jpoint","b","i","mixedAdd","points","neg","add","toP","_wnafMul","w","nafPoints","_getNAFPoints","wnd","acc","dblp","z","_wnafMulAdd","defW","coeffs","len","wndWidth","max","Math","comb","y","cmp","toJ","redNeg","index","jsf","ja","jb","tmp","BasePoint","curve","precomputed","precompute","power","beta","_getBeta","dbl","res","r"],"mappings":"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","sourcesContent":["'use strict';\n\nvar bn = require('bn.js');\nvar elliptic = require('../../elliptic');\n\nvar getNAF = elliptic.utils.getNAF;\nvar getJSF = elliptic.utils.getJSF;\nvar assert = elliptic.utils.assert;\n\nfunction BaseCurve(type, conf) {\n  this.type = type;\n  this.p = new bn(conf.p, 16);\n\n  // Use Montgomery, when there is no fast reduction for the prime\n  this.red = conf.prime ? bn.red(conf.prime) : bn.mont(this.p);\n\n  // Useful for many curves\n  this.zero = new bn(0).toRed(this.red);\n  this.one = new bn(1).toRed(this.red);\n  this.two = new bn(2).toRed(this.red);\n\n  // Curve configuration, optional\n  this.n = conf.n && new bn(conf.n, 16);\n  this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);\n\n  // Temporary arrays\n  this._wnafT1 = new Array(4);\n  this._wnafT2 = new Array(4);\n  this._wnafT3 = new Array(4);\n  this._wnafT4 = new Array(4);\n}\nmodule.exports = BaseCurve;\n\nBaseCurve.prototype.point = function point() {\n  throw new Error('Not implemented');\n};\n\nBaseCurve.prototype.validate = function validate() {\n  throw new Error('Not implemented');\n};\n\nBaseCurve.prototype._fixedNafMul = function _fixedNafMul(p, k) {\n  var doubles = p._getDoubles();\n\n  var naf = getNAF(k, 1);\n  var I = (1 << (doubles.step + 1)) - (doubles.step % 2 === 0 ? 2 : 1);\n  I /= 3;\n\n  // Translate into more windowed form\n  var repr = [];\n  for (var j = 0; j < naf.length; j += doubles.step) {\n    var nafW = 0;\n    for (var k = j + doubles.step - 1; k >= j; k--)\n      nafW = (nafW << 1) + naf[k];\n    repr.push(nafW);\n  }\n\n  var a = this.jpoint(null, null, null);\n  var b = this.jpoint(null, null, null);\n  for (var i = I; i > 0; i--) {\n    for (var j = 0; j < repr.length; j++) {\n      var nafW = repr[j];\n      if (nafW === i)\n        b = b.mixedAdd(doubles.points[j]);\n      else if (nafW === -i)\n        b = b.mixedAdd(doubles.points[j].neg());\n    }\n    a = a.add(b);\n  }\n  return a.toP();\n};\n\nBaseCurve.prototype._wnafMul = function _wnafMul(p, k) {\n  var w = 4;\n\n  // Precompute window\n  var nafPoints = p._getNAFPoints(w);\n  w = nafPoints.wnd;\n  var wnd = nafPoints.points;\n\n  // Get NAF form\n  var naf = getNAF(k, w);\n\n  // Add `this`*(N+1) for every w-NAF index\n  var acc = this.jpoint(null, null, null);\n  for (var i = naf.length - 1; i >= 0; i--) {\n    // Count zeroes\n    for (var k = 0; i >= 0 && naf[i] === 0; i--)\n      k++;\n    if (i >= 0)\n      k++;\n    acc = acc.dblp(k);\n\n    if (i < 0)\n      break;\n    var z = naf[i];\n    assert(z !== 0);\n    if (p.type === 'affine') {\n      // J +- P\n      if (z > 0)\n        acc = acc.mixedAdd(wnd[(z - 1) >> 1]);\n      else\n        acc = acc.mixedAdd(wnd[(-z - 1) >> 1].neg());\n    } else {\n      // J +- J\n      if (z > 0)\n        acc = acc.add(wnd[(z - 1) >> 1]);\n      else\n        acc = acc.add(wnd[(-z - 1) >> 1].neg());\n    }\n  }\n  return p.type === 'affine' ? acc.toP() : acc;\n};\n\nBaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW,\n                                                       points,\n                                                       coeffs,\n                                                       len) {\n  var wndWidth = this._wnafT1;\n  var wnd = this._wnafT2;\n  var naf = this._wnafT3;\n\n  // Fill all arrays\n  var max = 0;\n  for (var i = 0; i < len; i++) {\n    var p = points[i];\n    var nafPoints = p._getNAFPoints(defW);\n    wndWidth[i] = nafPoints.wnd;\n    wnd[i] = nafPoints.points;\n  }\n\n  // Comb small window NAFs\n  for (var i = len - 1; i >= 1; i -= 2) {\n    var a = i - 1;\n    var b = i;\n    if (wndWidth[a] !== 1 || wndWidth[b] !== 1) {\n      naf[a] = getNAF(coeffs[a], wndWidth[a]);\n      naf[b] = getNAF(coeffs[b], wndWidth[b]);\n      max = Math.max(naf[a].length, max);\n      max = Math.max(naf[b].length, max);\n      continue;\n    }\n\n    var comb = [\n      points[a], /* 1 */\n      null, /* 3 */\n      null, /* 5 */\n      points[b] /* 7 */\n    ];\n\n    // Try to avoid Projective points, if possible\n    if (points[a].y.cmp(points[b].y) === 0) {\n      comb[1] = points[a].add(points[b]);\n      comb[2] = points[a].toJ().mixedAdd(points[b].neg());\n    } else if (points[a].y.cmp(points[b].y.redNeg()) === 0) {\n      comb[1] = points[a].toJ().mixedAdd(points[b]);\n      comb[2] = points[a].add(points[b].neg());\n    } else {\n      comb[1] = points[a].toJ().mixedAdd(points[b]);\n      comb[2] = points[a].toJ().mixedAdd(points[b].neg());\n    }\n\n    var index = [\n      -3, /* -1 -1 */\n      -1, /* -1 0 */\n      -5, /* -1 1 */\n      -7, /* 0 -1 */\n      0, /* 0 0 */\n      7, /* 0 1 */\n      5, /* 1 -1 */\n      1, /* 1 0 */\n      3  /* 1 1 */\n    ];\n\n    var jsf = getJSF(coeffs[a], coeffs[b]);\n    max = Math.max(jsf[0].length, max);\n    naf[a] = new Array(max);\n    naf[b] = new Array(max);\n    for (var j = 0; j < max; j++) {\n      var ja = jsf[0][j] | 0;\n      var jb = jsf[1][j] | 0;\n\n      naf[a][j] = index[(ja + 1) * 3 + (jb + 1)];\n      naf[b][j] = 0;\n      wnd[a] = comb;\n    }\n  }\n\n  var acc = this.jpoint(null, null, null);\n  var tmp = this._wnafT4;\n  for (var i = max; i >= 0; i--) {\n    var k = 0;\n\n    while (i >= 0) {\n      var zero = true;\n      for (var j = 0; j < len; j++) {\n        tmp[j] = naf[j][i] | 0;\n        if (tmp[j] !== 0)\n          zero = false;\n      }\n      if (!zero)\n        break;\n      k++;\n      i--;\n    }\n    if (i >= 0)\n      k++;\n    acc = acc.dblp(k);\n    if (i < 0)\n      break;\n\n    for (var j = 0; j < len; j++) {\n      var z = tmp[j];\n      var p;\n      if (z === 0)\n        continue;\n      else if (z > 0)\n        p = wnd[j][(z - 1) >> 1];\n      else if (z < 0)\n        p = wnd[j][(-z - 1) >> 1].neg();\n\n      if (p.type === 'affine')\n        acc = acc.mixedAdd(p);\n      else\n        acc = acc.add(p);\n    }\n  }\n  // Zeroify references\n  for (var i = 0; i < len; i++)\n    wnd[i] = null;\n  return acc.toP();\n};\n\nfunction BasePoint(curve, type) {\n  this.curve = curve;\n  this.type = type;\n  this.precomputed = null;\n}\nBaseCurve.BasePoint = BasePoint;\n\nBasePoint.prototype.validate = function validate() {\n  return this.curve.validate(this);\n};\n\nBasePoint.prototype.precompute = function precompute(power) {\n  if (this.precomputed)\n    return this;\n\n  var precomputed = {\n    doubles: null,\n    naf: null,\n    beta: null\n  };\n  precomputed.naf = this._getNAFPoints(8);\n  precomputed.doubles = this._getDoubles(4, power);\n  precomputed.beta = this._getBeta();\n  this.precomputed = precomputed;\n\n  return this;\n};\n\nBasePoint.prototype._getDoubles = function _getDoubles(step, power) {\n  if (this.precomputed && this.precomputed.doubles)\n    return this.precomputed.doubles;\n\n  var doubles = [ this ];\n  var acc = this;\n  for (var i = 0; i < power; i += step) {\n    for (var j = 0; j < step; j++)\n      acc = acc.dbl();\n    doubles.push(acc);\n  }\n  return {\n    step: step,\n    points: doubles\n  };\n};\n\nBasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {\n  if (this.precomputed && this.precomputed.naf)\n    return this.precomputed.naf;\n\n  var res = [ this ];\n  var max = (1 << wnd) - 1;\n  var dbl = max === 1 ? null : this.dbl();\n  for (var i = 1; i < max; i++)\n    res[i] = res[i - 1].add(dbl);\n  return {\n    wnd: wnd,\n    points: res\n  };\n};\n\nBasePoint.prototype._getBeta = function _getBeta() {\n  return null;\n};\n\nBasePoint.prototype.dblp = function dblp(k) {\n  var r = this;\n  for (var i = 0; i < k; i++)\n    r = r.dbl();\n  return r;\n};\n"]},"metadata":{},"sourceType":"script"}