{"ast":null,"code":"'use strict';\n\nvar Address = require('../address');\n\nvar BufferReader = require('../encoding/bufferreader');\n\nvar BufferWriter = require('../encoding/bufferwriter');\n\nvar Hash = require('../crypto/hash');\n\nvar Opcode = require('../opcode');\n\nvar PublicKey = require('../publickey');\n\nvar Signature = require('../crypto/signature');\n\nvar Networks = require('../networks');\n\nvar $ = require('../util/preconditions');\n\nvar _ = require('lodash');\n\nvar errors = require('../errors');\n\nvar buffer = require('buffer');\n\nvar BufferUtil = require('../util/buffer');\n\nvar JSUtil = require('../util/js');\n/**\n * A bitcoin transaction script. Each transaction's inputs and outputs\n * has a script that is evaluated to validate it's spending.\n *\n * See https://en.bitcoin.it/wiki/Script\n *\n * @constructor\n * @param {Object|string|Buffer=} from optional data to populate script\n */\n\n\nvar Script = function Script(from) {\n  if (!(this instanceof Script)) {\n    return new Script(from);\n  }\n\n  this.chunks = [];\n\n  if (BufferUtil.isBuffer(from)) {\n    return Script.fromBuffer(from);\n  } else if (from instanceof Address) {\n    return Script.fromAddress(from);\n  } else if (from instanceof Script) {\n    return Script.fromBuffer(from.toBuffer());\n  } else if (typeof from === 'string') {\n    return Script.fromString(from);\n  } else if (typeof from !== 'undefined') {\n    this.set(from);\n  }\n};\n\nScript.prototype.set = function (obj) {\n  this.chunks = obj.chunks || this.chunks;\n  return this;\n};\n\nScript.fromBuffer = function (buffer) {\n  var script = new Script();\n  script.chunks = [];\n  var br = new BufferReader(buffer);\n\n  while (!br.finished()) {\n    try {\n      var opcodenum = br.readUInt8();\n      var len, buf;\n\n      if (opcodenum > 0 && opcodenum < Opcode.OP_PUSHDATA1) {\n        len = opcodenum;\n        script.chunks.push({\n          buf: br.read(len),\n          len: len,\n          opcodenum: opcodenum\n        });\n      } else if (opcodenum === Opcode.OP_PUSHDATA1) {\n        len = br.readUInt8();\n        buf = br.read(len);\n        script.chunks.push({\n          buf: buf,\n          len: len,\n          opcodenum: opcodenum\n        });\n      } else if (opcodenum === Opcode.OP_PUSHDATA2) {\n        len = br.readUInt16LE();\n        buf = br.read(len);\n        script.chunks.push({\n          buf: buf,\n          len: len,\n          opcodenum: opcodenum\n        });\n      } else if (opcodenum === Opcode.OP_PUSHDATA4) {\n        len = br.readUInt32LE();\n        buf = br.read(len);\n        script.chunks.push({\n          buf: buf,\n          len: len,\n          opcodenum: opcodenum\n        });\n      } else {\n        script.chunks.push({\n          opcodenum: opcodenum\n        });\n      }\n    } catch (e) {\n      if (e instanceof RangeError) {\n        throw new errors.Script.InvalidBuffer(buffer.toString('hex'));\n      }\n\n      throw e;\n    }\n  }\n\n  return script;\n};\n\nScript.prototype.toBuffer = function () {\n  var bw = new BufferWriter();\n\n  for (var i = 0; i < this.chunks.length; i++) {\n    var chunk = this.chunks[i];\n    var opcodenum = chunk.opcodenum;\n    bw.writeUInt8(chunk.opcodenum);\n\n    if (chunk.buf) {\n      if (opcodenum < Opcode.OP_PUSHDATA1) {\n        bw.write(chunk.buf);\n      } else if (opcodenum === Opcode.OP_PUSHDATA1) {\n        bw.writeUInt8(chunk.len);\n        bw.write(chunk.buf);\n      } else if (opcodenum === Opcode.OP_PUSHDATA2) {\n        bw.writeUInt16LE(chunk.len);\n        bw.write(chunk.buf);\n      } else if (opcodenum === Opcode.OP_PUSHDATA4) {\n        bw.writeUInt32LE(chunk.len);\n        bw.write(chunk.buf);\n      }\n    }\n  }\n\n  return bw.concat();\n};\n\nScript.fromASM = function (str) {\n  var script = new Script();\n  script.chunks = [];\n  var tokens = str.split(' ');\n  var i = 0;\n\n  while (i < tokens.length) {\n    var token = tokens[i];\n    var opcode = Opcode(token);\n    var opcodenum = opcode.toNumber();\n\n    if (_.isUndefined(opcodenum)) {\n      var buf = new Buffer(tokens[i], 'hex');\n      script.chunks.push({\n        buf: buf,\n        len: buf.length,\n        opcodenum: buf.length\n      });\n      i = i + 1;\n    } else if (opcodenum === Opcode.OP_PUSHDATA1 || opcodenum === Opcode.OP_PUSHDATA2 || opcodenum === Opcode.OP_PUSHDATA4) {\n      script.chunks.push({\n        buf: new Buffer(tokens[i + 2], 'hex'),\n        len: parseInt(tokens[i + 1]),\n        opcodenum: opcodenum\n      });\n      i = i + 3;\n    } else {\n      script.chunks.push({\n        opcodenum: opcodenum\n      });\n      i = i + 1;\n    }\n  }\n\n  return script;\n};\n\nScript.fromHex = function (str) {\n  return new Script(new buffer.Buffer(str, 'hex'));\n};\n\nScript.fromString = function (str) {\n  if (JSUtil.isHexa(str) || str.length === 0) {\n    return new Script(new buffer.Buffer(str, 'hex'));\n  }\n\n  var script = new Script();\n  script.chunks = [];\n  var tokens = str.split(' ');\n  var i = 0;\n\n  while (i < tokens.length) {\n    var token = tokens[i];\n    var opcode = Opcode(token);\n    var opcodenum = opcode.toNumber();\n\n    if (_.isUndefined(opcodenum)) {\n      opcodenum = parseInt(token);\n\n      if (opcodenum > 0 && opcodenum < Opcode.OP_PUSHDATA1) {\n        script.chunks.push({\n          buf: new Buffer(tokens[i + 1].slice(2), 'hex'),\n          len: opcodenum,\n          opcodenum: opcodenum\n        });\n        i = i + 2;\n      } else {\n        throw new Error('Invalid script: ' + JSON.stringify(str));\n      }\n    } else if (opcodenum === Opcode.OP_PUSHDATA1 || opcodenum === Opcode.OP_PUSHDATA2 || opcodenum === Opcode.OP_PUSHDATA4) {\n      if (tokens[i + 2].slice(0, 2) !== '0x') {\n        throw new Error('Pushdata data must start with 0x');\n      }\n\n      script.chunks.push({\n        buf: new Buffer(tokens[i + 2].slice(2), 'hex'),\n        len: parseInt(tokens[i + 1]),\n        opcodenum: opcodenum\n      });\n      i = i + 3;\n    } else {\n      script.chunks.push({\n        opcodenum: opcodenum\n      });\n      i = i + 1;\n    }\n  }\n\n  return script;\n};\n\nScript.prototype._chunkToString = function (chunk, type) {\n  var opcodenum = chunk.opcodenum;\n  var asm = type === 'asm';\n  var str = '';\n\n  if (!chunk.buf) {\n    // no data chunk\n    if (typeof Opcode.reverseMap[opcodenum] !== 'undefined') {\n      str = str + ' ' + Opcode(opcodenum).toString();\n    } else {\n      var numstr = opcodenum.toString(16);\n\n      if (numstr.length % 2 !== 0) {\n        numstr = '0' + numstr;\n      }\n\n      if (asm) {\n        str = str + ' ' + numstr;\n      } else {\n        str = str + ' ' + '0x' + numstr;\n      }\n    }\n  } else {\n    // data chunk\n    if (opcodenum === Opcode.OP_PUSHDATA1 || opcodenum === Opcode.OP_PUSHDATA2 || opcodenum === Opcode.OP_PUSHDATA4) {\n      str = str + ' ' + Opcode(opcodenum).toString();\n    }\n\n    if (chunk.len > 0) {\n      if (asm) {\n        str = str + ' ' + chunk.buf.toString('hex');\n      } else {\n        str = str + ' ' + chunk.len + ' ' + '0x' + chunk.buf.toString('hex');\n      }\n    }\n  }\n\n  return str;\n};\n\nScript.prototype.toASM = function () {\n  var str = '';\n\n  for (var i = 0; i < this.chunks.length; i++) {\n    var chunk = this.chunks[i];\n    str += this._chunkToString(chunk, 'asm');\n  }\n\n  return str.substr(1);\n};\n\nScript.prototype.toString = function () {\n  var str = '';\n\n  for (var i = 0; i < this.chunks.length; i++) {\n    var chunk = this.chunks[i];\n    str += this._chunkToString(chunk);\n  }\n\n  return str.substr(1);\n};\n\nScript.prototype.toHex = function () {\n  return this.toBuffer().toString('hex');\n};\n\nScript.prototype.inspect = function () {\n  return '<Script: ' + this.toString() + '>';\n}; // script classification methods\n\n/**\n * @returns {boolean} if this is a pay to pubkey hash output script\n */\n\n\nScript.prototype.isPublicKeyHashOut = function () {\n  return !!(this.chunks.length === 5 && this.chunks[0].opcodenum === Opcode.OP_DUP && this.chunks[1].opcodenum === Opcode.OP_HASH160 && this.chunks[2].buf && this.chunks[2].buf.length === 20 && this.chunks[3].opcodenum === Opcode.OP_EQUALVERIFY && this.chunks[4].opcodenum === Opcode.OP_CHECKSIG);\n};\n/**\n * @returns {boolean} if this is a pay to public key hash input script\n */\n\n\nScript.prototype.isPublicKeyHashIn = function () {\n  if (this.chunks.length === 2) {\n    var signatureBuf = this.chunks[0].buf;\n    var pubkeyBuf = this.chunks[1].buf;\n\n    if (signatureBuf && signatureBuf.length && signatureBuf[0] === 0x30 && pubkeyBuf && pubkeyBuf.length) {\n      var version = pubkeyBuf[0];\n\n      if ((version === 0x04 || version === 0x06 || version === 0x07) && pubkeyBuf.length === 65) {\n        return true;\n      } else if ((version === 0x03 || version === 0x02) && pubkeyBuf.length === 33) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n};\n\nScript.prototype.getPublicKey = function () {\n  $.checkState(this.isPublicKeyOut(), 'Can\\'t retreive PublicKey from a non-PK output');\n  return this.chunks[0].buf;\n};\n\nScript.prototype.getPublicKeyHash = function () {\n  $.checkState(this.isPublicKeyHashOut(), 'Can\\'t retrieve PublicKeyHash from a non-PKH output');\n  return this.chunks[2].buf;\n};\n/**\n * @returns {boolean} if this is a public key output script\n */\n\n\nScript.prototype.isPublicKeyOut = function () {\n  if (this.chunks.length === 2 && this.chunks[0].buf && this.chunks[0].buf.length && this.chunks[1].opcodenum === Opcode.OP_CHECKSIG) {\n    var pubkeyBuf = this.chunks[0].buf;\n    var version = pubkeyBuf[0];\n    var isVersion = false;\n\n    if ((version === 0x04 || version === 0x06 || version === 0x07) && pubkeyBuf.length === 65) {\n      isVersion = true;\n    } else if ((version === 0x03 || version === 0x02) && pubkeyBuf.length === 33) {\n      isVersion = true;\n    }\n\n    if (isVersion) {\n      return PublicKey.isValid(pubkeyBuf);\n    }\n  }\n\n  return false;\n};\n/**\n * @returns {boolean} if this is a pay to public key input script\n */\n\n\nScript.prototype.isPublicKeyIn = function () {\n  if (this.chunks.length === 1) {\n    var signatureBuf = this.chunks[0].buf;\n\n    if (signatureBuf && signatureBuf.length && signatureBuf[0] === 0x30) {\n      return true;\n    }\n  }\n\n  return false;\n};\n/**\n * @returns {boolean} if this is a p2sh output script\n */\n\n\nScript.prototype.isScriptHashOut = function () {\n  var buf = this.toBuffer();\n  return buf.length === 23 && buf[0] === Opcode.OP_HASH160 && buf[1] === 0x14 && buf[buf.length - 1] === Opcode.OP_EQUAL;\n};\n/**\n * @returns {boolean} if this is a p2sh input script\n * Note that these are frequently indistinguishable from pubkeyhashin\n */\n\n\nScript.prototype.isScriptHashIn = function () {\n  if (this.chunks.length <= 1) {\n    return false;\n  }\n\n  var redeemChunk = this.chunks[this.chunks.length - 1];\n  var redeemBuf = redeemChunk.buf;\n\n  if (!redeemBuf) {\n    return false;\n  }\n\n  var redeemScript;\n\n  try {\n    redeemScript = Script.fromBuffer(redeemBuf);\n  } catch (e) {\n    if (e instanceof errors.Script.InvalidBuffer) {\n      return false;\n    }\n\n    throw e;\n  }\n\n  var type = redeemScript.classify();\n  return type !== Script.types.UNKNOWN;\n};\n/**\n * @returns {boolean} if this is a mutlsig output script\n */\n\n\nScript.prototype.isMultisigOut = function () {\n  return this.chunks.length > 3 && Opcode.isSmallIntOp(this.chunks[0].opcodenum) && this.chunks.slice(1, this.chunks.length - 2).every(function (obj) {\n    return obj.buf && BufferUtil.isBuffer(obj.buf);\n  }) && Opcode.isSmallIntOp(this.chunks[this.chunks.length - 2].opcodenum) && this.chunks[this.chunks.length - 1].opcodenum === Opcode.OP_CHECKMULTISIG;\n};\n/**\n * @returns {boolean} if this is a multisig input script\n */\n\n\nScript.prototype.isMultisigIn = function () {\n  return this.chunks.length >= 2 && this.chunks[0].opcodenum === 0 && this.chunks.slice(1, this.chunks.length).every(function (obj) {\n    return obj.buf && BufferUtil.isBuffer(obj.buf) && Signature.isTxDER(obj.buf);\n  });\n};\n/**\n * @returns {boolean} true if this is a valid standard OP_RETURN output\n */\n\n\nScript.prototype.isDataOut = function () {\n  return this.chunks.length >= 1 && this.chunks[0].opcodenum === Opcode.OP_RETURN && (this.chunks.length === 1 || this.chunks.length === 2 && this.chunks[1].buf && this.chunks[1].buf.length <= Script.OP_RETURN_STANDARD_SIZE && this.chunks[1].length === this.chunks.len);\n};\n/**\n * Retrieve the associated data for this script.\n * In the case of a pay to public key hash or P2SH, return the hash.\n * In the case of a standard OP_RETURN, return the data\n * @returns {Buffer}\n */\n\n\nScript.prototype.getData = function () {\n  if (this.isDataOut() || this.isScriptHashOut()) {\n    if (_.isUndefined(this.chunks[1])) {\n      return new Buffer(0);\n    } else {\n      return new Buffer(this.chunks[1].buf);\n    }\n  }\n\n  if (this.isPublicKeyHashOut()) {\n    return new Buffer(this.chunks[2].buf);\n  }\n\n  throw new Error('Unrecognized script type to get data from');\n};\n/**\n * @returns {boolean} if the script is only composed of data pushing\n * opcodes or small int opcodes (OP_0, OP_1, ..., OP_16)\n */\n\n\nScript.prototype.isPushOnly = function () {\n  return _.every(this.chunks, function (chunk) {\n    return chunk.opcodenum <= Opcode.OP_16;\n  });\n};\n\nScript.types = {};\nScript.types.UNKNOWN = 'Unknown';\nScript.types.PUBKEY_OUT = 'Pay to public key';\nScript.types.PUBKEY_IN = 'Spend from public key';\nScript.types.PUBKEYHASH_OUT = 'Pay to public key hash';\nScript.types.PUBKEYHASH_IN = 'Spend from public key hash';\nScript.types.SCRIPTHASH_OUT = 'Pay to script hash';\nScript.types.SCRIPTHASH_IN = 'Spend from script hash';\nScript.types.MULTISIG_OUT = 'Pay to multisig';\nScript.types.MULTISIG_IN = 'Spend from multisig';\nScript.types.DATA_OUT = 'Data push';\nScript.OP_RETURN_STANDARD_SIZE = 80;\nScript.identifiers = {};\nScript.identifiers.PUBKEY_OUT = Script.prototype.isPublicKeyOut;\nScript.identifiers.PUBKEY_IN = Script.prototype.isPublicKeyIn;\nScript.identifiers.PUBKEYHASH_OUT = Script.prototype.isPublicKeyHashOut;\nScript.identifiers.PUBKEYHASH_IN = Script.prototype.isPublicKeyHashIn;\nScript.identifiers.MULTISIG_OUT = Script.prototype.isMultisigOut;\nScript.identifiers.MULTISIG_IN = Script.prototype.isMultisigIn;\nScript.identifiers.SCRIPTHASH_OUT = Script.prototype.isScriptHashOut;\nScript.identifiers.SCRIPTHASH_IN = Script.prototype.isScriptHashIn;\nScript.identifiers.DATA_OUT = Script.prototype.isDataOut;\n/**\n * @returns {object} The Script type if it is a known form,\n * or Script.UNKNOWN if it isn't\n */\n\nScript.prototype.classify = function () {\n  for (var type in Script.identifiers) {\n    if (Script.identifiers[type].bind(this)()) {\n      return Script.types[type];\n    }\n  }\n\n  return Script.types.UNKNOWN;\n};\n/**\n * @returns {boolean} if script is one of the known types\n */\n\n\nScript.prototype.isStandard = function () {\n  // TODO: Add BIP62 compliance\n  return this.classify() !== Script.types.UNKNOWN;\n}; // Script construction methods\n\n/**\n * Adds a script element at the start of the script.\n * @param {*} obj a string, number, Opcode, Buffer, or object to add\n * @returns {Script} this script instance\n */\n\n\nScript.prototype.prepend = function (obj) {\n  this._addByType(obj, true);\n\n  return this;\n};\n/**\n * Compares a script with another script\n */\n\n\nScript.prototype.equals = function (script) {\n  $.checkState(script instanceof Script, 'Must provide another script');\n\n  if (this.chunks.length !== script.chunks.length) {\n    return false;\n  }\n\n  var i;\n\n  for (i = 0; i < this.chunks.length; i++) {\n    if (BufferUtil.isBuffer(this.chunks[i].buf) && !BufferUtil.isBuffer(script.chunks[i].buf)) {\n      return false;\n    }\n\n    if (BufferUtil.isBuffer(this.chunks[i].buf) && !BufferUtil.equals(this.chunks[i].buf, script.chunks[i].buf)) {\n      return false;\n    } else if (this.chunks[i].opcodenum !== script.chunks[i].opcodenum) {\n      return false;\n    }\n  }\n\n  return true;\n};\n/**\n * Adds a script element to the end of the script.\n *\n * @param {*} obj a string, number, Opcode, Buffer, or object to add\n * @returns {Script} this script instance\n *\n */\n\n\nScript.prototype.add = function (obj) {\n  this._addByType(obj, false);\n\n  return this;\n};\n\nScript.prototype._addByType = function (obj, prepend) {\n  if (typeof obj === 'string') {\n    this._addOpcode(obj, prepend);\n  } else if (typeof obj === 'number') {\n    this._addOpcode(obj, prepend);\n  } else if (obj instanceof Opcode) {\n    this._addOpcode(obj, prepend);\n  } else if (BufferUtil.isBuffer(obj)) {\n    this._addBuffer(obj, prepend);\n  } else if (obj instanceof Script) {\n    this.chunks = this.chunks.concat(obj.chunks);\n  } else if (typeof obj === 'object') {\n    this._insertAtPosition(obj, prepend);\n  } else {\n    throw new Error('Invalid script chunk');\n  }\n};\n\nScript.prototype._insertAtPosition = function (op, prepend) {\n  if (prepend) {\n    this.chunks.unshift(op);\n  } else {\n    this.chunks.push(op);\n  }\n};\n\nScript.prototype._addOpcode = function (opcode, prepend) {\n  var op;\n\n  if (typeof opcode === 'number') {\n    op = opcode;\n  } else if (opcode instanceof Opcode) {\n    op = opcode.toNumber();\n  } else {\n    op = Opcode(opcode).toNumber();\n  }\n\n  this._insertAtPosition({\n    opcodenum: op\n  }, prepend);\n\n  return this;\n};\n\nScript.prototype._addBuffer = function (buf, prepend) {\n  var opcodenum;\n  var len = buf.length;\n\n  if (len >= 0 && len < Opcode.OP_PUSHDATA1) {\n    opcodenum = len;\n  } else if (len < Math.pow(2, 8)) {\n    opcodenum = Opcode.OP_PUSHDATA1;\n  } else if (len < Math.pow(2, 16)) {\n    opcodenum = Opcode.OP_PUSHDATA2;\n  } else if (len < Math.pow(2, 32)) {\n    opcodenum = Opcode.OP_PUSHDATA4;\n  } else {\n    throw new Error('You can\\'t push that much data');\n  }\n\n  this._insertAtPosition({\n    buf: buf,\n    len: len,\n    opcodenum: opcodenum\n  }, prepend);\n\n  return this;\n};\n\nScript.prototype.removeCodeseparators = function () {\n  var chunks = [];\n\n  for (var i = 0; i < this.chunks.length; i++) {\n    if (this.chunks[i].opcodenum !== Opcode.OP_CODESEPARATOR) {\n      chunks.push(this.chunks[i]);\n    }\n  }\n\n  this.chunks = chunks;\n  return this;\n}; // high level script builder methods\n\n/**\n * @returns {Script} a new Multisig output script for given public keys,\n * requiring m of those public keys to spend\n * @param {PublicKey[]} publicKeys - list of all public keys controlling the output\n * @param {number} threshold - amount of required signatures to spend the output\n * @param {Object=} opts - Several options:\n *        - noSorting: defaults to false, if true, don't sort the given\n *                      public keys before creating the script\n */\n\n\nScript.buildMultisigOut = function (publicKeys, threshold, opts) {\n  $.checkArgument(threshold <= publicKeys.length, 'Number of required signatures must be less than or equal to the number of public keys');\n  opts = opts || {};\n  var script = new Script();\n  script.add(Opcode.smallInt(threshold));\n  publicKeys = _.map(publicKeys, PublicKey);\n  var sorted = publicKeys;\n\n  if (!opts.noSorting) {\n    sorted = _.sortBy(publicKeys, function (publicKey) {\n      return publicKey.toString('hex');\n    });\n  }\n\n  for (var i = 0; i < sorted.length; i++) {\n    var publicKey = sorted[i];\n    script.add(publicKey.toBuffer());\n  }\n\n  script.add(Opcode.smallInt(publicKeys.length));\n  script.add(Opcode.OP_CHECKMULTISIG);\n  return script;\n};\n/**\n * A new Multisig input script for the given public keys, requiring m of those public keys to spend\n *\n * @param {PublicKey[]} pubkeys list of all public keys controlling the output\n * @param {number} threshold amount of required signatures to spend the output\n * @param {Array} signatures and array of signature buffers to append to the script\n * @param {Object=} opts\n * @param {boolean=} opts.noSorting don't sort the given public keys before creating the script (false by default)\n * @param {Script=} opts.cachedMultisig don't recalculate the redeemScript\n *\n * @returns {Script}\n */\n\n\nScript.buildMultisigIn = function (pubkeys, threshold, signatures, opts) {\n  $.checkArgument(_.isArray(pubkeys));\n  $.checkArgument(_.isNumber(threshold));\n  $.checkArgument(_.isArray(signatures));\n  opts = opts || {};\n  var s = new Script();\n  s.add(Opcode.OP_0);\n\n  _.each(signatures, function (signature) {\n    $.checkArgument(BufferUtil.isBuffer(signature), 'Signatures must be an array of Buffers'); // TODO: allow signatures to be an array of Signature objects\n\n    s.add(signature);\n  });\n\n  return s;\n};\n/**\n * A new P2SH Multisig input script for the given public keys, requiring m of those public keys to spend\n *\n * @param {PublicKey[]} pubkeys list of all public keys controlling the output\n * @param {number} threshold amount of required signatures to spend the output\n * @param {Array} signatures and array of signature buffers to append to the script\n * @param {Object=} opts\n * @param {boolean=} opts.noSorting don't sort the given public keys before creating the script (false by default)\n * @param {Script=} opts.cachedMultisig don't recalculate the redeemScript\n *\n * @returns {Script}\n */\n\n\nScript.buildP2SHMultisigIn = function (pubkeys, threshold, signatures, opts) {\n  $.checkArgument(_.isArray(pubkeys));\n  $.checkArgument(_.isNumber(threshold));\n  $.checkArgument(_.isArray(signatures));\n  opts = opts || {};\n  var s = new Script();\n  s.add(Opcode.OP_0);\n\n  _.each(signatures, function (signature) {\n    $.checkArgument(BufferUtil.isBuffer(signature), 'Signatures must be an array of Buffers'); // TODO: allow signatures to be an array of Signature objects\n\n    s.add(signature);\n  });\n\n  s.add((opts.cachedMultisig || Script.buildMultisigOut(pubkeys, threshold, opts)).toBuffer());\n  return s;\n};\n/**\n * @returns {Script} a new pay to public key hash output for the given\n * address or public key\n * @param {(Address|PublicKey)} to - destination address or public key\n */\n\n\nScript.buildPublicKeyHashOut = function (to) {\n  $.checkArgument(!_.isUndefined(to));\n  $.checkArgument(to instanceof PublicKey || to instanceof Address || _.isString(to));\n\n  if (to instanceof PublicKey) {\n    to = to.toAddress();\n  } else if (_.isString(to)) {\n    to = new Address(to);\n  }\n\n  var s = new Script();\n  s.add(Opcode.OP_DUP).add(Opcode.OP_HASH160).add(to.hashBuffer).add(Opcode.OP_EQUALVERIFY).add(Opcode.OP_CHECKSIG);\n  s._network = to.network;\n  return s;\n};\n/**\n * @returns {Script} a new pay to public key output for the given\n *  public key\n */\n\n\nScript.buildPublicKeyOut = function (pubkey) {\n  $.checkArgument(pubkey instanceof PublicKey);\n  var s = new Script();\n  s.add(pubkey.toBuffer()).add(Opcode.OP_CHECKSIG);\n  return s;\n};\n/**\n * @returns {Script} a new OP_RETURN script with data\n * @param {(string|Buffer)} data - the data to embed in the output\n * @param {(string)} encoding - the type of encoding of the string\n */\n\n\nScript.buildDataOut = function (data, encoding) {\n  $.checkArgument(_.isUndefined(data) || _.isString(data) || BufferUtil.isBuffer(data));\n\n  if (_.isString(data)) {\n    data = new Buffer(data, encoding);\n  }\n\n  var s = new Script();\n  s.add(Opcode.OP_RETURN);\n\n  if (!_.isUndefined(data)) {\n    s.add(data);\n  }\n\n  return s;\n};\n/**\n * @param {Script|Address} script - the redeemScript for the new p2sh output.\n *    It can also be a p2sh address\n * @returns {Script} new pay to script hash script for given script\n */\n\n\nScript.buildScriptHashOut = function (script) {\n  $.checkArgument(script instanceof Script || script instanceof Address && script.isPayToScriptHash());\n  var s = new Script();\n  s.add(Opcode.OP_HASH160).add(script instanceof Address ? script.hashBuffer : Hash.sha256ripemd160(script.toBuffer())).add(Opcode.OP_EQUAL);\n  s._network = script._network || script.network;\n  return s;\n};\n/**\n * Builds a scriptSig (a script for an input) that signs a public key output script.\n *\n * @param {Signature|Buffer} signature - a Signature object, or the signature in DER canonical encoding\n * @param {number=} sigtype - the type of the signature (defaults to SIGHASH_ALL)\n */\n\n\nScript.buildPublicKeyIn = function (signature, sigtype) {\n  $.checkArgument(signature instanceof Signature || BufferUtil.isBuffer(signature));\n  $.checkArgument(_.isUndefined(sigtype) || _.isNumber(sigtype));\n\n  if (signature instanceof Signature) {\n    signature = signature.toBuffer();\n  }\n\n  var script = new Script();\n  script.add(BufferUtil.concat([signature, BufferUtil.integerAsSingleByteBuffer(sigtype || Signature.SIGHASH_ALL)]));\n  return script;\n};\n/**\n * Builds a scriptSig (a script for an input) that signs a public key hash\n * output script.\n *\n * @param {Buffer|string|PublicKey} publicKey\n * @param {Signature|Buffer} signature - a Signature object, or the signature in DER canonical encoding\n * @param {number=} sigtype - the type of the signature (defaults to SIGHASH_ALL)\n */\n\n\nScript.buildPublicKeyHashIn = function (publicKey, signature, sigtype) {\n  $.checkArgument(signature instanceof Signature || BufferUtil.isBuffer(signature));\n  $.checkArgument(_.isUndefined(sigtype) || _.isNumber(sigtype));\n\n  if (signature instanceof Signature) {\n    signature = signature.toBuffer();\n  }\n\n  var script = new Script().add(BufferUtil.concat([signature, BufferUtil.integerAsSingleByteBuffer(sigtype || Signature.SIGHASH_ALL)])).add(new PublicKey(publicKey).toBuffer());\n  return script;\n};\n/**\n * @returns {Script} an empty script\n */\n\n\nScript.empty = function () {\n  return new Script();\n};\n/**\n * @returns {Script} a new pay to script hash script that pays to this script\n */\n\n\nScript.prototype.toScriptHashOut = function () {\n  return Script.buildScriptHashOut(this);\n};\n/**\n * @return {Script} an output script built from the address\n */\n\n\nScript.fromAddress = function (address) {\n  address = Address(address);\n\n  if (address.isPayToScriptHash()) {\n    return Script.buildScriptHashOut(address);\n  } else if (address.isPayToPublicKeyHash()) {\n    return Script.buildPublicKeyHashOut(address);\n  }\n\n  throw new errors.Script.UnrecognizedAddress(address);\n};\n/**\n * Will return the associated address information object\n * @return {Address|boolean}\n */\n\n\nScript.prototype.getAddressInfo = function (opts) {\n  if (this._isInput) {\n    return this._getInputAddressInfo();\n  } else if (this._isOutput) {\n    return this._getOutputAddressInfo();\n  } else {\n    var info = this._getOutputAddressInfo();\n\n    if (!info) {\n      return this._getInputAddressInfo();\n    }\n\n    return info;\n  }\n};\n/**\n * Will return the associated output scriptPubKey address information object\n * @return {Address|boolean}\n * @private\n */\n\n\nScript.prototype._getOutputAddressInfo = function () {\n  var info = {};\n\n  if (this.isScriptHashOut()) {\n    info.hashBuffer = this.getData();\n    info.type = Address.PayToScriptHash;\n  } else if (this.isPublicKeyHashOut()) {\n    info.hashBuffer = this.getData();\n    info.type = Address.PayToPublicKeyHash;\n  } else {\n    return false;\n  }\n\n  return info;\n};\n/**\n * Will return the associated input scriptSig address information object\n * @return {Address|boolean}\n * @private\n */\n\n\nScript.prototype._getInputAddressInfo = function () {\n  var info = {};\n\n  if (this.isPublicKeyHashIn()) {\n    // hash the publickey found in the scriptSig\n    info.hashBuffer = Hash.sha256ripemd160(this.chunks[1].buf);\n    info.type = Address.PayToPublicKeyHash;\n  } else if (this.isScriptHashIn()) {\n    // hash the redeemscript found at the end of the scriptSig\n    info.hashBuffer = Hash.sha256ripemd160(this.chunks[this.chunks.length - 1].buf);\n    info.type = Address.PayToScriptHash;\n  } else {\n    return false;\n  }\n\n  return info;\n};\n/**\n * @param {Network=} network\n * @return {Address|boolean} the associated address for this script if possible, or false\n */\n\n\nScript.prototype.toAddress = function (network) {\n  var info = this.getAddressInfo();\n\n  if (!info) {\n    return false;\n  }\n\n  info.network = Networks.get(network) || this._network || Networks.defaultNetwork;\n  return new Address(info);\n};\n/**\n * Analogous to bitcoind's FindAndDelete. Find and delete equivalent chunks,\n * typically used with push data chunks.  Note that this will find and delete\n * not just the same data, but the same data with the same push data op as\n * produced by default. i.e., if a pushdata in a tx does not use the minimal\n * pushdata op, then when you try to remove the data it is pushing, it will not\n * be removed, because they do not use the same pushdata op.\n */\n\n\nScript.prototype.findAndDelete = function (script) {\n  var buf = script.toBuffer();\n  var hex = buf.toString('hex');\n\n  for (var i = 0; i < this.chunks.length; i++) {\n    var script2 = Script({\n      chunks: [this.chunks[i]]\n    });\n    var buf2 = script2.toBuffer();\n    var hex2 = buf2.toString('hex');\n\n    if (hex === hex2) {\n      this.chunks.splice(i, 1);\n    }\n  }\n\n  return this;\n};\n/**\n * Comes from bitcoind's script interpreter CheckMinimalPush function\n * @returns {boolean} if the chunk {i} is the smallest way to push that particular data.\n */\n\n\nScript.prototype.checkMinimalPush = function (i) {\n  var chunk = this.chunks[i];\n  var buf = chunk.buf;\n  var opcodenum = chunk.opcodenum;\n\n  if (!buf) {\n    return true;\n  }\n\n  if (buf.length === 0) {\n    // Could have used OP_0.\n    return opcodenum === Opcode.OP_0;\n  } else if (buf.length === 1 && buf[0] >= 1 && buf[0] <= 16) {\n    // Could have used OP_1 .. OP_16.\n    return opcodenum === Opcode.OP_1 + (buf[0] - 1);\n  } else if (buf.length === 1 && buf[0] === 0x81) {\n    // Could have used OP_1NEGATE\n    return opcodenum === Opcode.OP_1NEGATE;\n  } else if (buf.length <= 75) {\n    // Could have used a direct push (opcode indicating number of bytes pushed + those bytes).\n    return opcodenum === buf.length;\n  } else if (buf.length <= 255) {\n    // Could have used OP_PUSHDATA.\n    return opcodenum === Opcode.OP_PUSHDATA1;\n  } else if (buf.length <= 65535) {\n    // Could have used OP_PUSHDATA2.\n    return opcodenum === Opcode.OP_PUSHDATA2;\n  }\n\n  return true;\n};\n/**\n * Comes from bitcoind's script DecodeOP_N function\n * @param {number} opcode\n * @returns {number} numeric value in range of 0 to 16\n */\n\n\nScript.prototype._decodeOP_N = function (opcode) {\n  if (opcode === Opcode.OP_0) {\n    return 0;\n  } else if (opcode >= Opcode.OP_1 && opcode <= Opcode.OP_16) {\n    return opcode - (Opcode.OP_1 - 1);\n  } else {\n    throw new Error('Invalid opcode: ' + JSON.stringify(opcode));\n  }\n};\n/**\n * Comes from bitcoind's script GetSigOpCount(boolean) function\n * @param {boolean} use current (true) or pre-version-0.6 (false) logic\n * @returns {number} number of signature operations required by this script\n */\n\n\nScript.prototype.getSignatureOperationsCount = function (accurate) {\n  accurate = _.isUndefined(accurate) ? true : accurate;\n  var self = this;\n  var n = 0;\n  var lastOpcode = Opcode.OP_INVALIDOPCODE;\n\n  _.each(self.chunks, function getChunk(chunk) {\n    var opcode = chunk.opcodenum;\n\n    if (opcode == Opcode.OP_CHECKSIG || opcode == Opcode.OP_CHECKSIGVERIFY) {\n      n++;\n    } else if (opcode == Opcode.OP_CHECKMULTISIG || opcode == Opcode.OP_CHECKMULTISIGVERIFY) {\n      if (accurate && lastOpcode >= Opcode.OP_1 && lastOpcode <= Opcode.OP_16) {\n        n += self._decodeOP_N(lastOpcode);\n      } else {\n        n += 20;\n      }\n    }\n\n    lastOpcode = opcode;\n  });\n\n  return n;\n};\n\nmodule.exports = Script;","map":{"version":3,"sources":["/home/user/Desktop/paper/node_modules/bitcore-lib-litecoin/lib/script/script.js"],"names":["Address","require","BufferReader","BufferWriter","Hash","Opcode","PublicKey","Signature","Networks","$","_","errors","buffer","BufferUtil","JSUtil","Script","from","chunks","isBuffer","fromBuffer","fromAddress","toBuffer","fromString","set","prototype","obj","script","br","finished","opcodenum","readUInt8","len","buf","OP_PUSHDATA1","push","read","OP_PUSHDATA2","readUInt16LE","OP_PUSHDATA4","readUInt32LE","e","RangeError","InvalidBuffer","toString","bw","i","length","chunk","writeUInt8","write","writeUInt16LE","writeUInt32LE","concat","fromASM","str","tokens","split","token","opcode","toNumber","isUndefined","Buffer","parseInt","fromHex","isHexa","slice","Error","JSON","stringify","_chunkToString","type","asm","reverseMap","numstr","toASM","substr","toHex","inspect","isPublicKeyHashOut","OP_DUP","OP_HASH160","OP_EQUALVERIFY","OP_CHECKSIG","isPublicKeyHashIn","signatureBuf","pubkeyBuf","version","getPublicKey","checkState","isPublicKeyOut","getPublicKeyHash","isVersion","isValid","isPublicKeyIn","isScriptHashOut","OP_EQUAL","isScriptHashIn","redeemChunk","redeemBuf","redeemScript","classify","types","UNKNOWN","isMultisigOut","isSmallIntOp","every","OP_CHECKMULTISIG","isMultisigIn","isTxDER","isDataOut","OP_RETURN","OP_RETURN_STANDARD_SIZE","getData","isPushOnly","OP_16","PUBKEY_OUT","PUBKEY_IN","PUBKEYHASH_OUT","PUBKEYHASH_IN","SCRIPTHASH_OUT","SCRIPTHASH_IN","MULTISIG_OUT","MULTISIG_IN","DATA_OUT","identifiers","bind","isStandard","prepend","_addByType","equals","add","_addOpcode","_addBuffer","_insertAtPosition","op","unshift","Math","pow","removeCodeseparators","OP_CODESEPARATOR","buildMultisigOut","publicKeys","threshold","opts","checkArgument","smallInt","map","sorted","noSorting","sortBy","publicKey","buildMultisigIn","pubkeys","signatures","isArray","isNumber","s","OP_0","each","signature","buildP2SHMultisigIn","cachedMultisig","buildPublicKeyHashOut","to","isString","toAddress","hashBuffer","_network","network","buildPublicKeyOut","pubkey","buildDataOut","data","encoding","buildScriptHashOut","isPayToScriptHash","sha256ripemd160","buildPublicKeyIn","sigtype","integerAsSingleByteBuffer","SIGHASH_ALL","buildPublicKeyHashIn","empty","toScriptHashOut","address","isPayToPublicKeyHash","UnrecognizedAddress","getAddressInfo","_isInput","_getInputAddressInfo","_isOutput","_getOutputAddressInfo","info","PayToScriptHash","PayToPublicKeyHash","get","defaultNetwork","findAndDelete","hex","script2","buf2","hex2","splice","checkMinimalPush","OP_1","OP_1NEGATE","_decodeOP_N","getSignatureOperationsCount","accurate","self","n","lastOpcode","OP_INVALIDOPCODE","getChunk","OP_CHECKSIGVERIFY","OP_CHECKMULTISIGVERIFY","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nvar Address = require('../address');\nvar BufferReader = require('../encoding/bufferreader');\nvar BufferWriter = require('../encoding/bufferwriter');\nvar Hash = require('../crypto/hash');\nvar Opcode = require('../opcode');\nvar PublicKey = require('../publickey');\nvar Signature = require('../crypto/signature');\nvar Networks = require('../networks');\nvar $ = require('../util/preconditions');\nvar _ = require('lodash');\nvar errors = require('../errors');\nvar buffer = require('buffer');\nvar BufferUtil = require('../util/buffer');\nvar JSUtil = require('../util/js');\n\n/**\n * A bitcoin transaction script. Each transaction's inputs and outputs\n * has a script that is evaluated to validate it's spending.\n *\n * See https://en.bitcoin.it/wiki/Script\n *\n * @constructor\n * @param {Object|string|Buffer=} from optional data to populate script\n */\nvar Script = function Script(from) {\n  if (!(this instanceof Script)) {\n    return new Script(from);\n  }\n  this.chunks = [];\n\n  if (BufferUtil.isBuffer(from)) {\n    return Script.fromBuffer(from);\n  } else if (from instanceof Address) {\n    return Script.fromAddress(from);\n  } else if (from instanceof Script) {\n    return Script.fromBuffer(from.toBuffer());\n  } else if (typeof from === 'string') {\n    return Script.fromString(from);\n  } else if (typeof from !== 'undefined') {\n    this.set(from);\n  }\n};\n\nScript.prototype.set = function(obj) {\n  this.chunks = obj.chunks || this.chunks;\n  return this;\n};\n\nScript.fromBuffer = function(buffer) {\n  var script = new Script();\n  script.chunks = [];\n\n  var br = new BufferReader(buffer);\n  while (!br.finished()) {\n    try {\n      var opcodenum = br.readUInt8();\n\n      var len, buf;\n      if (opcodenum > 0 && opcodenum < Opcode.OP_PUSHDATA1) {\n        len = opcodenum;\n        script.chunks.push({\n          buf: br.read(len),\n          len: len,\n          opcodenum: opcodenum\n        });\n      } else if (opcodenum === Opcode.OP_PUSHDATA1) {\n        len = br.readUInt8();\n        buf = br.read(len);\n        script.chunks.push({\n          buf: buf,\n          len: len,\n          opcodenum: opcodenum\n        });\n      } else if (opcodenum === Opcode.OP_PUSHDATA2) {\n        len = br.readUInt16LE();\n        buf = br.read(len);\n        script.chunks.push({\n          buf: buf,\n          len: len,\n          opcodenum: opcodenum\n        });\n      } else if (opcodenum === Opcode.OP_PUSHDATA4) {\n        len = br.readUInt32LE();\n        buf = br.read(len);\n        script.chunks.push({\n          buf: buf,\n          len: len,\n          opcodenum: opcodenum\n        });\n      } else {\n        script.chunks.push({\n          opcodenum: opcodenum\n        });\n      }\n    } catch (e) {\n      if (e instanceof RangeError) {\n        throw new errors.Script.InvalidBuffer(buffer.toString('hex'));\n      }\n      throw e;\n    }\n  }\n\n  return script;\n};\n\nScript.prototype.toBuffer = function() {\n  var bw = new BufferWriter();\n\n  for (var i = 0; i < this.chunks.length; i++) {\n    var chunk = this.chunks[i];\n    var opcodenum = chunk.opcodenum;\n    bw.writeUInt8(chunk.opcodenum);\n    if (chunk.buf) {\n      if (opcodenum < Opcode.OP_PUSHDATA1) {\n        bw.write(chunk.buf);\n      } else if (opcodenum === Opcode.OP_PUSHDATA1) {\n        bw.writeUInt8(chunk.len);\n        bw.write(chunk.buf);\n      } else if (opcodenum === Opcode.OP_PUSHDATA2) {\n        bw.writeUInt16LE(chunk.len);\n        bw.write(chunk.buf);\n      } else if (opcodenum === Opcode.OP_PUSHDATA4) {\n        bw.writeUInt32LE(chunk.len);\n        bw.write(chunk.buf);\n      }\n    }\n  }\n\n  return bw.concat();\n};\n\nScript.fromASM = function(str) {\n  var script = new Script();\n  script.chunks = [];\n\n  var tokens = str.split(' ');\n  var i = 0;\n  while (i < tokens.length) {\n    var token = tokens[i];\n    var opcode = Opcode(token);\n    var opcodenum = opcode.toNumber();\n\n    if (_.isUndefined(opcodenum)) {\n      var buf = new Buffer(tokens[i], 'hex');\n      script.chunks.push({\n        buf: buf,\n        len: buf.length,\n        opcodenum: buf.length\n      });\n      i = i + 1;\n    } else if (opcodenum === Opcode.OP_PUSHDATA1 ||\n      opcodenum === Opcode.OP_PUSHDATA2 ||\n      opcodenum === Opcode.OP_PUSHDATA4) {\n      script.chunks.push({\n        buf: new Buffer(tokens[i + 2], 'hex'),\n        len: parseInt(tokens[i + 1]),\n        opcodenum: opcodenum\n      });\n      i = i + 3;\n    } else {\n      script.chunks.push({\n        opcodenum: opcodenum\n      });\n      i = i + 1;\n    }\n  }\n  return script;\n};\n\nScript.fromHex = function(str) {\n  return new Script(new buffer.Buffer(str, 'hex'));\n};\n\nScript.fromString = function(str) {\n  if (JSUtil.isHexa(str) || str.length === 0) {\n    return new Script(new buffer.Buffer(str, 'hex'));\n  }\n  var script = new Script();\n  script.chunks = [];\n\n  var tokens = str.split(' ');\n  var i = 0;\n  while (i < tokens.length) {\n    var token = tokens[i];\n    var opcode = Opcode(token);\n    var opcodenum = opcode.toNumber();\n\n    if (_.isUndefined(opcodenum)) {\n      opcodenum = parseInt(token);\n      if (opcodenum > 0 && opcodenum < Opcode.OP_PUSHDATA1) {\n        script.chunks.push({\n          buf: new Buffer(tokens[i + 1].slice(2), 'hex'),\n          len: opcodenum,\n          opcodenum: opcodenum\n        });\n        i = i + 2;\n      } else {\n        throw new Error('Invalid script: ' + JSON.stringify(str));\n      }\n    } else if (opcodenum === Opcode.OP_PUSHDATA1 ||\n      opcodenum === Opcode.OP_PUSHDATA2 ||\n      opcodenum === Opcode.OP_PUSHDATA4) {\n      if (tokens[i + 2].slice(0, 2) !== '0x') {\n        throw new Error('Pushdata data must start with 0x');\n      }\n      script.chunks.push({\n        buf: new Buffer(tokens[i + 2].slice(2), 'hex'),\n        len: parseInt(tokens[i + 1]),\n        opcodenum: opcodenum\n      });\n      i = i + 3;\n    } else {\n      script.chunks.push({\n        opcodenum: opcodenum\n      });\n      i = i + 1;\n    }\n  }\n  return script;\n};\n\nScript.prototype._chunkToString = function(chunk, type) {\n  var opcodenum = chunk.opcodenum;\n  var asm = (type === 'asm');\n  var str = '';\n  if (!chunk.buf) {\n    // no data chunk\n    if (typeof Opcode.reverseMap[opcodenum] !== 'undefined') {\n      str = str + ' ' + Opcode(opcodenum).toString();\n    } else {\n      var numstr = opcodenum.toString(16);\n      if (numstr.length % 2 !== 0) {\n        numstr = '0' + numstr;\n      }\n      if (asm) {\n        str = str + ' ' + numstr;\n      } else {\n        str = str + ' ' + '0x' + numstr;\n      }\n    }\n  } else {\n    // data chunk\n    if (opcodenum === Opcode.OP_PUSHDATA1 ||\n      opcodenum === Opcode.OP_PUSHDATA2 ||\n      opcodenum === Opcode.OP_PUSHDATA4) {\n      str = str + ' ' + Opcode(opcodenum).toString();\n    }\n    if (chunk.len > 0) {\n      if (asm) {\n        str = str + ' ' + chunk.buf.toString('hex');\n      } else {\n        str = str + ' ' + chunk.len + ' ' + '0x' + chunk.buf.toString('hex');\n      }\n    }\n  }\n  return str;\n};\n\nScript.prototype.toASM = function() {\n  var str = '';\n  for (var i = 0; i < this.chunks.length; i++) {\n    var chunk = this.chunks[i];\n    str += this._chunkToString(chunk, 'asm');\n  }\n\n  return str.substr(1);\n};\n\nScript.prototype.toString = function() {\n  var str = '';\n  for (var i = 0; i < this.chunks.length; i++) {\n    var chunk = this.chunks[i];\n    str += this._chunkToString(chunk);\n  }\n\n  return str.substr(1);\n};\n\nScript.prototype.toHex = function() {\n  return this.toBuffer().toString('hex');\n};\n\nScript.prototype.inspect = function() {\n  return '<Script: ' + this.toString() + '>';\n};\n\n// script classification methods\n\n/**\n * @returns {boolean} if this is a pay to pubkey hash output script\n */\nScript.prototype.isPublicKeyHashOut = function() {\n  return !!(this.chunks.length === 5 &&\n    this.chunks[0].opcodenum === Opcode.OP_DUP &&\n    this.chunks[1].opcodenum === Opcode.OP_HASH160 &&\n    this.chunks[2].buf &&\n    this.chunks[2].buf.length === 20 &&\n    this.chunks[3].opcodenum === Opcode.OP_EQUALVERIFY &&\n    this.chunks[4].opcodenum === Opcode.OP_CHECKSIG);\n};\n\n/**\n * @returns {boolean} if this is a pay to public key hash input script\n */\nScript.prototype.isPublicKeyHashIn = function() {\n  if (this.chunks.length === 2) {\n    var signatureBuf = this.chunks[0].buf;\n    var pubkeyBuf = this.chunks[1].buf;\n    if (signatureBuf &&\n        signatureBuf.length &&\n        signatureBuf[0] === 0x30 &&\n        pubkeyBuf &&\n        pubkeyBuf.length\n       ) {\n      var version = pubkeyBuf[0];\n      if ((version === 0x04 ||\n           version === 0x06 ||\n           version === 0x07) && pubkeyBuf.length === 65) {\n        return true;\n      } else if ((version === 0x03 || version === 0x02) && pubkeyBuf.length === 33) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\nScript.prototype.getPublicKey = function() {\n  $.checkState(this.isPublicKeyOut(), 'Can\\'t retreive PublicKey from a non-PK output');\n  return this.chunks[0].buf;\n};\n\nScript.prototype.getPublicKeyHash = function() {\n  $.checkState(this.isPublicKeyHashOut(), 'Can\\'t retrieve PublicKeyHash from a non-PKH output');\n  return this.chunks[2].buf;\n};\n\n/**\n * @returns {boolean} if this is a public key output script\n */\nScript.prototype.isPublicKeyOut = function() {\n  if (this.chunks.length === 2 &&\n      this.chunks[0].buf &&\n      this.chunks[0].buf.length &&\n      this.chunks[1].opcodenum === Opcode.OP_CHECKSIG) {\n    var pubkeyBuf = this.chunks[0].buf;\n    var version = pubkeyBuf[0];\n    var isVersion = false;\n    if ((version === 0x04 ||\n         version === 0x06 ||\n         version === 0x07) && pubkeyBuf.length === 65) {\n      isVersion = true;\n    } else if ((version === 0x03 || version === 0x02) && pubkeyBuf.length === 33) {\n      isVersion = true;\n    }\n    if (isVersion) {\n      return PublicKey.isValid(pubkeyBuf);\n    }\n  }\n  return false;\n};\n\n/**\n * @returns {boolean} if this is a pay to public key input script\n */\nScript.prototype.isPublicKeyIn = function() {\n  if (this.chunks.length === 1) {\n    var signatureBuf = this.chunks[0].buf;\n    if (signatureBuf &&\n        signatureBuf.length &&\n        signatureBuf[0] === 0x30) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/**\n * @returns {boolean} if this is a p2sh output script\n */\nScript.prototype.isScriptHashOut = function() {\n  var buf = this.toBuffer();\n  return (buf.length === 23 &&\n    buf[0] === Opcode.OP_HASH160 &&\n    buf[1] === 0x14 &&\n    buf[buf.length - 1] === Opcode.OP_EQUAL);\n};\n\n/**\n * @returns {boolean} if this is a p2sh input script\n * Note that these are frequently indistinguishable from pubkeyhashin\n */\nScript.prototype.isScriptHashIn = function() {\n  if (this.chunks.length <= 1) {\n    return false;\n  }\n  var redeemChunk = this.chunks[this.chunks.length - 1];\n  var redeemBuf = redeemChunk.buf;\n  if (!redeemBuf) {\n    return false;\n  }\n\n  var redeemScript;\n  try {\n    redeemScript = Script.fromBuffer(redeemBuf);\n  } catch (e) {\n    if (e instanceof errors.Script.InvalidBuffer) {\n      return false;\n    }\n    throw e;\n  }\n  var type = redeemScript.classify();\n  return type !== Script.types.UNKNOWN;\n};\n\n/**\n * @returns {boolean} if this is a mutlsig output script\n */\nScript.prototype.isMultisigOut = function() {\n  return (this.chunks.length > 3 &&\n    Opcode.isSmallIntOp(this.chunks[0].opcodenum) &&\n    this.chunks.slice(1, this.chunks.length - 2).every(function(obj) {\n      return obj.buf && BufferUtil.isBuffer(obj.buf);\n    }) &&\n    Opcode.isSmallIntOp(this.chunks[this.chunks.length - 2].opcodenum) &&\n    this.chunks[this.chunks.length - 1].opcodenum === Opcode.OP_CHECKMULTISIG);\n};\n\n\n/**\n * @returns {boolean} if this is a multisig input script\n */\nScript.prototype.isMultisigIn = function() {\n  return this.chunks.length >= 2 &&\n    this.chunks[0].opcodenum === 0 &&\n    this.chunks.slice(1, this.chunks.length).every(function(obj) {\n      return obj.buf &&\n        BufferUtil.isBuffer(obj.buf) &&\n        Signature.isTxDER(obj.buf);\n    });\n};\n\n/**\n * @returns {boolean} true if this is a valid standard OP_RETURN output\n */\nScript.prototype.isDataOut = function() {\n  return this.chunks.length >= 1 &&\n    this.chunks[0].opcodenum === Opcode.OP_RETURN &&\n    (this.chunks.length === 1 ||\n      (this.chunks.length === 2 &&\n        this.chunks[1].buf &&\n        this.chunks[1].buf.length <= Script.OP_RETURN_STANDARD_SIZE &&\n        this.chunks[1].length === this.chunks.len));\n};\n\n/**\n * Retrieve the associated data for this script.\n * In the case of a pay to public key hash or P2SH, return the hash.\n * In the case of a standard OP_RETURN, return the data\n * @returns {Buffer}\n */\nScript.prototype.getData = function() {\n  if (this.isDataOut() || this.isScriptHashOut()) {\n    if (_.isUndefined(this.chunks[1])) {\n      return new Buffer(0);\n    } else {\n      return new Buffer(this.chunks[1].buf);\n    }\n  }\n  if (this.isPublicKeyHashOut()) {\n    return new Buffer(this.chunks[2].buf);\n  }\n  throw new Error('Unrecognized script type to get data from');\n};\n\n/**\n * @returns {boolean} if the script is only composed of data pushing\n * opcodes or small int opcodes (OP_0, OP_1, ..., OP_16)\n */\nScript.prototype.isPushOnly = function() {\n  return _.every(this.chunks, function(chunk) {\n    return chunk.opcodenum <= Opcode.OP_16;\n  });\n};\n\n\nScript.types = {};\nScript.types.UNKNOWN = 'Unknown';\nScript.types.PUBKEY_OUT = 'Pay to public key';\nScript.types.PUBKEY_IN = 'Spend from public key';\nScript.types.PUBKEYHASH_OUT = 'Pay to public key hash';\nScript.types.PUBKEYHASH_IN = 'Spend from public key hash';\nScript.types.SCRIPTHASH_OUT = 'Pay to script hash';\nScript.types.SCRIPTHASH_IN = 'Spend from script hash';\nScript.types.MULTISIG_OUT = 'Pay to multisig';\nScript.types.MULTISIG_IN = 'Spend from multisig';\nScript.types.DATA_OUT = 'Data push';\n\nScript.OP_RETURN_STANDARD_SIZE = 80;\n\nScript.identifiers = {};\nScript.identifiers.PUBKEY_OUT = Script.prototype.isPublicKeyOut;\nScript.identifiers.PUBKEY_IN = Script.prototype.isPublicKeyIn;\nScript.identifiers.PUBKEYHASH_OUT = Script.prototype.isPublicKeyHashOut;\nScript.identifiers.PUBKEYHASH_IN = Script.prototype.isPublicKeyHashIn;\nScript.identifiers.MULTISIG_OUT = Script.prototype.isMultisigOut;\nScript.identifiers.MULTISIG_IN = Script.prototype.isMultisigIn;\nScript.identifiers.SCRIPTHASH_OUT = Script.prototype.isScriptHashOut;\nScript.identifiers.SCRIPTHASH_IN = Script.prototype.isScriptHashIn;\nScript.identifiers.DATA_OUT = Script.prototype.isDataOut;\n\n/**\n * @returns {object} The Script type if it is a known form,\n * or Script.UNKNOWN if it isn't\n */\nScript.prototype.classify = function() {\n  for (var type in Script.identifiers) {\n    if (Script.identifiers[type].bind(this)()) {\n      return Script.types[type];\n    }\n  }\n  return Script.types.UNKNOWN;\n};\n\n\n/**\n * @returns {boolean} if script is one of the known types\n */\nScript.prototype.isStandard = function() {\n  // TODO: Add BIP62 compliance\n  return this.classify() !== Script.types.UNKNOWN;\n};\n\n\n// Script construction methods\n\n/**\n * Adds a script element at the start of the script.\n * @param {*} obj a string, number, Opcode, Buffer, or object to add\n * @returns {Script} this script instance\n */\nScript.prototype.prepend = function(obj) {\n  this._addByType(obj, true);\n  return this;\n};\n\n/**\n * Compares a script with another script\n */\nScript.prototype.equals = function(script) {\n  $.checkState(script instanceof Script, 'Must provide another script');\n  if (this.chunks.length !== script.chunks.length) {\n    return false;\n  }\n  var i;\n  for (i = 0; i < this.chunks.length; i++) {\n    if (BufferUtil.isBuffer(this.chunks[i].buf) && !BufferUtil.isBuffer(script.chunks[i].buf)) {\n      return false;\n    }\n    if (BufferUtil.isBuffer(this.chunks[i].buf) && !BufferUtil.equals(this.chunks[i].buf, script.chunks[i].buf)) {\n      return false;\n    } else if (this.chunks[i].opcodenum !== script.chunks[i].opcodenum) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Adds a script element to the end of the script.\n *\n * @param {*} obj a string, number, Opcode, Buffer, or object to add\n * @returns {Script} this script instance\n *\n */\nScript.prototype.add = function(obj) {\n  this._addByType(obj, false);\n  return this;\n};\n\nScript.prototype._addByType = function(obj, prepend) {\n  if (typeof obj === 'string') {\n    this._addOpcode(obj, prepend);\n  } else if (typeof obj === 'number') {\n    this._addOpcode(obj, prepend);\n  } else if (obj instanceof Opcode) {\n    this._addOpcode(obj, prepend);\n  } else if (BufferUtil.isBuffer(obj)) {\n    this._addBuffer(obj, prepend);\n  } else if (obj instanceof Script) {\n    this.chunks = this.chunks.concat(obj.chunks);\n  } else if (typeof obj === 'object') {\n    this._insertAtPosition(obj, prepend);\n  } else {\n    throw new Error('Invalid script chunk');\n  }\n};\n\nScript.prototype._insertAtPosition = function(op, prepend) {\n  if (prepend) {\n    this.chunks.unshift(op);\n  } else {\n    this.chunks.push(op);\n  }\n};\n\nScript.prototype._addOpcode = function(opcode, prepend) {\n  var op;\n  if (typeof opcode === 'number') {\n    op = opcode;\n  } else if (opcode instanceof Opcode) {\n    op = opcode.toNumber();\n  } else {\n    op = Opcode(opcode).toNumber();\n  }\n  this._insertAtPosition({\n    opcodenum: op\n  }, prepend);\n  return this;\n};\n\nScript.prototype._addBuffer = function(buf, prepend) {\n  var opcodenum;\n  var len = buf.length;\n  if (len >= 0 && len < Opcode.OP_PUSHDATA1) {\n    opcodenum = len;\n  } else if (len < Math.pow(2, 8)) {\n    opcodenum = Opcode.OP_PUSHDATA1;\n  } else if (len < Math.pow(2, 16)) {\n    opcodenum = Opcode.OP_PUSHDATA2;\n  } else if (len < Math.pow(2, 32)) {\n    opcodenum = Opcode.OP_PUSHDATA4;\n  } else {\n    throw new Error('You can\\'t push that much data');\n  }\n  this._insertAtPosition({\n    buf: buf,\n    len: len,\n    opcodenum: opcodenum\n  }, prepend);\n  return this;\n};\n\nScript.prototype.removeCodeseparators = function() {\n  var chunks = [];\n  for (var i = 0; i < this.chunks.length; i++) {\n    if (this.chunks[i].opcodenum !== Opcode.OP_CODESEPARATOR) {\n      chunks.push(this.chunks[i]);\n    }\n  }\n  this.chunks = chunks;\n  return this;\n};\n\n// high level script builder methods\n\n/**\n * @returns {Script} a new Multisig output script for given public keys,\n * requiring m of those public keys to spend\n * @param {PublicKey[]} publicKeys - list of all public keys controlling the output\n * @param {number} threshold - amount of required signatures to spend the output\n * @param {Object=} opts - Several options:\n *        - noSorting: defaults to false, if true, don't sort the given\n *                      public keys before creating the script\n */\nScript.buildMultisigOut = function(publicKeys, threshold, opts) {\n  $.checkArgument(threshold <= publicKeys.length,\n    'Number of required signatures must be less than or equal to the number of public keys');\n  opts = opts || {};\n  var script = new Script();\n  script.add(Opcode.smallInt(threshold));\n  publicKeys = _.map(publicKeys, PublicKey);\n  var sorted = publicKeys;\n  if (!opts.noSorting) {\n    sorted = _.sortBy(publicKeys, function(publicKey) {\n      return publicKey.toString('hex');\n    });\n  }\n  for (var i = 0; i < sorted.length; i++) {\n    var publicKey = sorted[i];\n    script.add(publicKey.toBuffer());\n  }\n  script.add(Opcode.smallInt(publicKeys.length));\n  script.add(Opcode.OP_CHECKMULTISIG);\n  return script;\n};\n\n/**\n * A new Multisig input script for the given public keys, requiring m of those public keys to spend\n *\n * @param {PublicKey[]} pubkeys list of all public keys controlling the output\n * @param {number} threshold amount of required signatures to spend the output\n * @param {Array} signatures and array of signature buffers to append to the script\n * @param {Object=} opts\n * @param {boolean=} opts.noSorting don't sort the given public keys before creating the script (false by default)\n * @param {Script=} opts.cachedMultisig don't recalculate the redeemScript\n *\n * @returns {Script}\n */\nScript.buildMultisigIn = function(pubkeys, threshold, signatures, opts) {\n  $.checkArgument(_.isArray(pubkeys));\n  $.checkArgument(_.isNumber(threshold));\n  $.checkArgument(_.isArray(signatures));\n  opts = opts || {};\n  var s = new Script();\n  s.add(Opcode.OP_0);\n  _.each(signatures, function(signature) {\n    $.checkArgument(BufferUtil.isBuffer(signature), 'Signatures must be an array of Buffers');\n    // TODO: allow signatures to be an array of Signature objects\n    s.add(signature);\n  });\n  return s;\n};\n\n/**\n * A new P2SH Multisig input script for the given public keys, requiring m of those public keys to spend\n *\n * @param {PublicKey[]} pubkeys list of all public keys controlling the output\n * @param {number} threshold amount of required signatures to spend the output\n * @param {Array} signatures and array of signature buffers to append to the script\n * @param {Object=} opts\n * @param {boolean=} opts.noSorting don't sort the given public keys before creating the script (false by default)\n * @param {Script=} opts.cachedMultisig don't recalculate the redeemScript\n *\n * @returns {Script}\n */\nScript.buildP2SHMultisigIn = function(pubkeys, threshold, signatures, opts) {\n  $.checkArgument(_.isArray(pubkeys));\n  $.checkArgument(_.isNumber(threshold));\n  $.checkArgument(_.isArray(signatures));\n  opts = opts || {};\n  var s = new Script();\n  s.add(Opcode.OP_0);\n  _.each(signatures, function(signature) {\n    $.checkArgument(BufferUtil.isBuffer(signature), 'Signatures must be an array of Buffers');\n    // TODO: allow signatures to be an array of Signature objects\n    s.add(signature);\n  });\n  s.add((opts.cachedMultisig || Script.buildMultisigOut(pubkeys, threshold, opts)).toBuffer());\n  return s;\n};\n\n/**\n * @returns {Script} a new pay to public key hash output for the given\n * address or public key\n * @param {(Address|PublicKey)} to - destination address or public key\n */\nScript.buildPublicKeyHashOut = function(to) {\n  $.checkArgument(!_.isUndefined(to));\n  $.checkArgument(to instanceof PublicKey || to instanceof Address || _.isString(to));\n  if (to instanceof PublicKey) {\n    to = to.toAddress();\n  } else if (_.isString(to)) {\n    to = new Address(to);\n  }\n  var s = new Script();\n  s.add(Opcode.OP_DUP)\n    .add(Opcode.OP_HASH160)\n    .add(to.hashBuffer)\n    .add(Opcode.OP_EQUALVERIFY)\n    .add(Opcode.OP_CHECKSIG);\n  s._network = to.network;\n  return s;\n};\n\n/**\n * @returns {Script} a new pay to public key output for the given\n *  public key\n */\nScript.buildPublicKeyOut = function(pubkey) {\n  $.checkArgument(pubkey instanceof PublicKey);\n  var s = new Script();\n  s.add(pubkey.toBuffer())\n    .add(Opcode.OP_CHECKSIG);\n  return s;\n};\n\n/**\n * @returns {Script} a new OP_RETURN script with data\n * @param {(string|Buffer)} data - the data to embed in the output\n * @param {(string)} encoding - the type of encoding of the string\n */\nScript.buildDataOut = function(data, encoding) {\n  $.checkArgument(_.isUndefined(data) || _.isString(data) || BufferUtil.isBuffer(data));\n  if (_.isString(data)) {\n    data = new Buffer(data, encoding);\n  }\n  var s = new Script();\n  s.add(Opcode.OP_RETURN);\n  if (!_.isUndefined(data)) {\n    s.add(data);\n  }\n  return s;\n};\n\n/**\n * @param {Script|Address} script - the redeemScript for the new p2sh output.\n *    It can also be a p2sh address\n * @returns {Script} new pay to script hash script for given script\n */\nScript.buildScriptHashOut = function(script) {\n  $.checkArgument(script instanceof Script ||\n    (script instanceof Address && script.isPayToScriptHash()));\n  var s = new Script();\n  s.add(Opcode.OP_HASH160)\n    .add(script instanceof Address ? script.hashBuffer : Hash.sha256ripemd160(script.toBuffer()))\n    .add(Opcode.OP_EQUAL);\n\n  s._network = script._network || script.network;\n  return s;\n};\n\n/**\n * Builds a scriptSig (a script for an input) that signs a public key output script.\n *\n * @param {Signature|Buffer} signature - a Signature object, or the signature in DER canonical encoding\n * @param {number=} sigtype - the type of the signature (defaults to SIGHASH_ALL)\n */\nScript.buildPublicKeyIn = function(signature, sigtype) {\n  $.checkArgument(signature instanceof Signature || BufferUtil.isBuffer(signature));\n  $.checkArgument(_.isUndefined(sigtype) || _.isNumber(sigtype));\n  if (signature instanceof Signature) {\n    signature = signature.toBuffer();\n  }\n  var script = new Script();\n  script.add(BufferUtil.concat([\n    signature,\n    BufferUtil.integerAsSingleByteBuffer(sigtype || Signature.SIGHASH_ALL)\n  ]));\n  return script;\n};\n\n/**\n * Builds a scriptSig (a script for an input) that signs a public key hash\n * output script.\n *\n * @param {Buffer|string|PublicKey} publicKey\n * @param {Signature|Buffer} signature - a Signature object, or the signature in DER canonical encoding\n * @param {number=} sigtype - the type of the signature (defaults to SIGHASH_ALL)\n */\nScript.buildPublicKeyHashIn = function(publicKey, signature, sigtype) {\n  $.checkArgument(signature instanceof Signature || BufferUtil.isBuffer(signature));\n  $.checkArgument(_.isUndefined(sigtype) || _.isNumber(sigtype));\n  if (signature instanceof Signature) {\n    signature = signature.toBuffer();\n  }\n  var script = new Script()\n    .add(BufferUtil.concat([\n      signature,\n      BufferUtil.integerAsSingleByteBuffer(sigtype || Signature.SIGHASH_ALL)\n    ]))\n    .add(new PublicKey(publicKey).toBuffer());\n  return script;\n};\n\n/**\n * @returns {Script} an empty script\n */\nScript.empty = function() {\n  return new Script();\n};\n\n/**\n * @returns {Script} a new pay to script hash script that pays to this script\n */\nScript.prototype.toScriptHashOut = function() {\n  return Script.buildScriptHashOut(this);\n};\n\n/**\n * @return {Script} an output script built from the address\n */\nScript.fromAddress = function(address) {\n  address = Address(address);\n  if (address.isPayToScriptHash()) {\n    return Script.buildScriptHashOut(address);\n  } else if (address.isPayToPublicKeyHash()) {\n    return Script.buildPublicKeyHashOut(address);\n  }\n  throw new errors.Script.UnrecognizedAddress(address);\n};\n\n/**\n * Will return the associated address information object\n * @return {Address|boolean}\n */\nScript.prototype.getAddressInfo = function(opts) {\n  if (this._isInput) {\n    return this._getInputAddressInfo();\n  } else if (this._isOutput) {\n    return this._getOutputAddressInfo();\n  } else {\n    var info = this._getOutputAddressInfo();\n    if (!info) {\n      return this._getInputAddressInfo();\n    }\n    return info;\n  }\n};\n\n/**\n * Will return the associated output scriptPubKey address information object\n * @return {Address|boolean}\n * @private\n */\nScript.prototype._getOutputAddressInfo = function() {\n  var info = {};\n  if (this.isScriptHashOut()) {\n    info.hashBuffer = this.getData();\n    info.type = Address.PayToScriptHash;\n  } else if (this.isPublicKeyHashOut()) {\n    info.hashBuffer = this.getData();\n    info.type = Address.PayToPublicKeyHash;\n  } else {\n    return false;\n  }\n  return info;\n};\n\n/**\n * Will return the associated input scriptSig address information object\n * @return {Address|boolean}\n * @private\n */\nScript.prototype._getInputAddressInfo = function() {\n  var info = {};\n  if (this.isPublicKeyHashIn()) {\n    // hash the publickey found in the scriptSig\n    info.hashBuffer = Hash.sha256ripemd160(this.chunks[1].buf);\n    info.type = Address.PayToPublicKeyHash;\n  } else if (this.isScriptHashIn()) {\n    // hash the redeemscript found at the end of the scriptSig\n    info.hashBuffer = Hash.sha256ripemd160(this.chunks[this.chunks.length - 1].buf);\n    info.type = Address.PayToScriptHash;\n  } else {\n    return false;\n  }\n  return info;\n};\n\n/**\n * @param {Network=} network\n * @return {Address|boolean} the associated address for this script if possible, or false\n */\nScript.prototype.toAddress = function(network) {\n  var info = this.getAddressInfo();\n  if (!info) {\n    return false;\n  }\n  info.network = Networks.get(network) || this._network || Networks.defaultNetwork;\n  return new Address(info);\n};\n\n/**\n * Analogous to bitcoind's FindAndDelete. Find and delete equivalent chunks,\n * typically used with push data chunks.  Note that this will find and delete\n * not just the same data, but the same data with the same push data op as\n * produced by default. i.e., if a pushdata in a tx does not use the minimal\n * pushdata op, then when you try to remove the data it is pushing, it will not\n * be removed, because they do not use the same pushdata op.\n */\nScript.prototype.findAndDelete = function(script) {\n  var buf = script.toBuffer();\n  var hex = buf.toString('hex');\n  for (var i = 0; i < this.chunks.length; i++) {\n    var script2 = Script({\n      chunks: [this.chunks[i]]\n    });\n    var buf2 = script2.toBuffer();\n    var hex2 = buf2.toString('hex');\n    if (hex === hex2) {\n      this.chunks.splice(i, 1);\n    }\n  }\n  return this;\n};\n\n/**\n * Comes from bitcoind's script interpreter CheckMinimalPush function\n * @returns {boolean} if the chunk {i} is the smallest way to push that particular data.\n */\nScript.prototype.checkMinimalPush = function(i) {\n  var chunk = this.chunks[i];\n  var buf = chunk.buf;\n  var opcodenum = chunk.opcodenum;\n  if (!buf) {\n    return true;\n  }\n  if (buf.length === 0) {\n    // Could have used OP_0.\n    return opcodenum === Opcode.OP_0;\n  } else if (buf.length === 1 && buf[0] >= 1 && buf[0] <= 16) {\n    // Could have used OP_1 .. OP_16.\n    return opcodenum === Opcode.OP_1 + (buf[0] - 1);\n  } else if (buf.length === 1 && buf[0] === 0x81) {\n    // Could have used OP_1NEGATE\n    return opcodenum === Opcode.OP_1NEGATE;\n  } else if (buf.length <= 75) {\n    // Could have used a direct push (opcode indicating number of bytes pushed + those bytes).\n    return opcodenum === buf.length;\n  } else if (buf.length <= 255) {\n    // Could have used OP_PUSHDATA.\n    return opcodenum === Opcode.OP_PUSHDATA1;\n  } else if (buf.length <= 65535) {\n    // Could have used OP_PUSHDATA2.\n    return opcodenum === Opcode.OP_PUSHDATA2;\n  }\n  return true;\n};\n\n/**\n * Comes from bitcoind's script DecodeOP_N function\n * @param {number} opcode\n * @returns {number} numeric value in range of 0 to 16\n */\nScript.prototype._decodeOP_N = function(opcode) {\n  if (opcode === Opcode.OP_0) {\n    return 0;\n  } else if (opcode >= Opcode.OP_1 && opcode <= Opcode.OP_16) {\n    return opcode - (Opcode.OP_1 - 1);\n  } else {\n    throw new Error('Invalid opcode: ' + JSON.stringify(opcode));\n  }\n};\n\n/**\n * Comes from bitcoind's script GetSigOpCount(boolean) function\n * @param {boolean} use current (true) or pre-version-0.6 (false) logic\n * @returns {number} number of signature operations required by this script\n */\nScript.prototype.getSignatureOperationsCount = function(accurate) {\n  accurate = (_.isUndefined(accurate) ? true : accurate);\n  var self = this;\n  var n = 0;\n  var lastOpcode = Opcode.OP_INVALIDOPCODE;\n  _.each(self.chunks, function getChunk(chunk) {\n    var opcode = chunk.opcodenum;\n    if (opcode == Opcode.OP_CHECKSIG || opcode == Opcode.OP_CHECKSIGVERIFY) {\n      n++;\n    } else if (opcode == Opcode.OP_CHECKMULTISIG || opcode == Opcode.OP_CHECKMULTISIGVERIFY) {\n      if (accurate && lastOpcode >= Opcode.OP_1 && lastOpcode <= Opcode.OP_16) {\n        n += self._decodeOP_N(lastOpcode);\n      } else {\n        n += 20;\n      }\n    }\n    lastOpcode = opcode;\n  });\n  return n;\n};\n\nmodule.exports = Script;\n"]},"metadata":{},"sourceType":"script"}